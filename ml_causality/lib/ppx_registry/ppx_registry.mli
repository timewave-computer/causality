(**
  A global registry for storing Lisp S-expression strings generated by the PPX transpiler.
  The DSL modules (`define_effect_resource`, etc.) will use this registry to retrieve
  the Lisp code corresponding to OCaml functions annotated for TEL.
  
  Enhanced with content-addressed storage for Lisp code deduplication.
*)

(** The type of the key used in the registry. Typically a fully qualified OCaml function name. *)
type key = string

(** The type of the value stored: a Lisp S-expression string. *)
type lisp_code = string

(** Content-addressed ID for Lisp code *)
type lisp_code_id = string

(** [register_logic key code]
    Registers a Lisp S-expression string under a given key.
    This is intended to be called by the PPX rewriter during compilation.
    If a key is already present, its value will be replaced.
    Returns the content-addressed ID of the stored code.
*)
val register_logic : key -> lisp_code -> lisp_code_id

(** [get_logic key]
    Retrieves the Lisp S-expression string associated with a key, if any.
    This is intended to be called by the DSL functions when constructing TEL resources.
*)
val get_logic : key -> lisp_code option

(** [get_logic_id key]
    Retrieves the content-addressed ID for a function's Lisp code.
    Returns the ID if found, None otherwise.
*)
val get_logic_id : key -> lisp_code_id option

(** [get_lisp_code_by_id code_id]
    Retrieves Lisp code by its content-addressed ID.
    Returns the code if found, None otherwise.
*)
val get_lisp_code_by_id : lisp_code_id -> lisp_code option

(** [store_lisp_code code]
    Stores Lisp code in content-addressed storage.
    Returns the content-addressed ID for the code.
*)
val store_lisp_code : lisp_code -> lisp_code_id

(** [get_deduplication_stats ()]
    Get statistics about code deduplication.
    Returns (unique_functions, unique_code_segments) tuple.
*)
val get_deduplication_stats : unit -> (int * int)