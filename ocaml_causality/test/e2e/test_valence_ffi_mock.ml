(* ------------ MOCK VALENCE FFI FOR TESTING ------------ *)
(* Purpose: Mock implementation of Valence FFI for testing without C dependencies *)

(* Abstract types for Valence FFI handles *)
type valence_account = string
type valence_library = string  
type valence_transaction = string

(* Account factory configuration *)
type account_factory_config = {
    owner : string
  ; account_type : string
  ; permissions : string list
}

(* Library approval configuration *)
type library_approval_config = {
    account : string
  ; library : string
  ; permissions : string list
}

(* Transaction submission configuration *)
type transaction_config = {
    account : string
  ; operation : string
  ; data : string
}

(* Mock implementations *)
let create_account_factory (config : account_factory_config) =
  Ok (Printf.sprintf "mock_account_%s" config.owner)

let get_account_status _account_id =
  Ok "active"

let is_account_valid account_id =
  String.length account_id > 0

let approve_library (_config : library_approval_config) =
  Ok ()

let list_approved_libraries _account_id =
  Ok ["mock_library_1"; "mock_library_2"]

let is_library_approved _account_id _library_id =
  true

let submit_transaction (config : transaction_config) =
  Ok (Printf.sprintf "mock_tx_%s_%s" config.account config.operation)

let get_transaction_history _account_id limit =
  Ok (Array.make limit "mock_transaction" |> Array.to_list)

let get_transaction_status _tx_id =
  Ok "confirmed"

let validate_account_owner owner =
  String.length owner > 0

let validate_library library_id =
  String.length library_id > 0

let validate_transaction account_id operation =
  String.length account_id > 0 && String.length operation > 0

(* Configuration builders *)
let make_account_factory_config ~owner ?(account_type="factory") ?(permissions=["read"; "write"; "execute"]) () =
  { owner; account_type; permissions }

let make_library_approval_config ~account ~library ?(permissions=["read"; "execute"]) () =
  { account; library; permissions }

let make_transaction_config ~account ~operation ?(data="") () =
  { account; operation; data }

(* Safe wrapper functions *)
let safe_create_account_factory (config : account_factory_config) =
  if not (validate_account_owner config.owner) then
    Error "Invalid account owner"
  else if config.account_type <> "factory" then
    Error "Only factory account type is supported"
  else
    create_account_factory config

let safe_approve_library (config : library_approval_config) =
  if not (is_account_valid config.account) then
    Error "Invalid account"
  else if not (validate_library config.library) then
    Error "Invalid library"
  else
    approve_library config

let safe_submit_transaction (config : transaction_config) =
  if not (is_account_valid config.account) then
    Error "Invalid account"
  else if not (validate_transaction config.account config.operation) then
    Error "Invalid transaction"
  else
    submit_transaction config

(* Interface generation *)
let generate_account_interface (config : account_factory_config) =
  let module_name = Printf.sprintf "Account_%s" (String.capitalize_ascii config.owner) in
  let interface_code = Printf.sprintf {|
module %s = struct
  let account_id = "%s"
  let account_type = "%s"
  let permissions = [%s]
  
  let create () = 
    Test_valence_ffi_mock.safe_create_account_factory {
      owner = "%s";
      account_type = "%s";
      permissions = [%s]
    }
end
|} 
    module_name
    config.owner
    config.account_type
    (String.concat "; " (List.map (Printf.sprintf "\"%s\"") config.permissions))
    config.owner
    config.account_type
    (String.concat "; " (List.map (Printf.sprintf "\"%s\"") config.permissions))
  in
  Ok interface_code

let generate_deployment_script (configs : account_factory_config list) =
  let script_header = "#!/bin/bash\n# Account Factory Deployment Script\n# Generated by Causality-Valence Integration\n\n" in
  let script_body = List.fold_left (fun acc config ->
    acc ^ Printf.sprintf "echo \"Creating account factory for %s...\"\n" config.owner ^
    Printf.sprintf "# Account: %s, Type: %s\n" config.owner config.account_type ^
    Printf.sprintf "# Permissions: %s\n\n" (String.concat ", " config.permissions)
  ) "" configs in
  let script_footer = "echo \"Account factory deployment complete\"\n" in
  Ok (script_header ^ script_body ^ script_footer) 