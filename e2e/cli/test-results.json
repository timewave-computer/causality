{
  "metadata": {
    "start_time": "2025-06-08T23:14:13.335134Z",
    "end_time": "2025-06-08T23:14:15.837311Z",
    "duration": {
      "secs": 2,
      "nanos": 502177000
    },
    "environment": {
      "os": "macos",
      "arch": "aarch64",
      "cli_version": null,
      "tools": {
        "rustc": "rustc 1.87.0 (17067e9ac 2025-05-09)",
        "cargo": "cargo 1.87.0 (99624be96 2025-05-06)",
        "ocaml": "The OCaml toplevel, version 5.1.1",
        "dune": "3.18.2",
        "git": "git version 2.49.0"
      }
    },
    "config": {
      "test_timeout_seconds": 120,
      "parallel_execution": true,
      "max_parallel_tests": 4,
      "continue_on_failure": true,
      "environment": {
        "temp_dir": null,
        "cleanup_artifacts": true,
        "env_vars": {}
      },
      "cli_binary_path": "/Users/hxrts/projects/timewave/reverse-causality/target/debug/causality"
    }
  },
  "category_results": {
    "zk": {
      "name": "zk",
      "passed": 21,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 396392000
      }
    },
    "deploy": {
      "name": "deploy",
      "passed": 5,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 67788000
      }
    },
    "analyze": {
      "name": "analyze",
      "passed": 10,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 120725959
      }
    },
    "repl": {
      "name": "repl",
      "passed": 12,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 247806209
      }
    },
    "project": {
      "name": "project",
      "passed": 25,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 476179708
      }
    },
    "help": {
      "name": "help",
      "passed": 29,
      "failed": 0,
      "skipped": 6,
      "duration": {
        "secs": 0,
        "nanos": 542136667
      }
    },
    "test": {
      "name": "test",
      "passed": 11,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 201591750
      }
    },
    "inspect": {
      "name": "inspect",
      "passed": 2,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 36688041
      }
    },
    "viz": {
      "name": "viz",
      "passed": 2,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 21443375
      }
    },
    "config": {
      "name": "config",
      "passed": 2,
      "failed": 0,
      "skipped": 0,
      "duration": {
        "secs": 0,
        "nanos": 18638334
      }
    },
    "dev": {
      "name": "dev",
      "passed": 11,
      "failed": 0,
      "skipped": 13,
      "duration": {
        "secs": 0,
        "nanos": 124392042
      }
    }
  },
  "test_results": [
    {
      "name": "repl_basic_help",
      "category": "repl",
      "command": "causality repl --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 36654333
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_debug_help",
      "category": "repl",
      "command": "causality repl --debug --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16592500
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_show_state_help",
      "category": "repl",
      "command": "causality repl --show-state --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 29114959
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_max_steps_help",
      "category": "repl",
      "command": "causality repl --max-steps 100 --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12848084
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_load_tutorial_basic",
      "category": "repl",
      "command": "causality repl --load-tutorial basic --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12970625
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_load_tutorial_effects",
      "category": "repl",
      "command": "causality repl --load-tutorial effects --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13803834
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_load_tutorial_zk",
      "category": "repl",
      "command": "causality repl --load-tutorial zk --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 26900125
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_load_tutorial_defi",
      "category": "repl",
      "command": "causality repl --load-tutorial defi --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 25458000
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_auto_save_help",
      "category": "repl",
      "command": "causality repl --auto-save --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 20697625
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_alias",
      "category": "repl",
      "command": "causality r --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 18958500
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_invalid_tutorial",
      "category": "repl",
      "command": "causality repl --load-tutorial nonexistent --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 17068917
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "repl_combined_options",
      "category": "repl",
      "command": "causality repl --debug --show-state --max-steps 50 --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16220750
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_basic",
      "category": "help",
      "command": "causality help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15833208
      },
      "stdout": "The Causality CLI provides a comprehensive suite of tools for building privacy-preserving, cross-chain applications.\n\nUsage: causality [OPTIONS] <COMMAND>\n\nCommands:\n  repl     🎯 Interactive development environment and tutorials\n  project  🏗️ Project management and scaffolding\n  dev      ⚡ Development workflow commands\n  zk       🔐 Zero-knowledge proof operations\n  deploy   🌐 Cross-chain deployment and transactions\n  analyze  📊 Analysis and diagnostics\n  test     🧪 Testing and validation\n  inspect  🔍 System inspection and debugging\n  viz      📈 Visualization and reporting\n  config   ⚙️ Configuration and system management\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\nFor more information, visit: https://docs.causality.xyz\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_short_flag",
      "category": "help",
      "command": "causality -h",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 26109875
      },
      "stdout": "🚀 Gateway to the Causality Framework\n\nUsage: causality [OPTIONS] <COMMAND>\n\nCommands:\n  repl     🎯 Interactive development environment and tutorials\n  project  🏗️ Project management and scaffolding\n  dev      ⚡ Development workflow commands\n  zk       🔐 Zero-knowledge proof operations\n  deploy   🌐 Cross-chain deployment and transactions\n  analyze  📊 Analysis and diagnostics\n  test     🧪 Testing and validation\n  inspect  🔍 System inspection and debugging\n  viz      📈 Visualization and reporting\n  config   ⚙️ Configuration and system management\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose          Enable detailed output for debugging\n  -q, --quiet            Minimize output to essentials only\n      --format <FORMAT>  Output format for structured data [possible values: pretty, json, yaml, plain]\n  -h, --help             Print help (see more with '--help')\n  -V, --version          Print version\n\nFor more information, visit: https://docs.causality.xyz\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_long_flag",
      "category": "help",
      "command": "causality --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 42563167
      },
      "stdout": "The Causality CLI provides a comprehensive suite of tools for building privacy-preserving, cross-chain applications.\n\nUsage: causality [OPTIONS] <COMMAND>\n\nCommands:\n  repl     🎯 Interactive development environment and tutorials\n  project  🏗️ Project management and scaffolding\n  dev      ⚡ Development workflow commands\n  zk       🔐 Zero-knowledge proof operations\n  deploy   🌐 Cross-chain deployment and transactions\n  analyze  📊 Analysis and diagnostics\n  test     🧪 Testing and validation\n  inspect  🔍 System inspection and debugging\n  viz      📈 Visualization and reporting\n  config   ⚙️ Configuration and system management\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\nFor more information, visit: https://docs.causality.xyz\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_tutorial",
      "category": "help",
      "command": "causality help tutorial",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_guides",
      "category": "help",
      "command": "causality help guides",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_reference",
      "category": "help",
      "command": "causality help reference",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_examples",
      "category": "help",
      "command": "causality help examples",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_api",
      "category": "help",
      "command": "causality help api",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_troubleshooting",
      "category": "help",
      "command": "causality help troubleshooting",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Help topics not implemented yet",
      "metadata": {}
    },
    {
      "name": "help_repl_command",
      "category": "help",
      "command": "causality repl --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 23057875
      },
      "stdout": "🎯 Interactive development environment and tutorials\n\nUsage: causality repl [OPTIONS]\n\nOptions:\n  -d, --debug\n          Show detailed execution information\n\n      --verbose\n          Enable detailed output for debugging\n\n  -m, --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -s, --show-state\n          Display machine state after operations\n\n  -l, --load-tutorial <LOAD_TUTORIAL>\n          Load tutorial: basic, effects, zk, defi\n\n      --auto-save\n          Automatically save REPL session\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_project_command",
      "category": "help",
      "command": "causality project --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14966000
      },
      "stdout": "🏗️ Project management and scaffolding\n\nUsage: causality project [OPTIONS] <COMMAND>\n\nCommands:\n  new     Create a new Causality project\n  init    Initialize current directory as project\n  build   Build the current project\n  clean   Clean build artifacts\n  status  Show project status and health\n  add     Add dependencies to project\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_dev_command",
      "category": "help",
      "command": "causality dev --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 20183416
      },
      "stdout": "⚡ Development workflow commands\n\nUsage: causality dev [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compile source code to various formats\n  run      Execute compiled programs\n  serve    Start development server with hot reload\n  fmt      Format source code\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_zk_command",
      "category": "help",
      "command": "causality zk --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19099083
      },
      "stdout": "🔐 Zero-knowledge proof operations\n\nUsage: causality zk [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compile code to ZK circuit\n  prove    Generate ZK proof\n  verify   Verify ZK proof\n  setup    Setup trusted setup ceremony\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_deploy_command",
      "category": "help",
      "command": "causality deploy --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 31904708
      },
      "stdout": "🌐 Cross-chain deployment and transactions\n\nUsage: causality deploy [OPTIONS] <COMMAND>\n\nCommands:\n  simulate  Simulate deployment and execution\n  submit    Submit transactions to target chains\n  report    Generate deployment report\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_analyze_command",
      "category": "help",
      "command": "causality analyze --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 26465875
      },
      "stdout": "📊 Analysis and diagnostics\n\nUsage: causality analyze [OPTIONS] <COMMAND>\n\nCommands:\n  code       Perform static code analysis\n  resources  Analyze resource usage and lifecycle\n  effects    Analyze effect dependencies and composition\n  security   Security analysis\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_test_command",
      "category": "help",
      "command": "causality test --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12599750
      },
      "stdout": "🧪 Testing and validation\n\nUsage: causality test [OPTIONS] <COMMAND>\n\nCommands:\n  unit         Run unit tests\n  effects      Test algebraic effects\n  integration  Integration tests\n  e2e          End-to-end tests\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_inspect_command",
      "category": "help",
      "command": "causality inspect --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 17301792
      },
      "stdout": "🔍 System inspection and debugging\n\nUsage: causality inspect [OPTIONS] <COMMAND>\n\nCommands:\n  system     System health and diagnostics\n  artifacts  Inspect compiled artifacts\n  runtime    Inspect runtime state\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_viz_command",
      "category": "help",
      "command": "causality viz --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13437333
      },
      "stdout": "📈 Visualization and reporting\n\nUsage: causality viz [OPTIONS] <COMMAND>\n\nCommands:\n  effects       Visualize effect execution flows\n  resources     Visualize resource dependencies\n  architecture  System architecture overview\n  help          Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_config_command",
      "category": "help",
      "command": "causality config --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15509667
      },
      "stdout": "⚙️ Configuration and system management\n\nUsage: causality config [OPTIONS] <COMMAND>\n\nCommands:\n  show   Show current configuration\n  set    Set configuration value\n  unset  Remove configuration key\n  reset  Reset configuration to defaults\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_project_new",
      "category": "help",
      "command": "causality project new --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14317625
      },
      "stdout": "Create a new Causality project\n\nUsage: causality project new [OPTIONS] <NAME>\n\nArguments:\n  <NAME>\n          Project name\n\nOptions:\n  -t, --template <TEMPLATE>\n          Project template\n          \n          [default: basic]\n\n          Possible values:\n          - basic:    Basic project structure\n          - defi:     Cross-chain DeFi application\n          - privacy:  Privacy-focused application\n          - zk:       zkSNARK circuit development\n          - library:  Library/package development\n          - advanced: Advanced multi-chain setup\n\n      --verbose\n          Enable detailed output for debugging\n\n      --git\n          Initialize git repository\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -d, --description <DESCRIPTION>\n          Brief project description\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_project_build",
      "category": "help",
      "command": "causality project build --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 31896666
      },
      "stdout": "Build the current project\n\nUsage: causality project build [OPTIONS]\n\nOptions:\n  -r, --release\n          Build with optimizations\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -t, --target <TARGET>\n          Specify build target\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --timings\n          Display detailed build timing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_project_status",
      "category": "help",
      "command": "causality project status --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9615959
      },
      "stdout": "Show project status and health\n\nUsage: causality project status [OPTIONS]\n\nOptions:\n  -d, --deps\n          Include dependency status\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_dev_compile",
      "category": "help",
      "command": "causality dev compile --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15316750
      },
      "stdout": "Compile source code to various formats\n\nUsage: causality dev compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Source file to compile\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output file path\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -f, --format <FORMAT>\n          Output format\n          \n          [default: intermediate]\n\n          Possible values:\n          - intermediate: Intermediate representation\n          - bytecode:     Platform bytecode\n          - native:       Native executable\n          - wasm:         WebAssembly\n          - js:           JavaScript\n\n      --optimize\n          Apply optimization passes\n\n      --show-stages\n          Display compilation pipeline stages\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_dev_run",
      "category": "help",
      "command": "causality dev run --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14815125
      },
      "stdout": "Execute compiled programs\n\nUsage: causality dev run [OPTIONS]\n\nOptions:\n  -f, --file <FILE>\n          File to execute\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -s, --source <SOURCE>\n          Execute source code directly\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -t, --trace\n          Display execution trace\n\n      --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_dev_serve",
      "category": "help",
      "command": "causality dev serve --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 18146458
      },
      "stdout": "Start development server with hot reload\n\nUsage: causality dev serve [OPTIONS]\n\nOptions:\n  -p, --port <PORT>\n          Port to serve on\n          \n          [default: 3000]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --watch\n          Watch files for changes\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --open\n          Open browser on startup\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_zk_compile",
      "category": "help",
      "command": "causality zk compile --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16424333
      },
      "stdout": "Compile code to ZK circuit\n\nUsage: causality zk compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Input intermediate representation\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output circuit file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -p, --privacy-level <PRIVACY_LEVEL>\n          Privacy level\n          \n          [default: medium]\n          [possible values: low, medium, high, maximum]\n\n  -s, --proof-system <PROOF_SYSTEM>\n          Proof system\n          \n          [default: groth16]\n          [possible values: groth16, plonk, stark, marlin]\n\n      --stats\n          Display circuit size and complexity\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_zk_prove",
      "category": "help",
      "command": "causality zk prove --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14694458
      },
      "stdout": "Generate ZK proof\n\nUsage: causality zk prove [OPTIONS] --circuit <CIRCUIT> --witness <WITNESS> --output <OUTPUT>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --witness <WITNESS>\n          Witness data\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -o, --output <OUTPUT>\n          Output proof file\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_zk_verify",
      "category": "help",
      "command": "causality zk verify --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15043584
      },
      "stdout": "Verify ZK proof\n\nUsage: causality zk verify [OPTIONS] --circuit <CIRCUIT> --proof <PROOF>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --proof <PROOF>\n          Proof file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -i, --public-inputs <PUBLIC_INPUTS>\n          Public inputs\n\n      --mock\n          Use mock runtime for testing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_deploy_simulate",
      "category": "help",
      "command": "causality deploy simulate --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16934875
      },
      "stdout": "Simulate deployment and execution\n\nUsage: causality deploy simulate [OPTIONS] --input <INPUT> --chains <CHAINS>\n\nOptions:\n  -i, --input <INPUT>\n          Input file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -c, --chains <CHAINS>\n          Comma-separated list of chains\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -g, --gas-price <GAS_PRICE>\n          Gas price for cost estimation\n\n      --cost-analysis\n          Perform detailed cost analysis\n\n  -s, --scenarios <SCENARIOS>\n          Run specific scenarios\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_deploy_submit",
      "category": "help",
      "command": "causality deploy submit --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 21116084
      },
      "stdout": "Submit transactions to target chains\n\nUsage: causality deploy submit [OPTIONS] --circuit <CIRCUIT> --proof <PROOF> --chains <CHAINS>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --proof <PROOF>\n          Proof file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --chains <CHAINS>\n          Target chains\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --dry-run\n          Simulate without actual submission\n\n      --max-gas-price <MAX_GAS_PRICE>\n          Maximum acceptable gas price\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_analyze_code",
      "category": "help",
      "command": "causality analyze code --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13568000
      },
      "stdout": "Perform static code analysis\n\nUsage: causality analyze code [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...\n          Files to analyze\n\nOptions:\n  -d, --depth <DEPTH>\n          Analysis depth\n          \n          [default: standard]\n          [possible values: surface, standard, deep, comprehensive]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output report file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_analyze_resources",
      "category": "help",
      "command": "causality analyze resources --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10457166
      },
      "stdout": "Analyze resource usage and lifecycle\n\nUsage: causality analyze resources [OPTIONS] --file <FILE>\n\nOptions:\n  -f, --file <FILE>\n          Source file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -d, --detailed\n          Show detailed lifetime analysis\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --check-leaks\n          Detect potential resource leaks\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_test_unit",
      "category": "help",
      "command": "causality test unit --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 20807208
      },
      "stdout": "Run unit tests\n\nUsage: causality test unit [OPTIONS]\n\nOptions:\n  -f, --filter <FILTER>\n          Test pattern filter\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --parallel\n          Run tests in parallel\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -c, --coverage\n          Show test coverage\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_test_e2e",
      "category": "help",
      "command": "causality test e2e --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16723000
      },
      "stdout": "End-to-end tests\n\nUsage: causality test e2e [OPTIONS]\n\nOptions:\n  -s, --suite <SUITE>\n          Test suite to run\n\n      --verbose\n          Enable detailed output for debugging\n\n  -c, --chains <CHAINS>\n          Target chains for testing\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --testnet\n          Use testnet instead of local\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "help_invalid_topic",
      "category": "help",
      "command": "causality help nonexistent",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10872875
      },
      "stdout": "",
      "stderr": "error: unrecognized subcommand 'nonexistent'\n\nUsage: causality [OPTIONS] <COMMAND>\n\nFor more information, try '--help'.\n",
      "exit_code": 2,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_help",
      "category": "project",
      "command": "causality project --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15507042
      },
      "stdout": "🏗️ Project management and scaffolding\n\nUsage: causality project [OPTIONS] <COMMAND>\n\nCommands:\n  new     Create a new Causality project\n  init    Initialize current directory as project\n  build   Build the current project\n  clean   Clean build artifacts\n  status  Show project status and health\n  add     Add dependencies to project\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_alias",
      "category": "project",
      "command": "causality p --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 11085459
      },
      "stdout": "🏗️ Project management and scaffolding\n\nUsage: causality project [OPTIONS] <COMMAND>\n\nCommands:\n  new     Create a new Causality project\n  init    Initialize current directory as project\n  build   Build the current project\n  clean   Clean build artifacts\n  status  Show project status and health\n  add     Add dependencies to project\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_help",
      "category": "project",
      "command": "causality project new --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16615625
      },
      "stdout": "Create a new Causality project\n\nUsage: causality project new [OPTIONS] <NAME>\n\nArguments:\n  <NAME>\n          Project name\n\nOptions:\n  -t, --template <TEMPLATE>\n          Project template\n          \n          [default: basic]\n\n          Possible values:\n          - basic:    Basic project structure\n          - defi:     Cross-chain DeFi application\n          - privacy:  Privacy-focused application\n          - zk:       zkSNARK circuit development\n          - library:  Library/package development\n          - advanced: Advanced multi-chain setup\n\n      --verbose\n          Enable detailed output for debugging\n\n      --git\n          Initialize git repository\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -d, --description <DESCRIPTION>\n          Brief project description\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_basic",
      "category": "project",
      "command": "causality project new test-basic-project --template basic",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 37090834
      },
      "stdout": "🏗️ Creating new project 'test-basic-project'\n   Template: Basic\n✅ Project 'test-basic-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_defi",
      "category": "project",
      "command": "causality project new test-defi-project --template defi",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 24931708
      },
      "stdout": "🏗️ Creating new project 'test-defi-project'\n   Template: Defi\n✅ Project 'test-defi-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_privacy",
      "category": "project",
      "command": "causality project new test-privacy-project --template privacy",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 29742834
      },
      "stdout": "🏗️ Creating new project 'test-privacy-project'\n   Template: Privacy\n✅ Project 'test-privacy-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_zk",
      "category": "project",
      "command": "causality project new test-zk-project --template zk",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 31567416
      },
      "stdout": "🏗️ Creating new project 'test-zk-project'\n   Template: Zk\n✅ Project 'test-zk-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_library",
      "category": "project",
      "command": "causality project new test-library-project --template library",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 29598292
      },
      "stdout": "🏗️ Creating new project 'test-library-project'\n   Template: Library\n✅ Project 'test-library-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_advanced",
      "category": "project",
      "command": "causality project new test-advanced-project --template advanced",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 20779708
      },
      "stdout": "🏗️ Creating new project 'test-advanced-project'\n   Template: Advanced\n✅ Project 'test-advanced-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_with_git",
      "category": "project",
      "command": "causality project new git-test-project --template basic --git",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 21824792
      },
      "stdout": "🏗️ Creating new project 'git-test-project'\n   Template: Basic\n   Git repository: enabled\n✅ Project 'git-test-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_new_with_description",
      "category": "project",
      "command": "causality project new desc-test-project --template basic --description A test project with description",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 27918583
      },
      "stdout": "🏗️ Creating new project 'desc-test-project'\n   Template: Basic\n   Description: A test project with description\n✅ Project 'desc-test-project' created successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_init_help",
      "category": "project",
      "command": "causality project init --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19846417
      },
      "stdout": "Initialize current directory as project\n\nUsage: causality project init [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n          Project name (defaults to directory name)\n\nOptions:\n  -f, --force\n          Force initialization in non-empty directory\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_init_empty",
      "category": "project",
      "command": "causality project init",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 30841875
      },
      "stdout": "🏗️ Initializing project 'causality-project'\n✅ Project initialized\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_init_force",
      "category": "project",
      "command": "causality project init --force",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19847334
      },
      "stdout": "🏗️ Initializing project 'causality-project'\n   Force mode enabled\n✅ Project initialized\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_build_help",
      "category": "project",
      "command": "causality project build --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14527208
      },
      "stdout": "Build the current project\n\nUsage: causality project build [OPTIONS]\n\nOptions:\n  -r, --release\n          Build with optimizations\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -t, --target <TARGET>\n          Specify build target\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --timings\n          Display detailed build timing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_build_alias",
      "category": "project",
      "command": "causality project b --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19472375
      },
      "stdout": "Build the current project\n\nUsage: causality project build [OPTIONS]\n\nOptions:\n  -r, --release\n          Build with optimizations\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -t, --target <TARGET>\n          Specify build target\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --timings\n          Display detailed build timing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_build_release",
      "category": "project",
      "command": "causality project build --release --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 11525458
      },
      "stdout": "Build the current project\n\nUsage: causality project build [OPTIONS]\n\nOptions:\n  -r, --release\n          Build with optimizations\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -t, --target <TARGET>\n          Specify build target\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --timings\n          Display detailed build timing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_build_timings",
      "category": "project",
      "command": "causality project build --timings --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13847500
      },
      "stdout": "Build the current project\n\nUsage: causality project build [OPTIONS]\n\nOptions:\n  -r, --release\n          Build with optimizations\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -t, --target <TARGET>\n          Specify build target\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --timings\n          Display detailed build timing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_clean_help",
      "category": "project",
      "command": "causality project clean --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 11670542
      },
      "stdout": "Clean build artifacts\n\nUsage: causality project clean [OPTIONS]\n\nOptions:\n      --deep\n          Deep clean including cached dependencies\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_clean_deep",
      "category": "project",
      "command": "causality project clean --deep --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10489333
      },
      "stdout": "Clean build artifacts\n\nUsage: causality project clean [OPTIONS]\n\nOptions:\n      --deep\n          Deep clean including cached dependencies\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_status_help",
      "category": "project",
      "command": "causality project status --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13039292
      },
      "stdout": "Show project status and health\n\nUsage: causality project status [OPTIONS]\n\nOptions:\n  -d, --deps\n          Include dependency status\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_status_alias",
      "category": "project",
      "command": "causality project s --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9420750
      },
      "stdout": "Show project status and health\n\nUsage: causality project status [OPTIONS]\n\nOptions:\n  -d, --deps\n          Include dependency status\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_status_deps",
      "category": "project",
      "command": "causality project status --deps --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12869750
      },
      "stdout": "Show project status and health\n\nUsage: causality project status [OPTIONS]\n\nOptions:\n  -d, --deps\n          Include dependency status\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_add_help",
      "category": "project",
      "command": "causality project add --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10944208
      },
      "stdout": "Add dependencies to project\n\nUsage: causality project add [OPTIONS] <PACKAGE>\n\nArguments:\n  <PACKAGE>\n          Package name\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n      --version <VERSION>\n          Specify version requirement\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "project_add_with_version",
      "category": "project",
      "command": "causality project add test-package --version 1.0.0 --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10704792
      },
      "stdout": "Add dependencies to project\n\nUsage: causality project add [OPTIONS] <PACKAGE>\n\nArguments:\n  <PACKAGE>\n          Package name\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n      --version <VERSION>\n          Specify version requirement\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_help",
      "category": "dev",
      "command": "causality dev --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13620708
      },
      "stdout": "⚡ Development workflow commands\n\nUsage: causality dev [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compile source code to various formats\n  run      Execute compiled programs\n  serve    Start development server with hot reload\n  fmt      Format source code\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_alias",
      "category": "dev",
      "command": "causality d --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9257458
      },
      "stdout": "⚡ Development workflow commands\n\nUsage: causality dev [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compile source code to various formats\n  run      Execute compiled programs\n  serve    Start development server with hot reload\n  fmt      Format source code\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_compile_help",
      "category": "dev",
      "command": "causality dev compile --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 8605958
      },
      "stdout": "Compile source code to various formats\n\nUsage: causality dev compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Source file to compile\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output file path\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -f, --format <FORMAT>\n          Output format\n          \n          [default: intermediate]\n\n          Possible values:\n          - intermediate: Intermediate representation\n          - bytecode:     Platform bytecode\n          - native:       Native executable\n          - wasm:         WebAssembly\n          - js:           JavaScript\n\n      --optimize\n          Apply optimization passes\n\n      --show-stages\n          Display compilation pipeline stages\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_compile_alias",
      "category": "dev",
      "command": "causality dev c --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10770958
      },
      "stdout": "Compile source code to various formats\n\nUsage: causality dev compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Source file to compile\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output file path\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -f, --format <FORMAT>\n          Output format\n          \n          [default: intermediate]\n\n          Possible values:\n          - intermediate: Intermediate representation\n          - bytecode:     Platform bytecode\n          - native:       Native executable\n          - wasm:         WebAssembly\n          - js:           JavaScript\n\n      --optimize\n          Apply optimization passes\n\n      --show-stages\n          Display compilation pipeline stages\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_compile_intermediate",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test.intermediate --format intermediate",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_bytecode",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test.bytecode --format bytecode",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_native",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test.native --format native",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_wasm",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test.wasm --format wasm",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_js",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test.js --format js",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_optimize",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test_opt.ir --optimize",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_compile_show_stages",
      "category": "dev",
      "command": "causality dev compile -i test.lisp -o test_stages.ir --show-stages",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Compilation may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_run_help",
      "category": "dev",
      "command": "causality dev run --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10710208
      },
      "stdout": "Execute compiled programs\n\nUsage: causality dev run [OPTIONS]\n\nOptions:\n  -f, --file <FILE>\n          File to execute\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -s, --source <SOURCE>\n          Execute source code directly\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -t, --trace\n          Display execution trace\n\n      --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_run_alias",
      "category": "dev",
      "command": "causality dev r --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12805458
      },
      "stdout": "Execute compiled programs\n\nUsage: causality dev run [OPTIONS]\n\nOptions:\n  -f, --file <FILE>\n          File to execute\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -s, --source <SOURCE>\n          Execute source code directly\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -t, --trace\n          Display execution trace\n\n      --max-steps <MAX_STEPS>\n          Set execution step limit\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_run_file",
      "category": "dev",
      "command": "causality dev run -f test.lisp",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Execution may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_run_source",
      "category": "dev",
      "command": "causality dev run -s (+ 1 2)",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Execution may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_run_trace",
      "category": "dev",
      "command": "causality dev run -f test.lisp --trace",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Execution may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_run_max_steps",
      "category": "dev",
      "command": "causality dev run -f test.lisp --max-steps 1000",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Execution may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_serve_help",
      "category": "dev",
      "command": "causality dev serve --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10546500
      },
      "stdout": "Start development server with hot reload\n\nUsage: causality dev serve [OPTIONS]\n\nOptions:\n  -p, --port <PORT>\n          Port to serve on\n          \n          [default: 3000]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --watch\n          Watch files for changes\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --open\n          Open browser on startup\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_serve_port",
      "category": "dev",
      "command": "causality dev serve --port 8080 --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10224042
      },
      "stdout": "Start development server with hot reload\n\nUsage: causality dev serve [OPTIONS]\n\nOptions:\n  -p, --port <PORT>\n          Port to serve on\n          \n          [default: 3000]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --watch\n          Watch files for changes\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --open\n          Open browser on startup\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_serve_watch",
      "category": "dev",
      "command": "causality dev serve --watch --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 8922333
      },
      "stdout": "Start development server with hot reload\n\nUsage: causality dev serve [OPTIONS]\n\nOptions:\n  -p, --port <PORT>\n          Port to serve on\n          \n          [default: 3000]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --watch\n          Watch files for changes\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --open\n          Open browser on startup\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_serve_open",
      "category": "dev",
      "command": "causality dev serve --open --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12827916
      },
      "stdout": "Start development server with hot reload\n\nUsage: causality dev serve [OPTIONS]\n\nOptions:\n  -p, --port <PORT>\n          Port to serve on\n          \n          [default: 3000]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --watch\n          Watch files for changes\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --open\n          Open browser on startup\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_fmt_help",
      "category": "dev",
      "command": "causality dev fmt --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 15478500
      },
      "stdout": "Format source code\n\nUsage: causality dev fmt [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...\n          Files to format (defaults to all)\n\nOptions:\n      --check\n          Check formatting only\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "dev_fmt_check",
      "category": "dev",
      "command": "causality dev fmt --check",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Formatting may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "dev_fmt_files",
      "category": "dev",
      "command": "causality dev fmt test.lisp",
      "passed": false,
      "skipped": true,
      "duration": {
        "secs": 0,
        "nanos": 0
      },
      "stdout": null,
      "stderr": null,
      "exit_code": null,
      "error": "Formatting may not be fully implemented",
      "metadata": {}
    },
    {
      "name": "zk_help",
      "category": "zk",
      "command": "causality zk --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19504750
      },
      "stdout": "🔐 Zero-knowledge proof operations\n\nUsage: causality zk [OPTIONS] <COMMAND>\n\nCommands:\n  compile  Compile code to ZK circuit\n  prove    Generate ZK proof\n  verify   Verify ZK proof\n  setup    Setup trusted setup ceremony\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_help",
      "category": "zk",
      "command": "causality zk compile --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 23402875
      },
      "stdout": "Compile code to ZK circuit\n\nUsage: causality zk compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Input intermediate representation\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output circuit file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -p, --privacy-level <PRIVACY_LEVEL>\n          Privacy level\n          \n          [default: medium]\n          [possible values: low, medium, high, maximum]\n\n  -s, --proof-system <PROOF_SYSTEM>\n          Proof system\n          \n          [default: groth16]\n          [possible values: groth16, plonk, stark, marlin]\n\n      --stats\n          Display circuit size and complexity\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_alias",
      "category": "zk",
      "command": "causality zk c --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13989459
      },
      "stdout": "Compile code to ZK circuit\n\nUsage: causality zk compile [OPTIONS] --input <INPUT> --output <OUTPUT>\n\nOptions:\n  -i, --input <INPUT>\n          Input intermediate representation\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output circuit file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -p, --privacy-level <PRIVACY_LEVEL>\n          Privacy level\n          \n          [default: medium]\n          [possible values: low, medium, high, maximum]\n\n  -s, --proof-system <PROOF_SYSTEM>\n          Proof system\n          \n          [default: groth16]\n          [possible values: groth16, plonk, stark, marlin]\n\n      --stats\n          Display circuit size and complexity\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_privacy_low",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_low.zk --privacy-level low",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 21639292
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_low.zk\n   Privacy level: low\n   Proof system: groth16\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_privacy_medium",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_medium.zk --privacy-level medium",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13919459
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_medium.zk\n   Privacy level: medium\n   Proof system: groth16\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_privacy_high",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_high.zk --privacy-level high",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19632417
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_high.zk\n   Privacy level: high\n   Proof system: groth16\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_privacy_maximum",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_maximum.zk --privacy-level maximum",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19914292
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_maximum.zk\n   Privacy level: maximum\n   Proof system: groth16\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_proof_system_groth16",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_groth16.zk --proof-system groth16",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 18677916
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_groth16.zk\n   Privacy level: medium\n   Proof system: groth16\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_proof_system_plonk",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_plonk.zk --proof-system plonk",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12080541
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_plonk.zk\n   Privacy level: medium\n   Proof system: plonk\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_proof_system_stark",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_stark.zk --proof-system stark",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 35292958
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_stark.zk\n   Privacy level: medium\n   Proof system: stark\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_proof_system_marlin",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_marlin.zk --proof-system marlin",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16479334
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_marlin.zk\n   Privacy level: medium\n   Proof system: marlin\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_compile_stats",
      "category": "zk",
      "command": "causality zk compile --input test.ir --output test_stats.zk --stats",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 22000666
      },
      "stdout": "🔐 Compiling to ZK circuit...\n   Input: test.ir\n   Output: test_stats.zk\n   Privacy level: medium\n   Proof system: groth16\n   Circuit stats: 1000 gates, 500 constraints\n✅ ZK circuit compiled successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_prove_help",
      "category": "zk",
      "command": "causality zk prove --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 11951541
      },
      "stdout": "Generate ZK proof\n\nUsage: causality zk prove [OPTIONS] --circuit <CIRCUIT> --witness <WITNESS> --output <OUTPUT>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -w, --witness <WITNESS>\n          Witness data\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -o, --output <OUTPUT>\n          Output proof file\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_prove_basic",
      "category": "zk",
      "command": "causality zk prove --circuit test.zk --witness witness.json --output proof.zk",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 19637000
      },
      "stdout": "🔐 Generating ZK proof...\n  Circuit: test.zk\n  Witness: witness.json\n  Output: proof.zk\n✅ ZK proof generated successfully\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_verify_help",
      "category": "zk",
      "command": "causality zk verify --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 11395125
      },
      "stdout": "Verify ZK proof\n\nUsage: causality zk verify [OPTIONS] --circuit <CIRCUIT> --proof <PROOF>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --proof <PROOF>\n          Proof file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -i, --public-inputs <PUBLIC_INPUTS>\n          Public inputs\n\n      --mock\n          Use mock runtime for testing\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_verify_basic",
      "category": "zk",
      "command": "causality zk verify --circuit test.zk --proof proof.zk",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 23146042
      },
      "stdout": "🔍 Verifying ZK proof...\n   Circuit: test.zk\n   Proof: proof.zk\n✅ ZK proof verification successful\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_verify_with_inputs",
      "category": "zk",
      "command": "causality zk verify --circuit test.zk --proof proof.zk --public-inputs public_inputs.json",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 23715416
      },
      "stdout": "🔍 Verifying ZK proof...\n   Circuit: test.zk\n   Proof: proof.zk\n   Public inputs provided\n✅ ZK proof verification successful\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_verify_mock",
      "category": "zk",
      "command": "causality zk verify --circuit test.zk --proof proof.zk --mock",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14452750
      },
      "stdout": "🔍 Verifying ZK proof...\n   Circuit: test.zk\n   Proof: proof.zk\n   Using mock runtime\n✅ ZK proof verification successful\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_setup_help",
      "category": "zk",
      "command": "causality zk setup --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9343709
      },
      "stdout": "Setup trusted setup ceremony\n\nUsage: causality zk setup [OPTIONS] --circuit <CIRCUIT> --output-dir <OUTPUT_DIR>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output-dir <OUTPUT_DIR>\n          Output directory for setup files\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -p, --participants <PARTICIPANTS>\n          Number of participants\n          \n          [default: 1]\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_setup_basic",
      "category": "zk",
      "command": "causality zk setup --circuit test.zk --output-dir setup_output",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 25067709
      },
      "stdout": "🔧 Setting up trusted setup ceremony...\n  Circuit: test.zk\n  Output directory: setup_output\n  Participants: 1\n✅ Trusted setup completed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "zk_setup_multi_participants",
      "category": "zk",
      "command": "causality zk setup --circuit test.zk --output-dir setup_multi --participants 3",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 20332791
      },
      "stdout": "🔧 Setting up trusted setup ceremony...\n  Circuit: test.zk\n  Output directory: setup_multi\n  Participants: 3\n✅ Trusted setup completed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "deploy_help",
      "category": "deploy",
      "command": "causality deploy --help --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 14798459
      },
      "stdout": "🌐 Cross-chain deployment and transactions\n\nUsage: causality deploy [OPTIONS] <COMMAND>\n\nCommands:\n  simulate  Simulate deployment and execution\n  submit    Submit transactions to target chains\n  report    Generate deployment report\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "deploy_simulate_help",
      "category": "deploy",
      "command": "causality deploy simulate --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 8608834
      },
      "stdout": "Simulate deployment and execution\n\nUsage: causality deploy simulate [OPTIONS] --input <INPUT> --chains <CHAINS>\n\nOptions:\n  -i, --input <INPUT>\n          Input file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -c, --chains <CHAINS>\n          Comma-separated list of chains\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -g, --gas-price <GAS_PRICE>\n          Gas price for cost estimation\n\n      --cost-analysis\n          Perform detailed cost analysis\n\n  -s, --scenarios <SCENARIOS>\n          Run specific scenarios\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "deploy_submit_help",
      "category": "deploy",
      "command": "causality deploy submit --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12689750
      },
      "stdout": "Submit transactions to target chains\n\nUsage: causality deploy submit [OPTIONS] --circuit <CIRCUIT> --proof <PROOF> --chains <CHAINS>\n\nOptions:\n  -c, --circuit <CIRCUIT>\n          Circuit file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --proof <PROOF>\n          Proof file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --chains <CHAINS>\n          Target chains\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --dry-run\n          Simulate without actual submission\n\n      --max-gas-price <MAX_GAS_PRICE>\n          Maximum acceptable gas price\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "deploy_report_help",
      "category": "deploy",
      "command": "causality deploy report --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10793959
      },
      "stdout": "Generate deployment report\n\nUsage: causality deploy report [OPTIONS] --scenario <SCENARIO> --output <OUTPUT>\n\nOptions:\n  -s, --scenario <SCENARIO>\n          Scenario identifier\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --include-proofs\n          Include ZK proof information\n\n      --include-gas\n          Include gas usage analysis\n\n      --include-privacy\n          Include privacy assessment\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "deploy_simulate_chains",
      "category": "deploy",
      "command": "causality deploy simulate --input test.ir --chains ethereum,polygon",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 17341000
      },
      "stdout": "Total gas cost: 450000 wei\nExecution time: 250 ms\nSuccess probability: 0.980\nBridge time estimate: 300 seconds\nVault APY estimate: 8.5%\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_help",
      "category": "analyze",
      "command": "causality analyze --help --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12947000
      },
      "stdout": "📊 Analysis and diagnostics\n\nUsage: causality analyze [OPTIONS] <COMMAND>\n\nCommands:\n  code       Perform static code analysis\n  resources  Analyze resource usage and lifecycle\n  effects    Analyze effect dependencies and composition\n  security   Security analysis\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_code_help",
      "category": "analyze",
      "command": "causality analyze code --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 7331791
      },
      "stdout": "Perform static code analysis\n\nUsage: causality analyze code [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...\n          Files to analyze\n\nOptions:\n  -d, --depth <DEPTH>\n          Analysis depth\n          \n          [default: standard]\n          [possible values: surface, standard, deep, comprehensive]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -o, --output <OUTPUT>\n          Output report file\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_resources_help",
      "category": "analyze",
      "command": "causality analyze resources --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9033750
      },
      "stdout": "Analyze resource usage and lifecycle\n\nUsage: causality analyze resources [OPTIONS] --file <FILE>\n\nOptions:\n  -f, --file <FILE>\n          Source file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -d, --detailed\n          Show detailed lifetime analysis\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --check-leaks\n          Detect potential resource leaks\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_effects_help",
      "category": "analyze",
      "command": "causality analyze effects --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 7976167
      },
      "stdout": "Analyze effect dependencies and composition\n\nUsage: causality analyze effects [OPTIONS] --file <FILE>\n\nOptions:\n  -f, --file <FILE>\n          Source file\n\n      --verbose\n          Enable detailed output for debugging\n\n  -d, --dependencies\n          Show dependency graph\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -c, --composability\n          Analyze composability\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_security_help",
      "category": "analyze",
      "command": "causality analyze security --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10469750
      },
      "stdout": "Security analysis\n\nUsage: causality analyze security [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...\n          Files to analyze\n\nOptions:\n  -l, --level <LEVEL>\n          Security level\n          \n          [default: standard]\n          [possible values: basic, standard, strict, paranoid]\n\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -r, --report <REPORT>\n          Generate security report\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_alias",
      "category": "analyze",
      "command": "causality a --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 8487958
      },
      "stdout": "📊 Analysis and diagnostics\n\nUsage: causality analyze [OPTIONS] <COMMAND>\n\nCommands:\n  code       Perform static code analysis\n  resources  Analyze resource usage and lifecycle\n  effects    Analyze effect dependencies and composition\n  security   Security analysis\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_code_basic",
      "category": "analyze",
      "command": "causality analyze code .",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10249167
      },
      "stdout": "🔍 Analyzing 1 files at Standard depth\n✅ Analysis complete\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_resources_basic",
      "category": "analyze",
      "command": "causality analyze resources -f test.lisp",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9967083
      },
      "stdout": "🔍 Analyzing resource usage in test.lisp\n✅ Analysis complete\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_effects_basic",
      "category": "analyze",
      "command": "causality analyze effects -f test.lisp",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 9521875
      },
      "stdout": "🔍 Analyzing effects in test.lisp\n✅ Analysis complete\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "analyze_security_basic",
      "category": "analyze",
      "command": "causality analyze security .",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 34327417
      },
      "stdout": "🔍 Security analysis at Standard level\n  Files: [\".\"]\n✅ Analysis complete\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_help",
      "category": "test",
      "command": "causality test --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13846875
      },
      "stdout": "🧪 Testing and validation\n\nUsage: causality test [OPTIONS] <COMMAND>\n\nCommands:\n  unit         Run unit tests\n  effects      Test algebraic effects\n  integration  Integration tests\n  e2e          End-to-end tests\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_alias",
      "category": "test",
      "command": "causality t --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16053000
      },
      "stdout": "🧪 Testing and validation\n\nUsage: causality test [OPTIONS] <COMMAND>\n\nCommands:\n  unit         Run unit tests\n  effects      Test algebraic effects\n  integration  Integration tests\n  e2e          End-to-end tests\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_unit_help",
      "category": "test",
      "command": "causality test unit --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10454958
      },
      "stdout": "Run unit tests\n\nUsage: causality test unit [OPTIONS]\n\nOptions:\n  -f, --filter <FILTER>\n          Test pattern filter\n\n      --verbose\n          Enable detailed output for debugging\n\n  -p, --parallel\n          Run tests in parallel\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -c, --coverage\n          Show test coverage\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_effects_help",
      "category": "test",
      "command": "causality test effects --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 22962959
      },
      "stdout": "Test algebraic effects\n\nUsage: causality test effects [OPTIONS]\n\nOptions:\n  -p, --pattern <PATTERN>\n          Effect pattern to test\n\n      --verbose\n          Enable detailed output for debugging\n\n      --property-based\n          Property-based testing\n\n  -q, --quiet\n          Minimize output to essentials only\n\n  -c, --cases <CASES>\n          Number of test cases\n          \n          [default: 100]\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_integration_help",
      "category": "test",
      "command": "causality test integration --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 21669250
      },
      "stdout": "Integration tests\n\nUsage: causality test integration [OPTIONS]\n\nOptions:\n  -e, --env <ENV>\n          Test environment\n          \n          [default: local]\n          [possible values: local, docker, testnet, staging]\n\n      --verbose\n          Enable detailed output for debugging\n\n      --network\n          Include network tests\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_e2e_help",
      "category": "test",
      "command": "causality test e2e --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 18220333
      },
      "stdout": "End-to-end tests\n\nUsage: causality test e2e [OPTIONS]\n\nOptions:\n  -s, --suite <SUITE>\n          Test suite to run\n\n      --verbose\n          Enable detailed output for debugging\n\n  -c, --chains <CHAINS>\n          Target chains for testing\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n      --testnet\n          Use testnet instead of local\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_integration_alias",
      "category": "test",
      "command": "causality test int --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 16569292
      },
      "stdout": "Integration tests\n\nUsage: causality test integration [OPTIONS]\n\nOptions:\n  -e, --env <ENV>\n          Test environment\n          \n          [default: local]\n          [possible values: local, docker, testnet, staging]\n\n      --verbose\n          Enable detailed output for debugging\n\n      --network\n          Include network tests\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_unit_basic",
      "category": "test",
      "command": "causality test unit",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 35987875
      },
      "stdout": "🧪 Running unit tests\n✅ All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_unit_coverage",
      "category": "test",
      "command": "causality test unit --coverage",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10536833
      },
      "stdout": "🧪 Running unit tests\n  Coverage enabled\n✅ All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_effects_property",
      "category": "test",
      "command": "causality test effects --property-based",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 24150541
      },
      "stdout": "🧪 Testing algebraic effects\n  Property-based testing with 100 cases\n✅ All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "test_e2e_chains",
      "category": "test",
      "command": "causality test e2e --chains ethereum,polygon",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10880292
      },
      "stdout": "🧪 Running end-to-end tests\n  Chains: ethereum,polygon\n✅ All tests passed\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "inspect_help",
      "category": "inspect",
      "command": "causality inspect --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 13600042
      },
      "stdout": "🔍 System inspection and debugging\n\nUsage: causality inspect [OPTIONS] <COMMAND>\n\nCommands:\n  system     System health and diagnostics\n  artifacts  Inspect compiled artifacts\n  runtime    Inspect runtime state\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "inspect_alias",
      "category": "inspect",
      "command": "causality i --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 23048000
      },
      "stdout": "🔍 System inspection and debugging\n\nUsage: causality inspect [OPTIONS] <COMMAND>\n\nCommands:\n  system     System health and diagnostics\n  artifacts  Inspect compiled artifacts\n  runtime    Inspect runtime state\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "viz_help",
      "category": "viz",
      "command": "causality viz --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 12584708
      },
      "stdout": "📈 Visualization and reporting\n\nUsage: causality viz [OPTIONS] <COMMAND>\n\nCommands:\n  effects       Visualize effect execution flows\n  resources     Visualize resource dependencies\n  architecture  System architecture overview\n  help          Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "viz_alias",
      "category": "viz",
      "command": "causality v --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 8825791
      },
      "stdout": "📈 Visualization and reporting\n\nUsage: causality viz [OPTIONS] <COMMAND>\n\nCommands:\n  effects       Visualize effect execution flows\n  resources     Visualize resource dependencies\n  architecture  System architecture overview\n  help          Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "config_help",
      "category": "config",
      "command": "causality config --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 10709333
      },
      "stdout": "⚙️ Configuration and system management\n\nUsage: causality config [OPTIONS] <COMMAND>\n\nCommands:\n  show   Show current configuration\n  set    Set configuration value\n  unset  Remove configuration key\n  reset  Reset configuration to defaults\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    },
    {
      "name": "config_alias",
      "category": "config",
      "command": "causality c --help",
      "passed": true,
      "skipped": false,
      "duration": {
        "secs": 0,
        "nanos": 7899083
      },
      "stdout": "⚙️ Configuration and system management\n\nUsage: causality config [OPTIONS] <COMMAND>\n\nCommands:\n  show   Show current configuration\n  set    Set configuration value\n  unset  Remove configuration key\n  reset  Reset configuration to defaults\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n      --verbose\n          Enable detailed output for debugging\n\n  -q, --quiet\n          Minimize output to essentials only\n\n      --format <FORMAT>\n          Output format for structured data\n\n          Possible values:\n          - pretty: Human-readable output with colors and formatting\n          - json:   JSON output for programmatic use\n          - yaml:   YAML output for configuration files\n          - plain:  Plain text output\n\n  -h, --help\n          Print help (see a summary with '-h')\n",
      "stderr": "",
      "exit_code": 0,
      "error": null,
      "metadata": {}
    }
  ],
  "summary": {
    "total_tests": 149,
    "passed": 130,
    "failed": 0,
    "skipped": 19,
    "success_rate": 87.24832214765101,
    "total_duration": {
      "secs": 2,
      "nanos": 502177000
    },
    "avg_test_time": {
      "secs": 0,
      "nanos": 16793134
    }
  }
}