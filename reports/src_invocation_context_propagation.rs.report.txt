Analyzing src/invocation/context/propagation.rs...
==============================================

Uuid::new_v4 occurrences:
125:        let invocation_id = Uuid::new_v4().to_string();
163:        let invocation_id = Uuid::new_v4().to_string();

Detailed context for each occurrence:
==============================================

Line 125:         let invocation_id = Uuid::new_v4().to_string();
---------------------------------------------
        trace_id: Option<TraceId>,
        parent_id: Option<String>,
        time_map: TimeMap,
    ) -> Result<Arc<RwLock<InvocationContext>>> {
        // Generate a new invocation ID
        let invocation_id = Uuid::new_v4().to_string();
        
        // Use provided trace ID or create a new one
        let trace_id = trace_id.unwrap_or_else(TraceId::new);
        
        // Create the context
---------------------------------------------

Line 163:         let invocation_id = Uuid::new_v4().to_string();
---------------------------------------------
        // Retrieve the parent context
        let parent_ctx = self.storage.get(parent_id)?
            .ok_or_else(|| Error::NotFound(format!("Parent context not found: {}", parent_id)))?;
        
        // Generate a new invocation ID
        let invocation_id = Uuid::new_v4().to_string();
        
        // Create the child context
        let child_context = {
            let parent_guard = parent_ctx.read().map_err(|_| 
                Error::InternalError("Failed to acquire read lock on parent context".to_string()))?;
---------------------------------------------

Potential structs to implement ContentAddressed:
==============================================
18:pub struct ContextStorage {
104:pub struct ContextPropagator {
