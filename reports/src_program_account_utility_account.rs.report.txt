Analyzing src/program_account/utility_account.rs...
==============================================

Uuid::new_v4 occurrences:
209:        let resource_id = ResourceId::from_str(&format!("data-{}", Uuid::new_v4()));
262:            id: format!("store-data-{}", Uuid::new_v4()),
317:            id: format!("delete-data-{}", Uuid::new_v4()),

Detailed context for each occurrence:
==============================================

Line 209:         let resource_id = ResourceId::from_str(&format!("data-{}", Uuid::new_v4()));
---------------------------------------------
        data: &[u8],
        metadata: Option<HashMap<String, String>>,
        trace_id: Option<&TraceId>,
    ) -> Result<ResourceId> {
        // Create a new resource ID
        let resource_id = ResourceId::from_str(&format!("data-{}", Uuid::new_v4()));
        
        // Get current timestamp
        let timestamp = std::time::SystemTime::now()
            .duration_since(std::time::UNIX_EPOCH)
            .unwrap_or_default()
---------------------------------------------

Line 262:             id: format!("store-data-{}", Uuid::new_v4()),
---------------------------------------------
        // Register the resource with the base account
        self.base.register_resource(resource)?;
        
        // Add a transaction record
        let record = TransactionRecord {
            id: format!("store-data-{}", Uuid::new_v4()),
            transaction_type: "data_storage".to_string(),
            timestamp,
            status: TransactionStatus::Confirmed,
            resources: vec![resource_id.clone()],
            effects: Vec::new(),
---------------------------------------------

Line 317:             id: format!("delete-data-{}", Uuid::new_v4()),
---------------------------------------------
        // 1. Remove the register for the data
        // 2. Clean up any references or indices
        
        // Add a transaction record
        let record = TransactionRecord {
            id: format!("delete-data-{}", Uuid::new_v4()),
            transaction_type: "data_deletion".to_string(),
            timestamp: std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)
                .unwrap_or_default()
                .as_secs(),
---------------------------------------------

Potential structs to implement ContentAddressed:
==============================================
22:pub struct UtilityAccount {
32:pub struct StoredData {
