Analyzing src/tel/resource/tests.rs...
==============================================

Uuid::new_v4 occurrences:
203:            operation_id: uuid::Uuid::new_v4().into(),
241:            operation_id: uuid::Uuid::new_v4().into(),
279:            operation_id: uuid::Uuid::new_v4().into(),
324:            operation_id: uuid::Uuid::new_v4().into(),
368:            operation_id: uuid::Uuid::new_v4().into(),

Detailed context for each occurrence:
==============================================

Line 203:             operation_id: uuid::Uuid::new_v4().into(),
---------------------------------------------
        let contents = RegisterContents::Text("Test resource".to_string());
        let register_id = RegisterId::new();
        
        // Create the operation
        let operation = ResourceOperation {
            operation_id: uuid::Uuid::new_v4().into(),
            operation_type: ResourceOperationType::Create,
            target: register_id,
            resource_ids: vec![],
            initiator: owner.clone(),
            domain: domain.clone(),
---------------------------------------------

Line 241:             operation_id: uuid::Uuid::new_v4().into(),
---------------------------------------------
        let register_id = create_test_resource(&manager, owner.clone(), domain.clone(), contents.clone()).unwrap();
        
        // Create the update operation
        let new_contents = RegisterContents::Text("Updated resource".to_string());
        let operation = ResourceOperation {
            operation_id: uuid::Uuid::new_v4().into(),
            operation_type: ResourceOperationType::Update,
            target: register_id,
            resource_ids: vec![],
            initiator: owner.clone(),
            domain: domain.clone(),
---------------------------------------------

Line 279:             operation_id: uuid::Uuid::new_v4().into(),
---------------------------------------------
        // Create the transfer operation
        let mut parameters = std::collections::HashMap::new();
        parameters.insert("recipient".to_string(), serde_json::Value::String(new_owner.to_string()));
        
        let operation = ResourceOperation {
            operation_id: uuid::Uuid::new_v4().into(),
            operation_type: ResourceOperationType::Transfer,
            target: register_id,
            resource_ids: vec![],
            initiator: owner.clone(),
            domain: domain.clone(),
---------------------------------------------

Line 324:             operation_id: uuid::Uuid::new_v4().into(),
---------------------------------------------
        // Create a mock proof and verification key
        let proof = vec![1, 2, 3, 4, 5];
        let verification_key = vec![6, 7, 8, 9, 10];
        
        let operation = ResourceOperation {
            operation_id: uuid::Uuid::new_v4().into(),
            operation_type: ResourceOperationType::Create,
            target: register_id,
            resource_ids: vec![],
            initiator: owner,
            domain,
---------------------------------------------

Line 368:             operation_id: uuid::Uuid::new_v4().into(),
---------------------------------------------
        // Create a mock proof and verification key
        let proof = vec![1, 2, 3, 4, 5];
        let verification_key = vec![6, 7, 8, 9, 10];
        
        let operation = ResourceOperation {
            operation_id: uuid::Uuid::new_v4().into(),
            operation_type: ResourceOperationType::Create,
            target: register_id,
            resource_ids: vec![],
            initiator: owner,
            domain,
---------------------------------------------

Potential structs to implement ContentAddressed:
==============================================
No public structs found
