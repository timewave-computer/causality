
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "causality-api" = rec {
      packageId = "causality-api";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-api";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-cli" = rec {
      packageId = "causality-cli";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-cli";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-compiler" = rec {
      packageId = "causality-compiler";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-compiler";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-core" = rec {
      packageId = "causality-core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-lisp" = rec {
      packageId = "causality-lisp";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-lisp";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-runtime" = rec {
      packageId = "causality-runtime";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-runtime";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-simulation" = rec {
      packageId = "causality-simulation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-simulation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-toolkit" = rec {
      packageId = "causality-toolkit";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-toolkit";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "causality-zk" = rec {
      packageId = "causality-zk";
      build = internal.buildRustCrateWithFeatures {
        packageId = "causality-zk";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "default" = [ "heavyweight" ];
          "heavyweight" = [ "regex" "lazy_static" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "default" "heavyweight" "lazy_static" "regex" ];
      };
      "addchain" = rec {
        crateName = "addchain";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0w45hpybsx9gzhlxf6x9451kycg8xwj3x8qzjnk8wqm55926jbiv";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [ "loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [ "std" "dep:object" "dep:memmap2" "dep:typed-arena" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1853796anlwp4kqim0s6wm1srl4ib621nm0cl2h3c8klsjkgfsdi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "getrandom" "runtime-rng" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.21";
        edition = "2018";
        sha256 = "08zrzs022xwndihvzdn78yqarv2b9696y67i6h78nla3ww87jgb8";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "alloy" = rec {
        crateName = "alloy";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0skv5s4dqn6midn5i01zdd2xcnw2ps7rfl7lnndw4hbajljbpzjr";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-contract";
            packageId = "alloy-contract";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-core";
            packageId = "alloy-core";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-genesis";
            packageId = "alloy-genesis";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network";
            packageId = "alloy-network";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-provider";
            packageId = "alloy-provider";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-client";
            packageId = "alloy-rpc-client";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-types";
            packageId = "alloy-rpc-types";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-signer";
            packageId = "alloy-signer";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-signer-local";
            packageId = "alloy-signer-local";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-http";
            packageId = "alloy-transport-http";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ipc";
            packageId = "alloy-transport-ipc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ws";
            packageId = "alloy-transport-ws";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "alloy-core/arbitrary" "alloy-consensus?/arbitrary" "alloy-eips?/arbitrary" "alloy-rpc-types?/arbitrary" ];
          "asm-keccak" = [ "alloy-core/asm-keccak" ];
          "consensus" = [ "dep:alloy-consensus" ];
          "contract" = [ "dep:alloy-contract" "providers" "dyn-abi" "json-abi" "json" "sol-types" ];
          "default" = [ "std" "reqwest" "alloy-core/default" ];
          "dyn-abi" = [ "alloy-core/dyn-abi" ];
          "eip712" = [ "alloy-core/eip712" "alloy-signer?/eip712" "alloy-signer-aws?/eip712" "alloy-signer-gcp?/eip712" "alloy-signer-ledger?/eip712" ];
          "eips" = [ "dep:alloy-eips" ];
          "full" = [ "consensus" "contract" "eips" "k256" "kzg" "network" "provider-http" "provider-ws" "provider-ipc" "rpc-types" "signer-local" ];
          "genesis" = [ "dep:alloy-genesis" ];
          "getrandom" = [ "alloy-core/getrandom" ];
          "hyper" = [ "alloy-rpc-client?/hyper" "alloy-provider?/hyper" "alloy-transport-http?/hyper" ];
          "json" = [ "alloy-core/json" ];
          "json-abi" = [ "alloy-core/json-abi" ];
          "json-rpc" = [ "rpc" "dep:alloy-json-rpc" ];
          "k256" = [ "alloy-core/k256" "alloy-consensus?/k256" "alloy-network?/k256" "alloy-rpc-types?/k256" "alloy-eips?/k256" ];
          "kzg" = [ "alloy-consensus?/kzg" "alloy-rpc-types?/kzg" ];
          "map" = [ "alloy-core/map" ];
          "map-fxhash" = [ "alloy-core/map-fxhash" ];
          "map-hashbrown" = [ "alloy-core/map-hashbrown" ];
          "map-indexmap" = [ "alloy-core/map-indexmap" ];
          "native-keccak" = [ "alloy-core/native-keccak" ];
          "network" = [ "dep:alloy-network" ];
          "node-bindings" = [ "dep:alloy-node-bindings" "alloy-provider?/anvil-node" ];
          "postgres" = [ "alloy-core/postgres" ];
          "provider-admin-api" = [ "providers" "alloy-provider?/admin-api" "rpc-types-admin" ];
          "provider-anvil-api" = [ "providers" "alloy-provider?/anvil-api" "rpc-types-anvil" ];
          "provider-anvil-node" = [ "providers" "provider-anvil-api" "alloy-provider?/anvil-node" "node-bindings" ];
          "provider-debug-api" = [ "providers" "alloy-provider?/debug-api" "rpc-types-trace" ];
          "provider-engine-api" = [ "providers" "alloy-provider?/engine-api" "rpc-types-engine" ];
          "provider-http" = [ "providers" "transport-http" ];
          "provider-ipc" = [ "providers" "alloy-provider?/ipc" "transport-ipc" ];
          "provider-net-api" = [ "providers" "alloy-provider?/net-api" ];
          "provider-trace-api" = [ "providers" "alloy-provider?/trace-api" "rpc-types-trace" ];
          "provider-txpool-api" = [ "providers" "alloy-provider?/txpool-api" "rpc-types-txpool" ];
          "provider-ws" = [ "providers" "alloy-provider?/ws" "transport-ws" ];
          "providers" = [ "dep:alloy-provider" "rpc-client" "transports" "eips" "consensus" "network" ];
          "pubsub" = [ "dep:alloy-pubsub" "alloy-contract?/pubsub" "alloy-provider?/pubsub" "alloy-rpc-client?/pubsub" ];
          "rand" = [ "alloy-core/rand" ];
          "reqwest" = [ "alloy-rpc-client?/reqwest" "alloy-provider?/reqwest" "alloy-transport-http?/reqwest" "alloy-transport-http?/reqwest-default-tls" ];
          "reqwest-native-tls" = [ "alloy-rpc-client?/reqwest" "alloy-provider?/reqwest" "alloy-transport-http?/reqwest" "alloy-transport-http?/reqwest-native-tls" ];
          "reqwest-rustls-tls" = [ "alloy-rpc-client?/reqwest" "alloy-provider?/reqwest" "alloy-transport-http?/reqwest" "alloy-transport-http?/reqwest-rustls-tls" ];
          "rlp" = [ "alloy-core/rlp" ];
          "rpc-client" = [ "rpc" "transports" "transport-http" "dep:alloy-rpc-client" ];
          "rpc-client-ipc" = [ "rpc-client" "transport-ipc" "alloy-rpc-client?/ipc" ];
          "rpc-client-ws" = [ "rpc-client" "transport-ws" "alloy-rpc-client?/ws" ];
          "rpc-types" = [ "rpc" "dep:alloy-rpc-types" "alloy-rpc-types?/eth" ];
          "rpc-types-admin" = [ "rpc-types" "alloy-rpc-types?/admin" "alloy-provider?/admin-api" ];
          "rpc-types-anvil" = [ "rpc-types" "alloy-rpc-types?/anvil" "alloy-provider?/anvil-api" ];
          "rpc-types-beacon" = [ "rpc-types" "alloy-rpc-types?/beacon" ];
          "rpc-types-debug" = [ "rpc-types" "alloy-provider?/debug-api" ];
          "rpc-types-engine" = [ "rpc-types" "alloy-rpc-types?/engine" "alloy-provider?/engine-api" ];
          "rpc-types-eth" = [ "rpc-types" "alloy-rpc-types?/eth" ];
          "rpc-types-json" = [ "rpc-types" "alloy-rpc-types?/jsonrpsee-types" ];
          "rpc-types-mev" = [ "rpc-types" "alloy-rpc-types?/mev" ];
          "rpc-types-trace" = [ "rpc-types" "alloy-rpc-types?/trace" "alloy-provider?/trace-api" ];
          "rpc-types-txpool" = [ "rpc-types" "alloy-rpc-types?/txpool" "alloy-provider?/txpool-api" ];
          "serde" = [ "alloy-core/serde" "alloy-eips?/serde" "alloy-consensus?/serde" "dep:alloy-serde" ];
          "sha3-keccak" = [ "alloy-core/sha3-keccak" ];
          "signer-aws" = [ "signers" "dep:alloy-signer-aws" ];
          "signer-gcp" = [ "signers" "dep:alloy-signer-gcp" ];
          "signer-keystore" = [ "signer-local" "alloy-signer-local?/keystore" ];
          "signer-ledger" = [ "signers" "dep:alloy-signer-ledger" ];
          "signer-ledger-browser" = [ "signer-ledger" "alloy-signer-ledger?/browser" ];
          "signer-ledger-node" = [ "signer-ledger" "alloy-signer-ledger?/node" ];
          "signer-local" = [ "signers" "dep:alloy-signer-local" ];
          "signer-mnemonic" = [ "signer-local" "alloy-signer-local?/mnemonic" ];
          "signer-mnemonic-all-languages" = [ "signer-mnemonic" "alloy-signer-local?/mnemonic-all-languages" ];
          "signer-trezor" = [ "signers" "dep:alloy-signer-trezor" ];
          "signer-yubihsm" = [ "signer-local" "alloy-signer-local?/yubihsm" ];
          "signers" = [ "dep:alloy-signer" ];
          "sol-types" = [ "alloy-core/sol-types" ];
          "ssz" = [ "alloy-rpc-types?/ssz" ];
          "std" = [ "alloy-core/std" "alloy-eips?/std" "alloy-genesis?/std" "alloy-serde?/std" "alloy-consensus?/std" ];
          "tiny-keccak" = [ "alloy-core/tiny-keccak" ];
          "transport-http" = [ "transports" "dep:alloy-transport-http" ];
          "transport-ipc" = [ "transports" "pubsub" "dep:alloy-transport-ipc" ];
          "transport-ipc-mock" = [ "alloy-transport-ipc?/mock" ];
          "transport-ws" = [ "transports" "pubsub" "dep:alloy-transport-ws" ];
          "transports" = [ "dep:alloy-transport" ];
          "wasm-bindgen" = [ "alloy-transport?/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "consensus" "contract" "default" "dyn-abi" "eips" "full" "json" "json-abi" "k256" "kzg" "network" "provider-http" "provider-ipc" "provider-ws" "providers" "pubsub" "reqwest" "rpc" "rpc-client" "rpc-types" "signer-local" "signers" "sol-types" "std" "transport-http" "transport-ipc" "transport-ws" "transports" ];
      };
      "alloy-chains" = rec {
        crateName = "alloy-chains";
        version = "0.1.69";
        edition = "2021";
        sha256 = "1sz79x2vhjzycl15b6j8xy4rkzfrkqh8n94x72dhv2vmhhk6bqi8";
        libName = "alloy_chains";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "num_enum";
            packageId = "num_enum 0.7.3";
            usesDefaultFeatures = false;
          }
          {
            name = "strum";
            packageId = "strum 0.27.1";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "dep:proptest" "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "rlp" = [ "dep:alloy-rlp" "alloy-primitives/rlp" ];
          "schema" = [ "std" "dep:schemars" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "std" = [ "strum/std" "serde?/std" "alloy-primitives/std" ];
        };
      };
      "alloy-consensus" = rec {
        crateName = "alloy-consensus";
        version = "0.8.3";
        edition = "2021";
        sha256 = "09mkls283ksvk99iw1kfksqks3rqmqr3yz8r24zc71q7lzg1x3p8";
        libName = "alloy_consensus";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "kzg-sidecar" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-trie";
            packageId = "alloy-trie";
            usesDefaultFeatures = false;
            features = [ "ethereum" ];
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "c-kzg";
            packageId = "c-kzg";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "from" "deref" "deref_mut" "into_iterator" ];
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" "ecdsa" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "arbitrary" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "rand" ];
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:rand" "dep:arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" ];
          "k256" = [ "dep:k256" "alloy-primitives/k256" "alloy-eips/k256" ];
          "kzg" = [ "dep:c-kzg" "alloy-eips/kzg" "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "dep:alloy-serde" "alloy-eips/serde" "alloy-trie/serde" ];
          "serde-bincode-compat" = [ "alloy-eips/serde-bincode-compat" "serde_with" ];
          "serde_with" = [ "dep:serde_with" ];
          "std" = [ "alloy-eips/std" "c-kzg?/std" ];
        };
        resolvedDefaultFeatures = [ "k256" "kzg" "serde" "std" ];
      };
      "alloy-consensus-any" = rec {
        crateName = "alloy-consensus-any";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0r8xi8wx0pyj04a6vqw4hpk174mkaza3qmvm376p60hcyi9vpcap";
        libName = "alloy_consensus_any";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "dep:alloy-serde" "alloy-eips/serde" ];
          "std" = [ "alloy-eips/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "alloy-contract" = rec {
        crateName = "alloy-contract";
        version = "0.8.3";
        edition = "2021";
        sha256 = "09g7c2wl6nl548fzsjbxxyhhl3amrvl8anny9r3jzwdiqiw8qrhv";
        libName = "alloy_contract";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-dyn-abi";
            packageId = "alloy-dyn-abi";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network";
            packageId = "alloy-network";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network-primitives";
            packageId = "alloy-network-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
          {
            name = "alloy-provider";
            packageId = "alloy-provider";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-provider";
            packageId = "alloy-provider";
            usesDefaultFeatures = false;
            features = [ "anvil-node" ];
          }
        ];
        features = {
          "pubsub" = [ "alloy-provider/pubsub" "dep:alloy-pubsub" ];
        };
        resolvedDefaultFeatures = [ "pubsub" ];
      };
      "alloy-core" = rec {
        crateName = "alloy-core";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1xlnl7i6dbx5da85479wg1y876w0pk3c3bng80kf03yikblwr2wx";
        libName = "alloy_core";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-dyn-abi";
            packageId = "alloy-dyn-abi";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "std" "alloy-primitives/arbitrary" "alloy-sol-types?/arbitrary" "alloy-dyn-abi?/arbitrary" ];
          "asm-keccak" = [ "alloy-primitives/asm-keccak" ];
          "default" = [ "std" "alloy-primitives/default" "alloy-dyn-abi?/default" "alloy-json-abi?/default" "alloy-sol-types?/default" "alloy-rlp?/default" ];
          "dyn-abi" = [ "sol-types" "dep:alloy-dyn-abi" ];
          "eip712" = [ "alloy-sol-types?/eip712-serde" "alloy-dyn-abi?/eip712" ];
          "getrandom" = [ "alloy-primitives/getrandom" ];
          "json" = [ "alloy-sol-types?/json" ];
          "json-abi" = [ "json" "serde" "dep:alloy-json-abi" ];
          "k256" = [ "alloy-primitives/k256" ];
          "map" = [ "alloy-primitives/map" ];
          "map-foldhash" = [ "alloy-primitives/map-foldhash" ];
          "map-fxhash" = [ "alloy-primitives/map-fxhash" ];
          "map-hashbrown" = [ "alloy-primitives/map-hashbrown" ];
          "map-indexmap" = [ "alloy-primitives/map-indexmap" ];
          "native-keccak" = [ "alloy-primitives/native-keccak" ];
          "nightly" = [ "alloy-primitives/nightly" ];
          "postgres" = [ "std" "alloy-primitives/postgres" ];
          "rand" = [ "alloy-primitives/rand" ];
          "rayon" = [ "alloy-primitives/rayon" ];
          "rlp" = [ "alloy-primitives/rlp" "dep:alloy-rlp" ];
          "serde" = [ "alloy-primitives/serde" ];
          "sha3-keccak" = [ "alloy-primitives/sha3-keccak" ];
          "sol-types" = [ "dep:alloy-sol-types" ];
          "std" = [ "alloy-primitives/std" "alloy-json-abi?/std" "alloy-dyn-abi?/std" "alloy-sol-types?/std" "alloy-rlp?/std" ];
          "tiny-keccak" = [ "alloy-primitives/tiny-keccak" ];
        };
        resolvedDefaultFeatures = [ "default" "dyn-abi" "json" "json-abi" "k256" "serde" "sol-types" "std" ];
      };
      "alloy-dyn-abi" = rec {
        crateName = "alloy-dyn-abi";
        version = "0.8.25";
        edition = "2021";
        sha256 = "11ywbjxa7a1k1339r0f87snw8r9lczgqdg45yizkk6nkxwm7d3pb";
        libName = "alloy_dyn_abi";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-type-parser";
            packageId = "alloy-sol-type-parser";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "winnow";
            packageId = "winnow 0.7.10";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "alloy-sol-types/arbitrary" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" ];
          "debug" = [ "std" "alloy-sol-type-parser/debug" ];
          "default" = [ "std" ];
          "eip712" = [ "alloy-sol-types/eip712-serde" "dep:derive_more" "dep:serde" "dep:serde_json" ];
          "std" = [ "alloy-json-abi/std" "alloy-sol-types/std" "alloy-sol-type-parser/std" "alloy-primitives/std" "hex/std" "serde?/std" "serde_json?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "alloy-eip2930" = rec {
        crateName = "alloy-eip2930";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0hgwp8zbplgsrp1z1pcgzpa3r2axkp16skq13ah8fzs5883cys80";
        libName = "alloy_eip2930";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:rand" "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "alloy-eip7702" = rec {
        crateName = "alloy-eip7702";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0zizv4fshcz274lzd7iccpzm4zjm1qcqw4iwag8kkf2z4lwnb62c";
        libName = "alloy_eip7702";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:rand" "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "k256" = [ "alloy-primitives/k256" "dep:k256" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "serde-bincode-compat" = [ "serde_with" ];
          "serde_with" = [ "dep:serde_with" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" "derive_more/std" ];
        };
        resolvedDefaultFeatures = [ "k256" "serde" ];
      };
      "alloy-eips" = rec {
        crateName = "alloy-eips";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1czxayslk7phy3ck2mnapcaw12x2y172sgs7a03cr74y13zav7sz";
        libName = "alloy_eips";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-eip2930";
            packageId = "alloy-eip2930";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eip7702";
            packageId = "alloy-eip7702";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "c-kzg";
            packageId = "c-kzg";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "as_ref" "deref" "deref_mut" "from" "into_iterator" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "race" "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "kzg-sidecar" "dep:arbitrary" "alloy-primitives/arbitrary" "alloy-serde?/arbitrary" "alloy-eip2930/arbitrary" "alloy-eip7702/arbitrary" "alloy-eip7702/k256" ];
          "default" = [ "std" "kzg-sidecar" ];
          "k256" = [ "alloy-eip7702/k256" ];
          "kzg" = [ "kzg-sidecar" "sha2" "dep:c-kzg" "dep:once_cell" ];
          "kzg-sidecar" = [ "sha2" ];
          "serde" = [ "dep:alloy-serde" "dep:serde" "alloy-primitives/serde" "c-kzg?/serde" "alloy-eip2930/serde" "alloy-eip7702/serde" ];
          "serde-bincode-compat" = [ "alloy-eip7702/serde-bincode-compat" ];
          "sha2" = [ "dep:sha2" ];
          "ssz" = [ "std" "dep:ethereum_ssz" "dep:ethereum_ssz_derive" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" "c-kzg?/std" "once_cell?/std" ];
        };
        resolvedDefaultFeatures = [ "k256" "kzg" "kzg-sidecar" "serde" "sha2" "std" ];
      };
      "alloy-genesis" = rec {
        crateName = "alloy-genesis";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1ybkx8qjxdmc9bzp99x2424f7zv0a9v1rkklirw9ad0gnzvlqaib";
        libName = "alloy_genesis";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-trie";
            packageId = "alloy-trie";
            usesDefaultFeatures = false;
            features = [ "ethereum" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloy-primitives/std" "alloy-serde/std" "serde/std" "alloy-trie/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "alloy-json-abi" = rec {
        crateName = "alloy-json-abi";
        version = "0.8.25";
        edition = "2021";
        sha256 = "06zx7in3dlrynw51adhp07myynjnxxpv4gcs078nmanh9bvfyszy";
        libName = "alloy_json_abi";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-sol-type-parser";
            packageId = "alloy-sol-type-parser";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "serde/std" "alloy-primitives/std" "alloy-sol-type-parser/std" "serde_json?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "alloy-json-rpc" = rec {
        crateName = "alloy-json-rpc";
        version = "0.8.3";
        edition = "2021";
        sha256 = "018ih820ar90f68crmpvip8fzy34bdl8462k2l2bfbzysnwl1472";
        libName = "alloy_json_rpc";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "std" "serde" "map" ];
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "alloy-network" = rec {
        crateName = "alloy-network";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1i5c7mfi857016a6gydf8k0lzrps3i0k5l6jzp6dzc4d645w032i";
        libName = "alloy_network";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "alloy-consensus-any";
            packageId = "alloy-consensus-any";
            usesDefaultFeatures = false;
            features = [ "std" "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network-primitives";
            packageId = "alloy-network-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
          {
            name = "alloy-rpc-types-any";
            packageId = "alloy-rpc-types-any";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            usesDefaultFeatures = false;
            features = [ "std" "serde" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-signer";
            packageId = "alloy-signer";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "futures-utils-wasm";
            packageId = "futures-utils-wasm";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "k256" = [ "alloy-primitives/k256" "alloy-consensus/k256" ];
        };
        resolvedDefaultFeatures = [ "k256" ];
      };
      "alloy-network-primitives" = rec {
        crateName = "alloy-network-primitives";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0l3mz58m0c23gdpaps9mgby02vqlk8mbhphllaxs5f4qwycw10ch";
        libName = "alloy_network_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloy-primitives/std" ];
        };
      };
      "alloy-node-bindings" = rec {
        crateName = "alloy-node-bindings";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1ph2xnd4d1l4zc6s0y309z03a3igmh6lpnyby9lqzcmvp2gq9ydf";
        libName = "alloy_node_bindings";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-genesis";
            packageId = "alloy-genesis";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "std" "k256" "serde" ];
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "alloy-primitives 0.7.7" = rec {
        crateName = "alloy-primitives";
        version = "0.7.7";
        edition = "2021";
        sha256 = "1x0bri8hchiq7ym6rqi6jbp1d70b5ya4j5lnmz42nlzl8zaymcyc";
        libName = "alloy_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 0.99.20";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "keccak-asm";
            packageId = "keccak-asm";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
          {
            name = "ruint";
            packageId = "ruint";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
        ];
        features = {
          "allocative" = [ "dep:allocative" ];
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "ruint/arbitrary" "ruint/proptest" "ethereum_ssz?/arbitrary" ];
          "asm-keccak" = [ "dep:keccak-asm" ];
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "hex-compat" = [ "hex/hex" ];
          "k256" = [ "dep:k256" ];
          "postgres" = [ "std" "dep:postgres-types" "ruint/postgres" ];
          "rand" = [ "dep:rand" "getrandom" "ruint/rand" ];
          "rlp" = [ "dep:alloy-rlp" "ruint/alloy-rlp" ];
          "serde" = [ "dep:serde" "bytes/serde" "hex/serde" "ruint/serde" ];
          "ssz" = [ "std" "dep:ethereum_ssz" "ruint/ssz" ];
          "std" = [ "bytes/std" "hex/std" "ruint/std" "alloy-rlp?/std" "keccak-asm?/std" "proptest?/std" "rand?/std" "serde?/std" "k256?/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "alloy-primitives 0.8.25" = rec {
        crateName = "alloy-primitives";
        version = "0.8.25";
        edition = "2021";
        sha256 = "0klxil5w1aadz99mva8c5j6c43zj46ah46gjl4ryj30sx47ljxwc";
        libName = "alloy_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            usesDefaultFeatures = false;
            features = [ "as_ref" "add" "add_assign" "not" "deref" "deref_mut" "from" "from_str" "index" "index_mut" "into" "into_iterator" "display" "deref" ];
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "default-hasher" "inline-more" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "keccak-asm";
            packageId = "keccak-asm";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
          {
            name = "ruint";
            packageId = "ruint";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sha3";
            packageId = "sha3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
        ];
        features = {
          "allocative" = [ "dep:allocative" ];
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "ruint/arbitrary" "ruint/proptest" "indexmap?/arbitrary" ];
          "asm-keccak" = [ "dep:keccak-asm" ];
          "default" = [ "std" "map" "map-foldhash" ];
          "getrandom" = [ "dep:getrandom" ];
          "hex-compat" = [ "hex/hex" ];
          "k256" = [ "dep:k256" ];
          "map" = [ "dep:hashbrown" ];
          "map-foldhash" = [ "map" "dep:foldhash" ];
          "map-fxhash" = [ "map" "dep:rustc-hash" ];
          "map-hashbrown" = [ "map" ];
          "map-indexmap" = [ "map" "dep:indexmap" ];
          "nightly" = [ "hex/nightly" "ruint/nightly" "hashbrown?/nightly" "rustc-hash?/nightly" ];
          "postgres" = [ "std" "dep:postgres-types" "ruint/postgres" ];
          "rand" = [ "dep:rand" "getrandom" "ruint/rand" "rustc-hash?/rand" ];
          "rayon" = [ "dep:rayon" "hashbrown?/rayon" "indexmap?/rayon" ];
          "rlp" = [ "dep:alloy-rlp" "ruint/alloy-rlp" ];
          "serde" = [ "dep:serde" "bytes/serde" "hex/serde" "ruint/serde" "hashbrown?/serde" "indexmap?/serde" "rand?/serde" ];
          "sha3-keccak" = [ "dep:sha3" ];
          "std" = [ "bytes/std" "hex/std" "ruint/std" "alloy-rlp?/std" "foldhash?/std" "indexmap?/std" "k256?/std" "keccak-asm?/std" "proptest?/std" "rand?/std" "rand?/std_rng" "rustc-hash?/std" "serde?/std" "sha3?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "k256" "map" "map-foldhash" "rlp" "serde" "std" ];
      };
      "alloy-provider" = rec {
        crateName = "alloy-provider";
        version = "0.8.3";
        edition = "2021";
        sha256 = "090zbjw5c11ih74cnlp528gfq5g1wcb16klalxqah2m3v7fzlbfw";
        libName = "alloy_provider";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-chains";
            packageId = "alloy-chains";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network";
            packageId = "alloy-network";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network-primitives";
            packageId = "alloy-network-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-client";
            packageId = "alloy-rpc-client";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-http";
            packageId = "alloy-transport-http";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ipc";
            packageId = "alloy-transport-ipc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ws";
            packageId = "alloy-transport-ws";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-utils-wasm";
            packageId = "futures-utils-wasm";
          }
          {
            name = "lru";
            packageId = "lru";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "macros" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "kzg" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
          {
            name = "alloy-rpc-client";
            packageId = "alloy-rpc-client";
            usesDefaultFeatures = false;
            features = [ "reqwest" ];
          }
          {
            name = "alloy-transport-http";
            packageId = "alloy-transport-http";
            usesDefaultFeatures = false;
            features = [ "reqwest" "jwt-auth" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
        ];
        features = {
          "admin-api" = [ "dep:alloy-rpc-types-admin" ];
          "alloy-transport-ipc" = [ "dep:alloy-transport-ipc" ];
          "alloy-transport-ws" = [ "dep:alloy-transport-ws" ];
          "anvil-api" = [ "dep:alloy-rpc-types-anvil" ];
          "anvil-node" = [ "anvil-api" "reqwest" "dep:alloy-node-bindings" "dep:alloy-signer-local" "dep:alloy-signer" ];
          "debug-api" = [ "dep:alloy-rpc-types-trace" "dep:alloy-rpc-types-debug" ];
          "default" = [ "reqwest" "reqwest-default-tls" ];
          "engine-api" = [ "dep:alloy-rpc-types-engine" ];
          "hyper" = [ "dep:alloy-transport-http" "dep:url" "alloy-rpc-client/hyper" ];
          "ipc" = [ "pubsub" "alloy-rpc-client/ipc" "alloy-transport-ipc" ];
          "pubsub" = [ "alloy-rpc-client/pubsub" "dep:alloy-pubsub" ];
          "reqwest" = [ "dep:reqwest" "dep:url" "dep:alloy-transport-http" "alloy-rpc-client/reqwest" ];
          "reqwest-default-tls" = [ "alloy-transport-http?/reqwest-default-tls" ];
          "reqwest-native-tls" = [ "alloy-transport-http?/reqwest-native-tls" ];
          "reqwest-rustls-tls" = [ "alloy-transport-http?/reqwest-rustls-tls" ];
          "rpc-api" = [ "dep:alloy-rpc-types" ];
          "trace-api" = [ "dep:alloy-rpc-types-trace" ];
          "txpool-api" = [ "dep:alloy-rpc-types-txpool" ];
          "ws" = [ "pubsub" "alloy-rpc-client/ws" "alloy-transport-ws" ];
        };
        resolvedDefaultFeatures = [ "alloy-transport-ipc" "alloy-transport-ws" "ipc" "pubsub" "reqwest" "ws" ];
      };
      "alloy-pubsub" = rec {
        crateName = "alloy-pubsub";
        version = "0.8.3";
        edition = "2021";
        sha256 = "176w2abpr1z9kkp203gbb939zga58rxd2ji91i8m93b28gkhjn39";
        libName = "alloy_pubsub";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "bimap";
            packageId = "bimap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "alloy-rlp" = rec {
        crateName = "alloy-rlp";
        version = "0.3.12";
        edition = "2021";
        sha256 = "1d1l0s837f26j7xfn0ig3xvf8gyjv1qdpx6lph6hip2zfqxxhw2z";
        libName = "alloy_rlp";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-rlp-derive";
            packageId = "alloy-rlp-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "default" = [ "std" ];
          "derive" = [ "dep:alloy-rlp-derive" ];
          "std" = [ "bytes/std" "arrayvec?/std" ];
        };
        resolvedDefaultFeatures = [ "arrayvec" "default" "derive" "std" ];
      };
      "alloy-rlp-derive" = rec {
        crateName = "alloy-rlp-derive";
        version = "0.3.12";
        edition = "2021";
        sha256 = "0wrvryfar62jb3ckak6gs9g2gv1n6z0afzmwq5kxlbcn27ajidv4";
        procMacro = true;
        libName = "alloy_rlp_derive";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "alloy-rpc-client" = rec {
        crateName = "alloy-rpc-client";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1dlkaaaq35xy51pn07b81j0pdvv4dh06pjdgbjd5nzalhfr3f4ak";
        libName = "alloy_rpc_client";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-http";
            packageId = "alloy-transport-http";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ipc";
            packageId = "alloy-transport-ipc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "alloy-transport-ws";
            packageId = "alloy-transport-ws";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport-ipc";
            packageId = "alloy-transport-ipc";
            usesDefaultFeatures = false;
            features = [ "mock" ];
          }
          {
            name = "alloy-transport-ws";
            packageId = "alloy-transport-ws";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "reqwest" ];
          "hyper" = [ "dep:url" "alloy-transport-http/hyper" ];
          "ipc" = [ "pubsub" "dep:alloy-transport-ipc" ];
          "pubsub" = [ "dep:alloy-pubsub" ];
          "reqwest" = [ "dep:url" "dep:reqwest" "alloy-transport-http/reqwest" ];
          "ws" = [ "pubsub" "dep:alloy-transport-ws" "dep:url" ];
        };
        resolvedDefaultFeatures = [ "ipc" "pubsub" "reqwest" "ws" ];
      };
      "alloy-rpc-types" = rec {
        crateName = "alloy-rpc-types";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1vhsmbb0pl0igamzsc8zizw302slppk8ww0gg3lmgi16rrra841l";
        libName = "alloy_rpc_types";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
          {
            name = "alloy-rpc-types-engine";
            packageId = "alloy-rpc-types-engine";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" "std" ];
          }
        ];
        features = {
          "admin" = [ "dep:alloy-rpc-types-admin" ];
          "anvil" = [ "dep:alloy-rpc-types-anvil" ];
          "arbitrary" = [ "alloy-rpc-types-eth?/arbitrary" "alloy-serde/arbitrary" ];
          "beacon" = [ "dep:alloy-rpc-types-beacon" ];
          "debug" = [ "dep:alloy-rpc-types-debug" ];
          "default" = [ "eth" "alloy-rpc-types-engine?/default" "alloy-rpc-types-eth?/default" ];
          "engine" = [ "dep:alloy-rpc-types-engine" ];
          "eth" = [ "dep:alloy-rpc-types-eth" ];
          "jsonrpsee-types" = [ "alloy-rpc-types-eth?/jsonrpsee-types" "alloy-rpc-types-engine?/jsonrpsee-types" ];
          "k256" = [ "alloy-rpc-types-eth?/k256" ];
          "kzg" = [ "alloy-rpc-types-engine?/kzg" ];
          "mev" = [ "dep:alloy-rpc-types-mev" ];
          "ssz" = [ "alloy-rpc-types-beacon?/ssz" "alloy-rpc-types-engine?/ssz" ];
          "trace" = [ "dep:alloy-rpc-types-trace" ];
          "txpool" = [ "dep:alloy-rpc-types-txpool" ];
        };
        resolvedDefaultFeatures = [ "eth" "k256" "kzg" ];
      };
      "alloy-rpc-types-any" = rec {
        crateName = "alloy-rpc-types-any";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0gmacg4pwjlg9a85qrck6m8y4symv1ihzww5lfzmdn57anpy367d";
        libName = "alloy_rpc_types_any";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus-any";
            packageId = "alloy-consensus-any";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
        ];

      };
      "alloy-rpc-types-engine" = rec {
        crateName = "alloy-rpc-types-engine";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1qq2zq8dr2z5m340gjndylfn7r95yc4dy0kp9azmw9ar97x1dg83";
        libName = "alloy_rpc_types_engine";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" "serde" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "arrayvec" "derive" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "display" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "rlp" "serde" "arbitrary" ];
          }
        ];
        features = {
          "default" = [ "jwt" "std" "serde" ];
          "jsonrpsee-types" = [ "dep:jsonrpsee-types" ];
          "jwt" = [ "std" "dep:jsonwebtoken" "dep:rand" ];
          "kzg" = [ "alloy-consensus/kzg" ];
          "serde" = [ "dep:serde" "dep:alloy-serde" ];
          "ssz" = [ "std" "dep:ethereum_ssz" "dep:ethereum_ssz_derive" "alloy-eips/ssz" ];
          "std" = [ "alloy-consensus/std" "derive_more/std" "strum/std" ];
        };
        resolvedDefaultFeatures = [ "kzg" "serde" ];
      };
      "alloy-rpc-types-eth" = rec {
        crateName = "alloy-rpc-types-eth";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1q8qg0abmapvbyfvqjmj1rvcdbjcag39b51yqalvp9vwwfkdfdw7";
        libName = "alloy_rpc_types_eth";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-consensus-any";
            packageId = "alloy-consensus-any";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network-primitives";
            packageId = "alloy-network-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" "map" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "arrayvec" "derive" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "display" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "std" "arbitrary" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "k256" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "rlp" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "alloy-primitives/arbitrary" "alloy-serde?/arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" "serde" ];
          "jsonrpsee-types" = [ "dep:jsonrpsee-types" ];
          "k256" = [ "alloy-consensus/k256" "alloy-eips/k256" ];
          "serde" = [ "dep:serde" "dep:serde_json" "dep:alloy-serde" "alloy-primitives/serde" "alloy-consensus/serde" "alloy-eips/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-consensus/std" "alloy-eips/std" ];
        };
        resolvedDefaultFeatures = [ "k256" "serde" "std" ];
      };
      "alloy-serde" = rec {
        crateName = "alloy-serde";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1ql94wna3d76g854a2d2r2n31rq36dh3q5a51jyi8c6kba6vylaq";
        libName = "alloy_serde";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "serde" "map" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "rlp" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "alloy-primitives/arbitrary" "std" ];
          "default" = [ "std" ];
          "std" = [ "alloy-primitives/std" "serde/std" "serde_json/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "alloy-signer" = rec {
        crateName = "alloy-signer";
        version = "0.8.3";
        edition = "2021";
        sha256 = "16h23x0gvnl1izfw0nxqw7r9i5ym4kj5x8sv0750ql56bmbcl43y";
        libName = "alloy_signer";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "std" "k256" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "eip712" = [ "dep:alloy-sol-types" "dep:alloy-dyn-abi" ];
        };
      };
      "alloy-signer-local" = rec {
        crateName = "alloy-signer-local";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0wnicilnc78xkzybj28j7myzjrq2wm47v4ny1i4k6lblbazvmyj7";
        libName = "alloy_signer_local";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "alloy-network";
            packageId = "alloy-network";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-signer";
            packageId = "alloy-signer";
            usesDefaultFeatures = false;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32 0.12.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "coins-bip39";
            packageId = "coins-bip39 0.12.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "english" ];
          }
          {
            name = "eth-keystore";
            packageId = "eth-keystore";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "alloy-network";
            packageId = "alloy-network";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "eip712" = [ "alloy-signer/eip712" ];
          "keystore" = [ "dep:eth-keystore" ];
          "keystore-geth-compat" = [ "keystore" "eth-keystore?/geth-compat" ];
          "mnemonic" = [ "dep:coins-bip32" "dep:coins-bip39" ];
          "mnemonic-all-languages" = [ "mnemonic" "coins-bip39?/all-langs" ];
          "yubihsm" = [ "dep:yubihsm" "dep:elliptic-curve" ];
        };
        resolvedDefaultFeatures = [ "keystore" "mnemonic" ];
      };
      "alloy-sol-macro 0.7.7" = rec {
        crateName = "alloy-sol-macro";
        version = "0.7.7";
        edition = "2021";
        sha256 = "02fd0wbzkki95y3c27x9k7k804nf07v715wmkzsndhnwviykjh1b";
        procMacro = true;
        libName = "alloy_sol_macro";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-sol-macro-expander";
            packageId = "alloy-sol-macro-expander 0.7.7";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input 0.7.7";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "json" = [ "alloy-sol-macro-expander/json" ];
        };
      };
      "alloy-sol-macro 0.8.25" = rec {
        crateName = "alloy-sol-macro";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1wjrzml1pnq6xf97mzknx6mrm483ad0l49f2aklqlchxm7lyh2p1";
        procMacro = true;
        libName = "alloy_sol_macro";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-sol-macro-expander";
            packageId = "alloy-sol-macro-expander 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "json" = [ "alloy-sol-macro-expander/json" ];
        };
        resolvedDefaultFeatures = [ "json" ];
      };
      "alloy-sol-macro-expander 0.7.7" = rec {
        crateName = "alloy-sol-macro-expander";
        version = "0.7.7";
        edition = "2021";
        sha256 = "0985kbyc2zhi3cklzr52bhgn4nrdlpngycvkijhgx00lsrlm8yl6";
        libName = "alloy_sol_macro_expander";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input 0.7.7";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity 0.7.7";
            usesDefaultFeatures = false;
            features = [ "visit" "visit-mut" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro-input/json" ];
        };
      };
      "alloy-sol-macro-expander 0.8.25" = rec {
        crateName = "alloy-sol-macro-expander";
        version = "0.8.25";
        edition = "2021";
        sha256 = "09lgz7a7fpbk873a174si3q5xf79kxn4s5vwc2y52xqjdjl5vbc3";
        libName = "alloy_sol_macro_expander";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity 0.8.25";
            usesDefaultFeatures = false;
            features = [ "visit" "visit-mut" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro-input/json" ];
        };
        resolvedDefaultFeatures = [ "json" ];
      };
      "alloy-sol-macro-input 0.7.7" = rec {
        crateName = "alloy-sol-macro-input";
        version = "0.7.7";
        edition = "2021";
        sha256 = "0a15lwzkw2jd805shhf1hnjsmlqbabmav6gmq3dzmdij7b1jsj1f";
        libName = "alloy_sol_macro_input";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity 0.7.7";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "dep:serde_json" ];
        };
      };
      "alloy-sol-macro-input 0.8.25" = rec {
        crateName = "alloy-sol-macro-input";
        version = "0.8.25";
        edition = "2021";
        sha256 = "17ls817n037ll8bl8q05qym4f9iixvlivzzkhrv3pfprsgq30gds";
        libName = "alloy_sol_macro_input";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "macro-string";
            packageId = "macro-string";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity 0.8.25";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "json" ];
      };
      "alloy-sol-type-parser" = rec {
        crateName = "alloy-sol-type-parser";
        version = "0.8.25";
        edition = "2021";
        sha256 = "0p4kyfj543gg5vrjl0pbfhj3wpwq9irmql6h9c7gpzdd4j2jy5kd";
        libName = "alloy_sol_type_parser";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "winnow";
            packageId = "winnow 0.7.10";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "debug" = [ "std" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "winnow/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "alloy-sol-types 0.7.7" = rec {
        crateName = "alloy-sol-types";
        version = "0.7.7";
        edition = "2021";
        sha256 = "1irq3vam4d7x2irj7xd256pwj74xars3xf2172fax4q7l87s8759";
        libName = "alloy_sol_types";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.7.7";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro";
            packageId = "alloy-sol-macro 0.7.7";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.7.7";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "serde" "rlp" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "eip712-serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro/json" ];
          "std" = [ "alloy-primitives/std" "hex/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "alloy-sol-types 0.8.25" = rec {
        crateName = "alloy-sol-types";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1ax9nj6lsczdwyk8xgj3dza1jiqxcxkslqbpq0q04i3a8rh5wgfl";
        libName = "alloy_sol_types";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-abi";
            packageId = "alloy-json-abi";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro";
            packageId = "alloy-sol-macro 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "serde" "rlp" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "eip712-serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro/json" ];
          "std" = [ "alloy-primitives/std" "hex/std" "alloy-json-abi?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "json" "std" ];
      };
      "alloy-transport" = rec {
        crateName = "alloy-transport";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1bb6w39rxcwc0vfkp16xzkyy4k8pzlvvfcg21jn9qii1faih92jk";
        libName = "alloy_transport";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "futures-utils-wasm";
            packageId = "futures-utils-wasm";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rt" "time" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "wasm-bindgen" = [ "dep:wasm-bindgen-futures" ];
        };
      };
      "alloy-transport-http" = rec {
        crateName = "alloy-transport-http";
        version = "0.8.3";
        edition = "2021";
        sha256 = "075c02zf4fayqhq6fr2siw3jsw79xkfa2siga48jjnr6w6qhxm1f";
        libName = "alloy_transport_http";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            optional = true;
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "reqwest" "reqwest-default-tls" ];
          "hyper" = [ "dep:hyper" "dep:hyper-util" "dep:http-body-util" "dep:alloy-json-rpc" "dep:serde_json" "dep:tower" "dep:tracing" ];
          "jwt-auth" = [ "hyper" "dep:alloy-rpc-types-engine" "alloy-rpc-types-engine/jwt" "alloy-rpc-types-engine/serde" "dep:jsonwebtoken" ];
          "reqwest" = [ "dep:reqwest" "dep:alloy-json-rpc" "dep:serde_json" "dep:tower" "dep:tracing" ];
          "reqwest-default-tls" = [ "reqwest?/default-tls" ];
          "reqwest-native-tls" = [ "reqwest?/native-tls" ];
          "reqwest-rustls-tls" = [ "reqwest?/rustls-tls" ];
        };
        resolvedDefaultFeatures = [ "default" "reqwest" "reqwest-default-tls" ];
      };
      "alloy-transport-ipc" = rec {
        crateName = "alloy-transport-ipc";
        version = "0.8.3";
        edition = "2021";
        sha256 = "15gz9jhhh0nd59qj91bgr8kcni8psn37z0wslwk6nw14knjp58d7";
        libName = "alloy_transport_ipc";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-json-rpc";
            packageId = "alloy-json-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "interprocess";
            packageId = "interprocess";
            features = [ "tokio" ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "mock" = [ "dep:serde" "dep:tempfile" ];
        };
      };
      "alloy-transport-ws" = rec {
        crateName = "alloy-transport-ws";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1fwax4jihsvskjlgr6i7x7b6cb2ab3nm9jmqvdkc44qx32fy787v";
        libName = "alloy_transport_ws";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-pubsub";
            packageId = "alloy-pubsub";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-transport";
            packageId = "alloy-transport";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "tls12" "ring" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "sync" "rt" "time" ];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite 0.24.0";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rustls-tls-webpki-roots" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];

      };
      "alloy-trie" = rec {
        crateName = "alloy-trie";
        version = "0.7.9";
        edition = "2021";
        sha256 = "12vfk6nkalp1hcw43dlsp6d3bpkchn2p907pcblhf3s29s2r8nnr";
        libName = "alloy_trie";
        authors = [
          "rkrasiuk <rokrassyuk@gmail.com>"
          "gakonst <me@gakonst.com>"
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" "map" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" "arrayvec" ];
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "add" "add_assign" "deref" "from" "not" ];
          }
          {
            name = "nybbles";
            packageId = "nybbles";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
            features = [ "const_new" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "alloy-primitives/arbitrary" "nybbles/arbitrary" ];
          "default" = [ "std" "alloy-primitives/default" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "arrayvec/serde" "nybbles/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "arrayvec/std" "derive_more/std" "nybbles/std" "tracing/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "ethereum" "serde" "std" ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anes" = rec {
        crateName = "anes";
        version = "0.1.6";
        edition = "2018";
        sha256 = "16bj1ww1xkwzbckk32j2pnbn5vk6wgsl3q4p3j9551xbcarwnijb";
        authors = [
          "Robert Vojta <rvojta@me.com>"
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "parser" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.12.1";
        edition = "2015";
        sha256 = "1ljmkbilxgmhavxvxqa7qvm6f3fjggi7q2l3a72q9x0cxjvrnanm";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.19";
        edition = "2021";
        sha256 = "0crr9a207dyn8k66xgvhvmlxm9raiwpss3syfa35c6265s9z26ih";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.11";
        edition = "2021";
        sha256 = "1gbbzi0zbgff405q14v8hhpi1kz2drzl9a75r3qhks47lindjbl6";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.7";
        edition = "2021";
        sha256 = "1hhmkkfr95d462b3zf6yl2vfzdqfy5726ya572wwg8ha9y148xjf";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.3";
        edition = "2021";
        sha256 = "1sgs2hq54wayrmpvy784ww2ccv9f8yhhpasv12z872bx0jvdx2vc";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.9";
        edition = "2021";
        sha256 = "10n8mcgr89risdf35i73zc67aaa392bhggwzqlri1fv79297ags0";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "once_cell_polyfill";
            packageId = "once_cell_polyfill";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.98";
        edition = "2018";
        sha256 = "11ylvjdrcjs0q9jgk1af4r5cx1qppj63plxqkq595vmc24rjsvg1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ark-bls12-381" = rec {
        crateName = "ark-bls12-381";
        version = "0.4.0";
        edition = "2021";
        sha256 = "127lmg29wz42jcvsb2ls8k3q21x5nrxm9syawjmagjv9478z0xf7";
        libName = "ark_bls12_381";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "default" "scalar_field" ];
      };
      "ark-ec" = rec {
        crateName = "ark-ec";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fkh0rswp4d5rn4hmmbibz2wh6x6k3sp21faijb29b2nkm1rmzfy";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "default" "parallel" "rayon" "std" ];
      };
      "ark-ff 0.3.0" = rec {
        crateName = "ark-ff";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1mjxq12li803n31jznhblnl16rxlswm5lmrcmym14ypf8763ackb";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.3.0";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.3.0";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.3.3";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-ff 0.4.2" = rec {
        crateName = "ark-ff";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fk6546nddgs3lsnv1s06fh8mnik5h1ijmck928d4jpla3w7m17c";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.4.2";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.4.2";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
        resolvedDefaultFeatures = [ "asm" "default" "parallel" "rayon" "std" ];
      };
      "ark-ff-asm 0.3.0" = rec {
        crateName = "ark-ff-asm";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0i3fdiw7xl9k708zkbh0jr2w8jqwxqdd68ix9m0gnhv6py8d60nv";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-asm 0.4.2" = rec {
        crateName = "ark-ff-asm";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0j13p6ymma3ypbjipfkc937pn57as8qpwgrpg5nvrl2mw97smm1y";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.3.0" = rec {
        crateName = "ark-ff-macros";
        version = "0.3.0";
        edition = "2018";
        sha256 = "084bqfx24wlhbwsb67hnz3vamamw2pgyz7h0b2033jwcl2adfbyv";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.4.2" = rec {
        crateName = "ark-ff-macros";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0ra5a4paqbqqlc9a3cnwkwxh7l1411wsnna1az28k218wjq7kgks";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-poly" = rec {
        crateName = "ark-poly";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1gw6zrbl1rx1jwcnwwaq2p727fda66yaipxsrjcxi1g19v2by86k";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            usesDefaultFeatures = false;
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" ];
        };
      };
      "ark-serialize 0.3.0" = rec {
        crateName = "ark-serialize";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0wg65smr5m086j58v5xajn4vik60mn1kmrsk5260zqg6iqqjnv0x";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-std";
            packageId = "ark-std 0.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-serialize 0.4.2" = rec {
        crateName = "ark-serialize";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1992x2cd05pw3v5hfqnb8114g2cwdk3cmmcvz0i2ygdq09dbidxd";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "default" "derive" "std" ];
      };
      "ark-serialize-derive" = rec {
        crateName = "ark-serialize-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1sl2yrpk88v4lfgkblwgd2yqa89hw48jbd9jmx4ybmqgdny82cmf";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "ark-std 0.3.0" = rec {
        crateName = "ark-std";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0z2fbjicajga7skmrysx0nqjivmcnbyh03npn4la1ifb569c1whx";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-std 0.4.0" = rec {
        crateName = "ark-std";
        version = "0.4.0";
        edition = "2021";
        sha256 = "11aigd20y0x9l3mw1bxsrgklzbscn86lrp78mmjbgskf1hg3z2cl";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
        resolvedDefaultFeatures = [ "parallel" "rayon" "std" ];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "ascii-canvas" = rec {
        crateName = "ascii-canvas";
        version = "3.0.0";
        edition = "2018";
        sha256 = "1in38ziqn4kh9sw89ys4naaqzvvjscfs0m4djqbfq7455v5fq948";
        libName = "ascii_canvas";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "term";
            packageId = "term";
          }
        ];

      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.88";
        edition = "2021";
        sha256 = "1dgxvz7g75cmz6vqqz0mri4xazc6a8xfj1db6r9fxz29lzyd6fg5";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "async_io_stream" = rec {
        crateName = "async_io_stream";
        version = "0.3.3";
        edition = "2021";
        sha256 = "0k5rv51935p3il74q59hwaaid6sy9kv05vz3lw48jpgkrpgbkmxn";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pharos";
            packageId = "pharos";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "map_pharos" = [ "pharos" ];
          "pharos" = [ "dep:pharos" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_io" = [ "tokio" ];
        };
        resolvedDefaultFeatures = [ "map_pharos" "pharos" ];
      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "auto_impl" = rec {
        crateName = "auto_impl";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1rzysfb0zpwsi2lg043fj596xj2a4xir2lc0fd17im64vc5vgp7z";
        procMacro = true;
        authors = [
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" "visit-mut" ];
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "autotools" = rec {
        crateName = "autotools";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1kwmqzdpgmy50dr8pzx0029f5iszrma826ji93fw03qvqhkib57g";
        authors = [
          "Luca Barbato <lu_zero@gentoo.org>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "axum 0.6.20" = rec {
        crateName = "axum";
        version = "0.6.20";
        edition = "2021";
        sha256 = "1gynqkg3dcy1zd7il69h8a3zax86v6qq5zpawqyn87mr6979x0iv";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core 0.3.4";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            features = [ "stream" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "matchit";
            packageId = "matchit";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 0.1.2";
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            rename = "tower";
            features = [ "util" "timeout" "limit" "load-shed" "steer" "filter" ];
          }
        ];
        features = {
          "__private_docs" = [ "tower/full" "dep:tower-http" ];
          "default" = [ "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" ];
          "form" = [ "dep:serde_urlencoded" ];
          "headers" = [ "dep:headers" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "json" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [ "dep:tokio" "hyper/server" "hyper/tcp" "hyper/runtime" "tower/make" ];
          "tower-log" = [ "tower/log" ];
          "tracing" = [ "dep:tracing" "axum-core/tracing" ];
          "ws" = [ "tokio" "dep:tokio-tungstenite" "dep:sha1" "dep:base64" ];
        };
      };
      "axum 0.7.9" = rec {
        crateName = "axum";
        version = "0.7.9";
        edition = "2021";
        sha256 = "07z7wqczi9i8xb4460rvn39p4wjqwr32hx907crd1vwb2fy8ijpd";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core 0.4.5";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" "server" "service" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "matchit";
            packageId = "matchit";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = [ "raw_value" ];
          }
          {
            name = "serde_path_to_error";
            packageId = "serde_path_to_error";
            optional = true;
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.2";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            optional = true;
            features = [ "time" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "net" "test-util" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            rename = "tower";
            features = [ "util" "timeout" "limit" "load-shed" "steer" "filter" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "__private_docs" = [ "axum-core/__private_docs" "tower/full" "dep:tower-http" ];
          "default" = [ "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" ];
          "form" = [ "dep:serde_urlencoded" ];
          "http1" = [ "dep:hyper" "hyper?/http1" "hyper-util?/http1" ];
          "http2" = [ "dep:hyper" "hyper?/http2" "hyper-util?/http2" ];
          "json" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [ "dep:hyper-util" "dep:tokio" "tokio/net" "tokio/rt" "tower/make" "tokio/macros" ];
          "tower-log" = [ "tower/log" ];
          "tracing" = [ "dep:tracing" "axum-core/tracing" ];
          "ws" = [ "dep:hyper" "tokio" "dep:tokio-tungstenite" "dep:sha1" "dep:base64" ];
        };
        resolvedDefaultFeatures = [ "default" "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" ];
      };
      "axum-core 0.3.4" = rec {
        crateName = "axum-core";
        version = "0.3.4";
        edition = "2021";
        sha256 = "0b1d9nkqb8znaba4qqzxzc968qwj4ybn4vgpyz9lz4a7l9vsb7vm";
        libName = "axum_core";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "__private_docs" = [ "dep:tower-http" ];
          "tracing" = [ "dep:tracing" ];
        };
      };
      "axum-core 0.4.5" = rec {
        crateName = "axum-core";
        version = "0.4.5";
        edition = "2021";
        sha256 = "16b1496c4gm387q20hkv5ic3k5bd6xmnvk50kwsy6ymr8rhvvwh9";
        libName = "axum_core";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.2";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "__private_docs" = [ "dep:tower-http" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "base16ct 0.1.1" = rec {
        crateName = "base16ct";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1klccxr7igf73wpi0x3asjd8n0xjg0v6a7vxgvfk5ybvgh1hd6il";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
      };
      "base16ct 0.2.0" = rec {
        crateName = "base16ct";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1kylrjhdzk7qpknrvlphw8ywdnvvg39dizw9622w3wk5xba04zsc";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "base64 0.13.1" = rec {
        crateName = "base64";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1s494mqmzjb766fy1kqlccgfg2sdcjb6hzbvzqv2jw65fdi5h6wy";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.8.0";
        edition = "2024";
        sha256 = "1fj4vc6ghy3j1120r7dwn4xw90crfy46b448g5pm9w6an13qn92m";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "bech32 0.11.0" = rec {
        crateName = "bech32";
        version = "0.11.0";
        edition = "2018";
        sha256 = "07cmbj8ynqpj01wzj4pgj27i2c6n66gf8zma8k6xxdz3jrhl8rfr";
        authors = [
          "Clark Moody"
          "Andrew Poelstra"
          "Tobin Harding"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bech32 0.9.1" = rec {
        crateName = "bech32";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0igl565rfpxwbh0g36cb7469sjkiap8yd21kcr0ppi2jfbwr6syq";
        authors = [
          "Clark Moody"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bimap" = rec {
        crateName = "bimap";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1xx4dns6hj0mf1sl47lh3r0z4jcvmhqhsr7qacjs69d3lqf5y313";
        authors = [
          "Billy Rieger <wrieger@protonmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.69.5";
        edition = "2018";
        sha256 = "1240snlcfj663k04bjsg629g4wx6f83flgbjh5rzpgyagk3864r7";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
            features = [ "verbatim" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-perl" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
          {
            name = "which";
            packageId = "which";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "logging" "prettyplease" "runtime" "which-rustfmt" ];
          "experimental" = [ "dep:annotate-snippets" ];
          "logging" = [ "dep:log" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
          "which-rustfmt" = [ "dep:which" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "prettyplease" "runtime" "which-rustfmt" ];
      };
      "bip32" = rec {
        crateName = "bip32";
        version = "0.4.0";
        edition = "2021";
        sha256 = "12vrpxl8pnrcj413wgi7c4ra4qavp6p970kc4rx4hyj3z3bd23mk";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58 0.4.0";
            usesDefaultFeatures = false;
            features = [ "check" ];
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.11.6";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" "sha256" "keccak256" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "ripemd";
            packageId = "ripemd";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "bip39" = [ "mnemonic" "pbkdf2" "std" ];
          "default" = [ "bip39" "secp256k1" "std" ];
          "k256" = [ "dep:k256" ];
          "mnemonic" = [ "alloc" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "pbkdf2" = [ "dep:pbkdf2" ];
          "secp256k1" = [ "k256" ];
          "secp256k1-ffi" = [ "dep:secp256k1-ffi" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bip39" "k256" "mnemonic" "once_cell" "pbkdf2" "secp256k1" "std" ];
      };
      "bit-set 0.5.3" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec 0.6.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
      };
      "bit-set 0.8.0" = rec {
        crateName = "bit-set";
        version = "0.8.0";
        edition = "2015";
        sha256 = "18riaa10s6n59n39vix0cr7l2dgwdhcpbcm97x1xbyfp1q47x008";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec 0.8.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "bit-vec/serde" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec 0.6.3" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
      };
      "bit-vec 0.8.0" = rec {
        crateName = "bit-vec";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1xxa1s2cj291r7k1whbxq840jxvmdsq9xgh7bvrxl46m80fllxjy";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "borsh_std" = [ "borsh/std" ];
          "default" = [ "std" ];
          "miniserde" = [ "dep:miniserde" ];
          "nanoserde" = [ "dep:nanoserde" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.9.1" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bitvec" = rec {
        crateName = "bitvec";
        version = "1.0.1";
        edition = "2021";
        sha256 = "173ydyj2q5vwj88k6xgjnfsshs4x9wbvjjv7sm0h36r34hn87hhv";
        dependencies = [
          {
            name = "funty";
            packageId = "funty";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "atomic" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "atomic" "default" "std" ];
      };
      "blake2" = rec {
        crateName = "blake2";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1zlf7w7gql12v61d9jcbbswa3dw8qxsjglylsiljp9f9b3a2ll26";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "1.0.3";
        edition = "2021";
        sha256 = "16cxmm4pr5jx9xc0msj1qn018ram3vz9k17cj57r97hm1fi07s86";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.3.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon-core" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "rayon" "std" ];
      };
      "block-buffer 0.10.4" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];

      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
        };
      };
      "bls12_381" = rec {
        crateName = "bls12_381";
        version = "0.7.1";
        edition = "2021";
        sha256 = "0hary1bvjyiwkarfrj5gnmw1aa81chx43khmnlpwrrrpfjkrdhd3";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pairing";
            packageId = "pairing";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" ];
          "bits" = [ "ff/bits" ];
          "default" = [ "groups" "pairings" "alloc" "bits" ];
          "digest" = [ "dep:digest" ];
          "experimental" = [ "digest" ];
          "group" = [ "dep:group" ];
          "groups" = [ "group" ];
          "nightly" = [ "subtle/nightly" ];
          "pairing" = [ "dep:pairing" ];
          "pairings" = [ "groups" "pairing" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "default" "group" "groups" "pairing" "pairings" ];
      };
      "blst" = rec {
        crateName = "blst";
        version = "0.3.14";
        edition = "2018";
        links = "blst";
        sha256 = "13dk7l8d9w0b4vmm7rm7lqlaqrrsa4rh6rw7p30f7bczc6a9mis7";
        authors = [
          "sean-sn <sean@supranational.net>"
        ];
        dependencies = [
          {
            name = "threadpool";
            packageId = "threadpool";
            target = { target, features }: (!(("wasm32" == target."arch" or null) || ("none" == target."os" or null) || ("unknown" == target."os" or null) || ("uefi" == target."os" or null)));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde-secret" = [ "serde" ];
        };
      };
      "bnum" = rec {
        crateName = "bnum";
        version = "0.11.0";
        edition = "2021";
        sha256 = "1457svpk7q3wwnfldzqkzfnifqvnvpnpzkx8p342mrkf7wcflc9y";
        authors = [
          "isaac-holt <isaac_holt@icloud.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "num-integer" = [ "dep:num-integer" ];
          "num-traits" = [ "dep:num-traits" ];
          "numtraits" = [ "num-integer" "num-traits" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "serde-big-array" ];
          "serde-big-array" = [ "dep:serde-big-array" ];
          "valuable" = [ "dep:valuable" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bonsai-sdk" = rec {
        crateName = "bonsai-sdk";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0ql7mm42b8sjpr9qw4l2d7ihmn4ivx8l4mmn8rcrhxqrw69107a4";
        libName = "bonsai_sdk";
        dependencies = [
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            features = [ "json" "blocking" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "async" = [ "dep:tokio" ];
          "default" = [ "std" ];
        };
      };
      "borsh" = rec {
        crateName = "borsh";
        version = "0.10.4";
        edition = "2018";
        crateBin = [];
        sha256 = "1vkgajwrpncr46hk6nn8j3382jffkpy9xhcisfxdwb5n9vb58phi";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "rc" "std" ];
      };
      "borsh-derive" = rec {
        crateName = "borsh-derive";
        version = "0.10.4";
        edition = "2018";
        sha256 = "12gg3kgi6gi4qlqrxlccpnhffsxsb8scbqlnss6rj8wl1pw164l3";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "borsh-derive-internal";
            packageId = "borsh-derive-internal";
          }
          {
            name = "borsh-schema-derive-internal";
            packageId = "borsh-schema-derive-internal";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 0.1.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-derive-internal" = rec {
        crateName = "borsh-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1cvn16046101px9b98i3np95rmrwvzbi63d7l957362cci8bmmk5";
        libName = "borsh_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-schema-derive-internal" = rec {
        crateName = "borsh-schema-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1m5nldxh5ji4hxw7g3zlm6xqwj4f2j32nsg6hfz2fd06dzcr2ri7";
        libName = "borsh_schema_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "bs58 0.4.0" = rec {
        crateName = "bs58";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1lr3vwzhhyica4y7rbkf26vr1h7vpjb1m6rml8zcqgw81c2y07vp";
        authors = [
          "Wim Looman <wim@nemo157.com>"
        ];
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "check" "sha2" ];
      };
      "bs58 0.5.1" = rec {
        crateName = "bs58";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1x3v51n5n2s3l0rgrsn142akdf331n2qsa75pscw71fi848vm25z";
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "grab_spare_slice" ];
          }
        ];
        devDependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "rustc_1_55" ];
          }
        ];
        features = {
          "alloc" = [ "tinyvec?/alloc" ];
          "cb58" = [ "sha2" ];
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tinyvec?/std" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "check" "default" "sha2" "std" ];
      };
      "buf-fs" = rec {
        crateName = "buf-fs";
        version = "0.1.2";
        edition = "2024";
        sha256 = "11haxi88wplrk83qp4rrwp1q3j28fdz7xwmaks9p9y6pxwwck02i";
        libName = "buf_fs";
        authors = [
          "Victor Lopez <vhrlopes@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-sdmmc";
            packageId = "embedded-sdmmc";
            usesDefaultFeatures = false;
          }
          {
            name = "relative-path";
            packageId = "relative-path";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];

      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.17.0";
        edition = "2021";
        sha256 = "1gxxsn2fsjmv03g8p3m749mczv2k4m8xspifs5l7bcx0vx3gna0n";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-slice-cast" = rec {
        crateName = "byte-slice-cast";
        version = "1.2.3";
        edition = "2018";
        sha256 = "178c6ghnqwq472xypxabk27kjid01qxifw3bff8nj63jf8pihxbm";
        libName = "byte_slice_cast";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.0";
        edition = "2018";
        sha256 = "134mywp7bqm252c851h3bny75g0l5kw99738a1mkcjyf07pscd4i";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn" ];
          "must_cast_extra" = [ "must_cast" ];
        };
        resolvedDefaultFeatures = [ "bytemuck_derive" "derive" "extern_crate_alloc" ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.9.3";
        edition = "2018";
        sha256 = "18g1r1zgwiz5px2kf1n55ibjb2aqm86nkw28ss1mn85k94xjgk3y";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "extra-platforms" = [ "dep:extra-platforms" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "bzip2" = rec {
        crateName = "bzip2";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1y27wgqkx3k2jmh4k26vra2kqjq1qc1asww8hac3cv1zxyk1dcdx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "futures" = [ "dep:futures" ];
          "static" = [ "bzip2-sys/static" ];
          "tokio" = [ "tokio-io" "futures" ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "bzip2-sys" = rec {
        crateName = "bzip2-sys";
        version = "0.1.13+1.0.8";
        edition = "2015";
        links = "bzip2";
        sha256 = "056c39pgjh4272bdslv445f5ry64xvb0f7nph3z7860ln8rzynr2";
        libName = "bzip2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
      };
      "c-kzg" = rec {
        crateName = "c-kzg";
        version = "1.0.3";
        edition = "2021";
        links = "ckzg";
        sha256 = "0a49iq6vjk656rzkbwcs2ch6x7qm6iqsa0xqdwrh0cxbzrr7yc7h";
        build = "bindings/rust/build.rs";
        libName = "c_kzg";
        libPath = "bindings/rust/src/lib.rs";
        dependencies = [
          {
            name = "blst";
            packageId = "blst";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" "portable" "ethereum_kzg_settings" ];
          "ethereum_kzg_settings" = [ "dep:once_cell" ];
          "generate-bindings" = [ "dep:bindgen" ];
          "no-threads" = [ "blst/no-threads" ];
          "portable" = [ "blst/portable" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "hex/std" "libc/std" "serde?/std" "once_cell?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "camino" = rec {
        crateName = "camino";
        version = "1.1.10";
        edition = "2018";
        sha256 = "1asw3160i5x2r98lsfym3my8dps0fyk25qi206bddn3i271mp90d";
        authors = [
          "Without Boats <saoirse@without.boats>"
          "Ashley Williams <ashley666ashley@gmail.com>"
          "Steve Klabnik <steve@steveklabnik.com>"
          "Rain <rain@sunshowers.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "proptest" = [ "dep:proptest" ];
          "proptest1" = [ "proptest" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde1" ];
      };
      "cargo-platform" = rec {
        crateName = "cargo-platform";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1sinpmqjdk3q9llbmxr0h0nyvqrif1r5qs34l000z73b024z2np3";
        libName = "cargo_platform";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "cargo_metadata" = rec {
        crateName = "cargo_metadata";
        version = "0.18.1";
        edition = "2018";
        sha256 = "0drh0zndl4qgndy6kg6783cydbvhxgv0hcg7d9hhqx0zwi3nb21d";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "camino";
            packageId = "camino";
            features = [ "serde1" ];
          }
          {
            name = "cargo-platform";
            packageId = "cargo-platform";
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "unbounded_depth" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "builder" = [ "derive_builder" ];
          "derive_builder" = [ "dep:derive_builder" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cast" = rec {
        crateName = "cast";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1dbyngbyz2qkk0jn2sxil8vrz3rnpcj142y184p9l4nbl9radcip";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
        };
      };
      "causality-api" = rec {
        crateName = "causality-api";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-api; };
        libName = "causality_api";
        authors = [
          "Timewave Team <thetimewaves@proton.me>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "causality-compiler";
            packageId = "causality-compiler";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "causality-runtime";
            packageId = "causality-runtime";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "serde" "serde" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "rt-multi-thread" "sync" "macros" "full" ];
          }
          {
            name = "uuid";
            packageId = "uuid 1.17.0";
            features = [ "v4" "serde" ];
          }
          {
            name = "valence-coprocessor-client";
            packageId = "valence-coprocessor-client";
          }
          {
            name = "valence-core";
            packageId = "valence-core";
          }
          {
            name = "valence-cosmos";
            packageId = "valence-cosmos";
          }
          {
            name = "valence-domain-clients";
            packageId = "valence-domain-clients";
            usesDefaultFeatures = false;
            features = [ "ethereum" "neutron" ];
          }
          {
            name = "valence-evm";
            packageId = "valence-evm";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "rt-multi-thread" "sync" "macros" "full" "macros" "test-util" ];
          }
        ];
        features = {
          "ocaml" = [ "ffi" ];
        };
        resolvedDefaultFeatures = [ "default" "ethereum" "ffi" "neutron" "ocaml" ];
      };
      "causality-cli" = rec {
        crateName = "causality-cli";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "causality";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-cli; };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "causality-compiler";
            packageId = "causality-compiler";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "causality-runtime";
            packageId = "causality-runtime";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "ethereum_ssz";
            packageId = "ethereum_ssz";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum_ssz_derive";
            packageId = "ethereum_ssz_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indicatif";
            packageId = "indicatif 0.16.2";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "rt-multi-thread" "sync" "macros" "full" "macros" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "causality-compiler" = rec {
        crateName = "causality-compiler";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "test_e2e";
            path = "src/bin/test_e2e.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-compiler; };
        libName = "causality_compiler";type = [ "rlib" "cdylib" ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "causality-lisp";
            packageId = "causality-lisp";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "causality-core" = rec {
        crateName = "causality-core";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-core; };
        libName = "causality_core";
        authors = [
          "TimeWave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "criterion";
            packageId = "criterion";
            optional = true;
          }
          {
            name = "dashu";
            packageId = "dashu";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "ethereum_ssz";
            packageId = "ethereum_ssz";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum_ssz_derive";
            packageId = "ethereum_ssz_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "frunk";
            packageId = "frunk";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "inventory";
            packageId = "inventory";
          }
          {
            name = "lexpr";
            packageId = "lexpr";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "rt" "rt-multi-thread" "sync" "macros" ];
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "ethereum_ssz";
            packageId = "ethereum_ssz";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum_ssz_derive";
            packageId = "ethereum_ssz_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "rt-multi-thread" "sync" "macros" "macros" "rt" ];
          }
        ];
        features = {
          "benchmarks" = [ "dep:criterion" ];
          "default" = [ "std" "getrandom" "serde" "sexpr" ];
          "getrandom" = [ "dep:getrandom" ];
          "lexpr" = [ "dep:lexpr" ];
          "serde" = [ "dep:serde" "serde/derive" "dep:serde_json" ];
          "sexpr" = [ "lexpr" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "benchmarks" "default" "getrandom" "lexpr" "serde" "sexpr" "std" "tokio" ];
      };
      "causality-lisp" = rec {
        crateName = "causality-lisp";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-lisp; };
        libName = "causality_lisp";
        authors = [
          "Causality Team"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "criterion";
            packageId = "criterion";
          }
        ];

      };
      "causality-runtime" = rec {
        crateName = "causality-runtime";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-runtime; };
        libName = "causality_runtime";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "causality-zk";
            packageId = "causality-zk";
          }
          {
            name = "ethereum_ssz";
            packageId = "ethereum_ssz";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "rt" "rt-multi-thread" "sync" "macros" ];
          }
        ];
        devDependencies = [
          {
            name = "env_logger";
            packageId = "env_logger";
          }
        ];
        features = {
          "async" = [ "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "tokio" ];
      };
      "causality-simulation" = rec {
        crateName = "causality-simulation";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-simulation; };
        libName = "causality_simulation";
        authors = [
          "Causality Team"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "causality-lisp";
            packageId = "causality-lisp";
          }
          {
            name = "causality-toolkit";
            packageId = "causality-toolkit";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "causality-toolkit" = rec {
        crateName = "causality-toolkit";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-toolkit; };
        libName = "causality_toolkit";
        authors = [
          "Causality Team"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "ethereum_ssz";
            packageId = "ethereum_ssz";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum_ssz_derive";
            packageId = "ethereum_ssz_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" "macros" "rt-multi-thread" ];
          }
        ];

      };
      "causality-zk" = rec {
        crateName = "causality-zk";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/causality-zk; };
        libName = "causality_zk";
        authors = [
          "Causality Team"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "causality-core";
            packageId = "causality-core";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            features = [ "json" ];
          }
          {
            name = "risc0-zkvm";
            packageId = "risc0-zkvm";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sp1-sdk";
            packageId = "sp1-sdk";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "uuid";
            packageId = "uuid 1.17.0";
            features = [ "v4" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "rt-multi-thread" "sync" "macros" ];
          }
        ];
        features = {
          "default" = [ "mock" ];
          "risc0" = [ "risc0-zkvm" ];
          "risc0-zkvm" = [ "dep:risc0-zkvm" ];
          "sp1" = [ "sp1-sdk" ];
          "sp1-sdk" = [ "dep:sp1-sdk" ];
        };
        resolvedDefaultFeatures = [ "default" "mock" "risc0" "risc0-zkvm" "sp1" "sp1-sdk" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.25";
        edition = "2018";
        sha256 = "0la999i153miffa4maj2wk5z679zkmnq6np0q1kwqrg8q5yqkz6h";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0rl77bwhs5p979ih4r0202cn5jrfsrbgrksp40lkfz5vk1x3ib3g";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.41";
        edition = "2021";
        sha256 = "0k8wy2mph0mgipq28vv3wirivhb31pqs7jyid0dzjivz0i9djsf4";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-link" ];
          "windows-link" = [ "dep:windows-link" ];
        };
        resolvedDefaultFeatures = [ "alloc" "android-tzdata" "clock" "default" "iana-time-zone" "js-sys" "now" "oldtime" "serde" "std" "wasm-bindgen" "wasmbind" "winapi" "windows-link" ];
      };
      "ciborium" = rec {
        crateName = "ciborium";
        version = "0.2.2";
        edition = "2021";
        sha256 = "03hgfw4674im1pdqblcp77m7rc8x2v828si5570ga5q9dzyrzrj2";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = [ "alloc" ];
          }
          {
            name = "ciborium-ll";
            packageId = "ciborium-ll";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ciborium-io/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ciborium-io" = rec {
        crateName = "ciborium-io";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0my7s5g24hvp1rs1zd1cxapz94inrvqpdf1rslrvxj8618gfmbq5";
        libName = "ciborium_io";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ciborium-ll" = rec {
        crateName = "ciborium-ll";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1n8g4j5rwkfs3rzfi6g1p7ngmz6m5yxsksryzf5k72ll7mjknrjp";
        libName = "ciborium_ll";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "alloc" "half/std" ];
        };
      };
      "cipher" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-padding" = [ "inout/block-padding" ];
          "dev" = [ "blobby" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" "inout/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "1.8.1";
        edition = "2021";
        links = "clang";
        sha256 = "1x1r9yqss76z8xwpdanw313ss6fniwc1r7dzb5ycjn0ph53kj0hb";
        libName = "clang_sys";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_10_0" = [ "clang_9_0" ];
          "clang_11_0" = [ "clang_10_0" ];
          "clang_12_0" = [ "clang_11_0" ];
          "clang_13_0" = [ "clang_12_0" ];
          "clang_14_0" = [ "clang_13_0" ];
          "clang_15_0" = [ "clang_14_0" ];
          "clang_16_0" = [ "clang_15_0" ];
          "clang_17_0" = [ "clang_16_0" ];
          "clang_18_0" = [ "clang_17_0" ];
          "clang_3_6" = [ "clang_3_5" ];
          "clang_3_7" = [ "clang_3_6" ];
          "clang_3_8" = [ "clang_3_7" ];
          "clang_3_9" = [ "clang_3_8" ];
          "clang_4_0" = [ "clang_3_9" ];
          "clang_5_0" = [ "clang_4_0" ];
          "clang_6_0" = [ "clang_5_0" ];
          "clang_7_0" = [ "clang_6_0" ];
          "clang_8_0" = [ "clang_7_0" ];
          "clang_9_0" = [ "clang_8_0" ];
          "libloading" = [ "dep:libloading" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_3_5" "clang_3_6" "clang_3_7" "clang_3_8" "clang_3_9" "clang_4_0" "clang_5_0" "clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.39";
        edition = "2021";
        crateBin = [];
        sha256 = "17raqwxkhhhm80iyblp1v83fvpddkg7rgqr2cjsmz3p6kczfcq7x";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-markdown" = [ "clap_derive/unstable-markdown" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "env" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.39";
        edition = "2021";
        sha256 = "0lggb5vscs21jliisvjjphcazzb1iw8347yp42wbwazpl6967k49";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim 0.11.1";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" "unstable-ext" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "env" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.32";
        edition = "2021";
        sha256 = "1mqcag8qapb5yhygg2hi153kzmbf7w5hqp3nl3fvl5cn4yp6l5q9";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-markdown" = [ "dep:pulldown-cmark" "dep:anstyle" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.4";
        edition = "2021";
        sha256 = "19nwfls5db269js5n822vkc8dw0wjq2h1wf0hgr06ld2g52d2spl";

      };
      "cobs" = rec {
        crateName = "cobs";
        version = "0.2.3";
        edition = "2018";
        sha256 = "05gd16mws4yd63h8jr3p08in8y8w21rpjp5jb55hzl9bgalh5fk7";
        authors = [
          "Allen Welkie <>"
          "James Munns <james.munns@ferrous-systems.com>"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "coins-bip32 0.12.0" = rec {
        crateName = "coins-bip32";
        version = "0.12.0";
        edition = "2021";
        sha256 = "025zbsgqjihqy3rd6lb8jgvhfw2dn6bqninx010fsyklj62nfwr0";
        libName = "coins_bip32";
        authors = [
          "Summa <team@summa.one>"
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
          }
          {
            name = "coins-core";
            packageId = "coins-core 0.12.0";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            features = [ "std" "arithmetic" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "default" = [ "mainnet" ];
        };
        resolvedDefaultFeatures = [ "default" "mainnet" ];
      };
      "coins-bip32 0.8.7" = rec {
        crateName = "coins-bip32";
        version = "0.8.7";
        edition = "2018";
        sha256 = "1lqsn2bh05mhqyd6ingzddh6ghlnvd6zd51i3y0wv610vyjy8srv";
        libName = "coins_bip32";
        authors = [
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
          }
          {
            name = "coins-core";
            packageId = "coins-core 0.8.7";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            features = [ "std" "arithmetic" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "default" = [ "mainnet" ];
        };
        resolvedDefaultFeatures = [ "default" "mainnet" ];
      };
      "coins-bip39 0.12.0" = rec {
        crateName = "coins-bip39";
        version = "0.12.0";
        edition = "2021";
        sha256 = "1m6rss1pdprifvpjkw9rvy020d0m9zz3k99pvgligzr3csr6kcbl";
        libName = "coins_bip39";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
          "James Prestwich <james@prestwi.ch>"
          "0xYYY <0xYYY@pm.me>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32 0.12.0";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "all-langs" = [ "chinese-simplified" "chinese-traditional" "czech" "english" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
          "chinese-simplified" = [ "dep:once_cell" ];
          "chinese-traditional" = [ "dep:once_cell" ];
          "czech" = [ "dep:once_cell" ];
          "default" = [ "all-langs" ];
          "english" = [ "dep:once_cell" ];
          "french" = [ "dep:once_cell" ];
          "italian" = [ "dep:once_cell" ];
          "japanese" = [ "dep:once_cell" ];
          "korean" = [ "dep:once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "portuguese" = [ "dep:once_cell" ];
          "spanish" = [ "dep:once_cell" ];
        };
        resolvedDefaultFeatures = [ "english" ];
      };
      "coins-bip39 0.8.7" = rec {
        crateName = "coins-bip39";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0a1528zylpy90s71y5i9105rd2xnkq1p8h40gm7w0gff16jgpf1x";
        libName = "coins_bip39";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
          "James Prestwich <james@prestwi.ch>"
          "0xYYY <0xYYY@pm.me>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32 0.8.7";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "all-langs" = [ "chinese-simplified" "chinese-traditional" "czech" "english" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
          "chinese-simplified" = [ "dep:once_cell" ];
          "chinese-traditional" = [ "dep:once_cell" ];
          "czech" = [ "dep:once_cell" ];
          "default" = [ "all-langs" ];
          "english" = [ "dep:once_cell" ];
          "french" = [ "dep:once_cell" ];
          "italian" = [ "dep:once_cell" ];
          "japanese" = [ "dep:once_cell" ];
          "korean" = [ "dep:once_cell" ];
          "portuguese" = [ "dep:once_cell" ];
          "spanish" = [ "dep:once_cell" ];
        };
        resolvedDefaultFeatures = [ "all-langs" "chinese-simplified" "chinese-traditional" "czech" "default" "english" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
      };
      "coins-core 0.12.0" = rec {
        crateName = "coins-core";
        version = "0.12.0";
        edition = "2021";
        sha256 = "0ns72dnwr7qfq7s67nagvm4fg6ms29w3g1sfw4l3mr25hnnn5fb2";
        libName = "coins_core";
        authors = [
          "Summa <team@summa.one>"
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
            features = [ "check" ];
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "ripemd";
            packageId = "ripemd";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "coins-core 0.8.7" = rec {
        crateName = "coins-core";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0ya9szvxzaimwzbfik4b3lrf08mqz6fzhd77gdzkdy117j2a11jj";
        libName = "coins_core";
        authors = [
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
            features = [ "check" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "ripemd";
            packageId = "ripemd";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0x8ymkz1xr77rcj1cfanhf416pc4v681gmkc9dzb3jqja7f62nxh";

      };
      "colored" = rec {
        crateName = "colored";
        version = "2.2.0";
        edition = "2021";
        sha256 = "0g6s7j2qayjd7i3sivmwiawfdg8c8ldy0g2kl4vwk1yk16hjaxqi";
        authors = [
          "Thomas Wickham <mackwic@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];
        features = {
        };
      };
      "console" = rec {
        crateName = "console";
        version = "0.15.11";
        edition = "2021";
        sha256 = "1n5gmsjk6isbnw6qss043377kln20lfwlmdk3vswpwpr21dwnk05";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "unicode-width" ];
      };
      "const-hex" = rec {
        crateName = "const-hex";
        version = "1.14.1";
        edition = "2021";
        sha256 = "1zq7c8f5x8g88yynp6zkgbv7igb5scpzfx5j7n6s95hbsh72xql3";
        libName = "const_hex";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "__fuzzing" = [ "dep:proptest" "std" ];
          "alloc" = [ "hex?/alloc" "serde?/alloc" "proptest?/alloc" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "serde" = [ "hex?/serde" "dep:serde" ];
          "std" = [ "hex?/std" "serde?/std" "proptest?/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "core-error" "default" "hex" "serde" "std" ];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
        };
      };
      "const_format" = rec {
        crateName = "const_format";
        version = "0.2.34";
        edition = "2021";
        sha256 = "1pb3vx4k0bl3cy45fmba36hzds1jhkr8y9k3j5nnvm4abjb9fvqj";
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "const_format_proc_macros";
            packageId = "const_format_proc_macros";
          }
        ];
        features = {
          "__debug" = [ "const_format_proc_macros/debug" ];
          "__inline_const_pat_tests" = [ "__test" "fmt" ];
          "__only_new_tests" = [ "__test" ];
          "all" = [ "fmt" "derive" "rust_1_64" "assert" ];
          "assert" = [ "assertc" ];
          "assertc" = [ "fmt" "assertcp" ];
          "assertcp" = [ "rust_1_51" ];
          "const_generics" = [ "rust_1_51" ];
          "constant_time_as_str" = [ "fmt" ];
          "derive" = [ "fmt" "const_format_proc_macros/derive" ];
          "fmt" = [ "rust_1_83" ];
          "konst" = [ "dep:konst" ];
          "more_str_macros" = [ "rust_1_64" ];
          "nightly_const_generics" = [ "const_generics" ];
          "rust_1_64" = [ "rust_1_51" "konst" "konst/rust_1_64" ];
          "rust_1_83" = [ "rust_1_64" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "const_format_proc_macros" = rec {
        crateName = "const_format_proc_macros";
        version = "0.2.34";
        edition = "2021";
        sha256 = "0i3pxxcl4xvwq4mlfg3csb4j0n6v0mhj07p6yk0vlvdirznc4mqx";
        procMacro = true;
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "all" = [ "derive" ];
          "debug" = [ "syn/extra-traits" ];
          "derive" = [ "syn" "syn/derive" "syn/printing" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq 0.1.5" = rec {
        crateName = "constant_time_eq";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1g3vp04qzmk6cpzrd19yci6a95m7ap6wy7wkwgiy2pjklklrfl14";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];

      };
      "constant_time_eq 0.3.1" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "convert_case" = rec {
        crateName = "convert_case";
        version = "0.4.0";
        edition = "2018";
        sha256 = "03jaf1wrsyqzcaah9jf8l1iznvdw5mlsca2qghhzr9w27sddaib2";
        authors = [
          "David Purdum <purdum41@gmail.com>"
        ];
        features = {
          "rand" = [ "dep:rand" ];
          "random" = [ "rand" ];
        };
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "cosmos-sdk-proto 0.20.0" = rec {
        crateName = "cosmos-sdk-proto";
        version = "0.20.0";
        edition = "2021";
        sha256 = "0dr2hmkwsnaiqf889af1hf03s89pcvvq4wihzn8mfdjcmc206mij";
        libName = "cosmos_sdk_proto";
        authors = [
          "Justin Kilpatrick <justin@althea.net>"
          "Greg Szabo <greg@informal.systems>"
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.34.1";
          }
        ];
        features = {
          "default" = [ "grpc-transport" ];
          "grpc" = [ "tonic" ];
          "grpc-transport" = [ "grpc" "tonic/transport" ];
          "tonic" = [ "dep:tonic" ];
        };
      };
      "cosmos-sdk-proto 0.23.0" = rec {
        crateName = "cosmos-sdk-proto";
        version = "0.23.0";
        edition = "2021";
        sha256 = "1sqb3qn0fmr9aszvzh11xddi8hwgqjnr3j19i9xqx31b26mn6bwb";
        libName = "cosmos_sdk_proto";
        authors = [
          "Justin Kilpatrick <justin@althea.net>"
          "Greg Szabo <greg@informal.systems>"
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.38.1";
          }
          {
            name = "tonic";
            packageId = "tonic 0.12.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "codegen" "prost" ];
          }
        ];
        features = {
          "default" = [ "grpc-transport" ];
          "grpc" = [ "std" "tonic" ];
          "grpc-transport" = [ "grpc" "tonic/transport" ];
          "std" = [ "prost/std" "prost-types/std" ];
          "tonic" = [ "dep:tonic" ];
        };
        resolvedDefaultFeatures = [ "cosmwasm" "grpc" "grpc-transport" "std" "tonic" ];
      };
      "cosmrs" = rec {
        crateName = "cosmrs";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0abqgk8k6s6swq4y9jzcwlj4g4flbmrl87yhlc83b43axiivn8cz";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "cosmos-sdk-proto";
            packageId = "cosmos-sdk-proto 0.23.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" "sha256" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "serde_derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            features = [ "std" ];
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            features = [ "bech32-preview" ];
          }
          {
            name = "tendermint";
            packageId = "tendermint";
            features = [ "secp256k1" ];
          }
          {
            name = "tendermint-rpc";
            packageId = "tendermint-rpc";
            optional = true;
            features = [ "http-client" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "bip32" = [ "dep:bip32" ];
          "cosmwasm" = [ "cosmos-sdk-proto/cosmwasm" ];
          "default" = [ "bip32" "getrandom" ];
          "dev" = [ "rpc" "tokio" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "grpc" = [ "cosmos-sdk-proto/grpc-transport" "grpc-core" ];
          "grpc-core" = [ "cosmos-sdk-proto/grpc" ];
          "rpc" = [ "tendermint-rpc" ];
          "tendermint-rpc" = [ "dep:tendermint-rpc" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "cosmwasm" "grpc" "grpc-core" "rpc" "tendermint-rpc" ];
      };
      "cosmwasm-core" = rec {
        crateName = "cosmwasm-core";
        version = "2.2.2";
        edition = "2021";
        sha256 = "03i5i5c5wrmf7qwgngacl6k0kpxvy0ryy4lglnhd12gxwwbxrdim";
        libName = "cosmwasm_core";

      };
      "cosmwasm-crypto" = rec {
        crateName = "cosmwasm-crypto";
        version = "2.2.2";
        edition = "2021";
        sha256 = "17j6y2r16i0mjl97wlkqaw9lbs7g05iy9cr5v0rkxnqpall56bxa";
        libName = "cosmwasm_crypto";
        authors = [
          "Mauro Lacy <maurolacy@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "ark-bls12-381";
            packageId = "ark-bls12-381";
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
            features = [ "parallel" ];
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            features = [ "asm" "parallel" ];
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
          }
          {
            name = "cosmwasm-core";
            packageId = "cosmwasm-core";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "p256";
            packageId = "p256";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "getrandom" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cosmwasm-derive" = rec {
        crateName = "cosmwasm-derive";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0ir0pqvv9i25ln05rapa7a9zb0s5g179k7iymnl7rrckmqzvk0m7";
        procMacro = true;
        libName = "cosmwasm_derive";
        authors = [
          "Simon Warta <webmaster128@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cosmwasm-schema" = rec {
        crateName = "cosmwasm-schema";
        version = "2.2.2";
        edition = "2021";
        sha256 = "15bgswh71mks4hhr9hw6cr5lsw1s2aicwwscmqbnw2bsnhhsp139";
        libName = "cosmwasm_schema";
        authors = [
          "Ethan Frey <ethanfrey@users.noreply.github.com>"
          "Simon Warta <webmaster128@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cosmwasm-schema-derive";
            packageId = "cosmwasm-schema-derive";
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "cosmwasm-schema-derive" = rec {
        crateName = "cosmwasm-schema-derive";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0a8skmcpf97vsvvmirr4cyxsjzvi3xp076g2v3mzc5wh64a94770";
        procMacro = true;
        libName = "cosmwasm_schema_derive";
        authors = [
          "Tomasz Kurcz <tom@confio.gmbh>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" "printing" ];
          }
        ];

      };
      "cosmwasm-std" = rec {
        crateName = "cosmwasm-std";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0zaf0jwbswnrgjwj9zif7jhpxkcy86mbfqf4sfsfx55x2if370mz";
        libName = "cosmwasm_std";
        authors = [
          "Ethan Frey <ethanfrey@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bech32";
            packageId = "bech32 0.11.0";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "bnum";
            packageId = "bnum";
          }
          {
            name = "cosmwasm-core";
            packageId = "cosmwasm-core";
          }
          {
            name = "cosmwasm-crypto";
            packageId = "cosmwasm-crypto";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "cosmwasm-derive";
            packageId = "cosmwasm-derive";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "debug" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "getrandom" ];
          }
          {
            name = "rmp-serde";
            packageId = "rmp-serde";
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" "std" ];
          }
          {
            name = "serde-json-wasm";
            packageId = "serde-json-wasm";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "cosmwasm-core";
            packageId = "cosmwasm-core";
          }
        ];
        features = {
          "cosmwasm_1_2" = [ "cosmwasm_1_1" ];
          "cosmwasm_1_3" = [ "cosmwasm_1_2" ];
          "cosmwasm_1_4" = [ "cosmwasm_1_3" ];
          "cosmwasm_2_0" = [ "cosmwasm_1_4" ];
          "cosmwasm_2_1" = [ "cosmwasm_2_0" ];
          "cosmwasm_2_2" = [ "cosmwasm_2_1" ];
          "default" = [ "iterator" "std" ];
        };
        resolvedDefaultFeatures = [ "cosmwasm_1_1" "cosmwasm_1_2" "cosmwasm_1_3" "cosmwasm_1_4" "cosmwasm_2_0" "default" "iterator" "std" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "criterion" = rec {
        crateName = "criterion";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0bv9ipygam3z8kk6k771gh9zi0j0lb9ir0xi1pc075ljg80jvcgj";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "anes";
            packageId = "anes";
          }
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "criterion-plot";
            packageId = "criterion-plot";
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "oorandom";
            packageId = "oorandom";
          }
          {
            name = "plotters";
            packageId = "plotters";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "svg_backend" "area_series" "line_series" ];
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tinytemplate";
            packageId = "tinytemplate";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "async" = [ "futures" ];
          "async-std" = [ "dep:async-std" ];
          "async_futures" = [ "futures/executor" "async" ];
          "async_smol" = [ "smol" "async" ];
          "async_std" = [ "async-std" "async" ];
          "async_tokio" = [ "tokio" "async" ];
          "csv" = [ "dep:csv" ];
          "csv_output" = [ "csv" ];
          "default" = [ "rayon" "plotters" "cargo_bench_support" ];
          "futures" = [ "dep:futures" ];
          "plotters" = [ "dep:plotters" ];
          "rayon" = [ "dep:rayon" ];
          "smol" = [ "dep:smol" ];
          "stable" = [ "csv_output" "html_reports" "async_futures" "async_smol" "async_tokio" "async_std" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "cargo_bench_support" "default" "plotters" "rayon" ];
      };
      "criterion-plot" = rec {
        crateName = "criterion-plot";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1c866xkjqqhzg4cjvg01f8w6xc1j3j7s58rdksl52skq89iq4l3b";
        libName = "criterion_plot";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
        ];

      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.3";
        edition = "2021";
        sha256 = "0aa9k4izp962qlsn5ndgw2zq62mizcpnkns8bxscgz3gqr35knj3";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" "limit_256" "std" ];
      };
      "crypto-bigint 0.4.9" = rec {
        crateName = "crypto-bigint";
        version = "0.4.9";
        edition = "2021";
        sha256 = "1vqprgj0aj1340w186zyspi58397ih78jsc0iydvhs6zrlilnazg";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "generic-array" "rand_core" "zeroize" ];
      };
      "crypto-bigint 0.5.5" = rec {
        crateName = "crypto-bigint";
        version = "0.5.5";
        edition = "2021";
        sha256 = "0xmbdff3g6ii5sbxjxc31xfkv9lrmyril4arh3dzckd4gjsjzj8d";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "serdect?/alloc" ];
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "generic-array" "rand_core" "zeroize" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "crypto-mac" = rec {
        crateName = "crypto-mac";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1axfs4zmy74rn9666p92j7nmcv11zdp2d51yrppc2dv26cqa715m";
        libName = "crypto_mac";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0d88b73waamgpfjdml78icxz45d95q7vi2aqa604b0visqdfws83";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = { target, features }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "digest" = [ "dep:digest" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "rand_core" ];
          "group-bits" = [ "group" "ff/bits" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "digest" "precomputed-tables" "zeroize" ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "curve25519-dalek-ng" = rec {
        crateName = "curve25519-dalek-ng";
        version = "4.1.1";
        edition = "2015";
        sha256 = "1j6y6dsqdfp26ifyygibsrm1a8f9f7870i4053xlczil95r9nd8w";
        libName = "curve25519_dalek_ng";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle-ng";
            packageId = "subtle-ng";
            rename = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "subtle/nightly" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "serde" = [ "dep:serde" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "u64_backend" ];
      };
      "darling 0.13.4" = rec {
        crateName = "darling";
        version = "0.13.4";
        edition = "2018";
        sha256 = "0g25pad4mhq7315mw9n4wpg8j3mwyhwvr541kgdl0aar1j2ra7d0";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.13.4";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro 0.13.4";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling 0.20.11" = rec {
        crateName = "darling";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1vmlphlrlw4f50z16p4bc9p5qwdni1ba95qmxfrrmzs6dh8lczzw";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.20.11";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro 0.20.11";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core 0.13.4" = rec {
        crateName = "darling_core";
        version = "0.13.4";
        edition = "2018";
        sha256 = "046n83f9jpszlngpjxkqi39ayzxf5a35q673c69jr1dn0ylnb7c5";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim 0.10.0";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_core 0.20.11" = rec {
        crateName = "darling_core";
        version = "0.20.11";
        edition = "2021";
        sha256 = "0bj1af6xl4ablnqbgn827m43b8fiicgv180749f5cphqdmcvj00d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim 0.11.1";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro 0.13.4" = rec {
        crateName = "darling_macro";
        version = "0.13.4";
        edition = "2018";
        sha256 = "0d8q8ibmsb1yzby6vwgh2wx892jqqfv9clwhpm19rprvz1wjd5ww";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.13.4";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "darling_macro 0.20.11" = rec {
        crateName = "darling_macro";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1bbfbc2px6sj1pqqq97bgqn6c8xdnb2fmz66f7f40nrqrcybjd7w";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.20.11";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "6.1.0";
        edition = "2018";
        sha256 = "1kvnw859xvrqyd1lk89na6797yvl5bri4wi9j0viz2a4j54wqhah";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "inline" = [ "hashbrown/inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
          "typesize" = [ "dep:typesize" ];
        };
      };
      "dashu" = rec {
        crateName = "dashu";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1q6pnczwgcidam8jcylq0r2pia0jn3i15f85xyaikzr33snfbcw5";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-macros";
            packageId = "dashu-macros";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-ratio";
            packageId = "dashu-ratio";
            usesDefaultFeatures = false;
            features = [ "dashu-float" ];
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "decimal-extras" = [ "dashu-float/postgres-types" "dashu-float/diesel" ];
          "default" = [ "std" "num-order" ];
          "num-order" = [ "dashu-int/num-order" "dashu-float/num-order" "dashu-ratio/num-order" ];
          "num-traits" = [ "dashu-int/num-traits" "dashu-float/num-traits" "dashu-ratio/num-traits" ];
          "num-traits_v02" = [ "dashu-int/num-traits_v02" "dashu-float/num-traits_v02" "dashu-ratio/num-traits_v02" ];
          "rand" = [ "dashu-int/rand" "dashu-float/rand" "dashu-ratio/rand" ];
          "rand_v08" = [ "dashu-int/rand_v08" "dashu-float/rand_v08" "dashu-ratio/rand_v08" ];
          "serde" = [ "dashu-int/serde" "dashu-float/serde" "dashu-ratio/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" "dashu-float/std" "dashu-ratio/std" ];
          "zeroize" = [ "dashu-int/zeroize" "dashu-float/zeroize" "dashu-ratio/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "num-order" "std" ];
      };
      "dashu-base" = rec {
        crateName = "dashu-base";
        version = "0.4.1";
        edition = "2021";
        sha256 = "12gjivqax003blwg9g9zrr4k1509042dnbgazxc8r9jsp3v0pf60";
        libName = "dashu_base";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "dashu-float" = rec {
        crateName = "dashu-float";
        version = "0.4.3";
        edition = "2021";
        sha256 = "1rv323visgbwr9w9n31zchrx7f1d6mpq2jph46yy3lnvm12q81w5";
        libName = "dashu_float";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
            rename = "_num-modular";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" "num-order" ];
          "diesel" = [ "diesel_v2" ];
          "diesel_v1" = [ "dep:diesel_v1" ];
          "diesel_v2" = [ "dep:diesel_v2" ];
          "num-order" = [ "dep:num-order" "dep:_num-modular" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" "dashu-int/num-traits_v02" ];
          "postgres-types" = [ "postgres-types_v02" ];
          "postgres-types_v02" = [ "dep:postgres-types_v02" "dep:_bytes" "std" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" "dashu-int/rand_v08" ];
          "serde" = [ "dep:serde" "dashu-int/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" ];
          "zeroize" = [ "dep:zeroize" "dashu-int/zeroize" ];
        };
        resolvedDefaultFeatures = [ "num-order" "std" ];
      };
      "dashu-int" = rec {
        crateName = "dashu-int";
        version = "0.4.1";
        edition = "2021";
        sha256 = "1gwzvgzm21kw324s30lcknxm934vzwfv5fzg8k8a8d6a660d16gf";
        libName = "dashu_int";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
          "Tomek Czajka <tczajka@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" "num-order" ];
          "num-integer" = [ "num-integer_v01" ];
          "num-integer_v01" = [ "dep:num-integer_v01" ];
          "num-order" = [ "dep:num-order" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "dashu-base/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "num-order" "std" ];
      };
      "dashu-macros" = rec {
        crateName = "dashu-macros";
        version = "0.4.1";
        edition = "2021";
        sha256 = "045by0y6a3g7c064zw5sk6acdppr9sgg177dx7v6crrnyqz1qf4k";
        procMacro = true;
        libName = "dashu_macros";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-ratio";
            packageId = "dashu-ratio";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "dashu-ratio" = rec {
        crateName = "dashu-ratio";
        version = "0.4.1";
        edition = "2021";
        sha256 = "1jb4hwj8fm26nyh13fafvyzjnkrmkr0x6s9al3wcrqbwvl23pqs7";
        libName = "dashu_ratio";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
            rename = "_num-modular";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "dashu-float" = [ "dep:dashu-float" ];
          "default" = [ "std" "num-order" "dashu-float" ];
          "num-order" = [ "dep:num-order" "dep:_num-modular" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" "dashu-int/num-traits_v02" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" "dashu-int/rand_v08" ];
          "serde" = [ "dep:serde" "dashu-int/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" ];
          "zeroize" = [ "dep:zeroize" "dashu-int/zeroize" ];
        };
        resolvedDefaultFeatures = [ "dashu-float" "num-order" "std" ];
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.9.0";
        edition = "2018";
        sha256 = "0xm46371aw613ghc12ay4vsnn49hpcmcwlijnqy8lbp2bpd308ra";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "der 0.6.1" = rec {
        crateName = "der";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1pnl3y52m1s6srxpfrfbazf6qilzq8fgksk5dv79nxaybjk6g97i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
        ];
        features = {
          "const-oid" = [ "dep:const-oid" ];
          "der_derive" = [ "dep:der_derive" ];
          "derive" = [ "der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "const-oid" ];
          "pem" = [ "alloc" "pem-rfc7468/alloc" "zeroize" ];
          "pem-rfc7468" = [ "dep:pem-rfc7468" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "const-oid" "oid" ];
      };
      "der 0.7.10" = rec {
        crateName = "der";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1jyxacyxdx6mxbkfw99jz59dzvcd9k17rq01a7xvn1dr6wl87hg7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "arbitrary" = [ "dep:arbitrary" "const-oid?/arbitrary" "std" ];
          "bytes" = [ "dep:bytes" "alloc" ];
          "derive" = [ "dep:der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "dep:const-oid" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "zeroize" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "oid" "std" "zeroize" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.4.0";
        edition = "2021";
        sha256 = "13h6skwk411wzhf1l9l7d3yz5y6vg9d7s3dwhhb4a942r88nm7lw";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "dep:deranged-macros" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "rand08" "rand09" ];
          "rand08" = [ "dep:rand08" ];
          "rand09" = [ "dep:rand09" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "serde" "std" ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "use_core" ];
      };
      "derive_more 0.99.20" = rec {
        crateName = "derive_more";
        version = "0.99.20";
        edition = "2018";
        sha256 = "0zvz94kbc5d4r817wni1l7xk8f289nhf73vqk677p5rxlij4pnvf";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "convert_case";
            packageId = "convert_case";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
            optional = true;
          }
        ];
        features = {
          "convert_case" = [ "dep:convert_case" ];
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" "is_variant" "unwrap" ];
          "display" = [ "syn/extra-traits" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "generate-parsing-rs" = [ "peg" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "peg" = [ "dep:peg" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "testing-helpers" = [ "rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "unwrap" = [ "convert_case" "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_mut" "as_ref" "constructor" "convert_case" "default" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "iterator" "mul" "mul_assign" "not" "rustc_version" "sum" "try_into" "unwrap" ];
      };
      "derive_more 1.0.0" = rec {
        crateName = "derive_more";
        version = "1.0.0";
        edition = "2021";
        sha256 = "01cd8pskdjg10dvfchi6b8a9pa1ja1ic0kbn45dl8jdyrfwrk6sa";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 1.0.0";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "debug" "deref" "deref_mut" "display" "from" "into_iterator" "not" "std" ];
      };
      "derive_more 2.0.1" = rec {
        crateName = "derive_more";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0y3n97cc7rsvgnj211p92y1ppzh6jzvq5kvk6340ghkhfp7l4ch9";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 2.0.1";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "deref" "deref_mut" "display" "from" "from_str" "index" "index_mut" "into" "into_iterator" "not" ];
      };
      "derive_more-impl 1.0.0" = rec {
        crateName = "derive_more-impl";
        version = "1.0.0";
        edition = "2021";
        sha256 = "08mxyd456ygk68v5nfn4dyisn82k647w9ri2jl19dqpvmnp30wyb";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "debug" "default" "deref" "deref_mut" "display" "from" "into_iterator" "not" ];
      };
      "derive_more-impl 2.0.1" = rec {
        crateName = "derive_more-impl";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1wqxcb7d5lzvpplz9szp4rwy1r23f5wmixz0zd2vcjscqknji9mx";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "default" "deref" "deref_mut" "display" "from" "from_str" "index" "index_mut" "into" "into_iterator" "not" ];
      };
      "digest 0.10.7" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.4";
            optional = true;
          }
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "const-oid" "core-api" "default" "mac" "oid" "std" "subtle" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "5.0.1";
        edition = "2015";
        sha256 = "0992xk5vx75b2x91nw9ssb51mpl8x73j9rxmpi96cryn0ffmmi24";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "dirs-next" = rec {
        crateName = "dirs-next";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1q9kr151h9681wwp6is18750ssghz6j9j7qm7qi1ngcwy7mzi35r";
        libName = "dirs_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys-next";
            packageId = "dirs-sys-next";
          }
        ];

      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.4.1";
        edition = "2015";
        sha256 = "071jy0pvaad9lsa6mzawxrh7cmr7hsmsdxwzm7jzldfkrfjha3sj";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "option-ext";
            packageId = "option-ext";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_UI_Shell" "Win32_Foundation" "Win32_Globalization" "Win32_System_Com" ];
          }
        ];

      };
      "dirs-sys-next" = rec {
        crateName = "dirs-sys-next";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kavhavdxv4phzj4l0psvh55hszwnr0rcz8sxbvx20pyqi2a3gaf";
        libName = "dirs_sys_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];

      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "doctest-file" = rec {
        crateName = "doctest-file";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0qkmnrsx2kszm58wxyry63bs35msj9chdb6jlh54a8cdwaiizj5a";
        procMacro = true;
        libName = "doctest_file";
        authors = [
          "Kotauskas <v.toncharov@gmail.com>"
        ];

      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1lmrq383d1yszp7mg5i7i56b17x2lnn3kb91jwsq0zykvg2jbcvm";
        libName = "downcast_rs";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "dunce" = rec {
        crateName = "dunce";
        version = "1.0.5";
        edition = "2021";
        sha256 = "04y8wwv3vvcqaqmqzssi6k0ii9gs6fpz96j5w9nky2ccsl23axwj";
        authors = [
          "Kornel <kornel@geekhood.net>"
        ];

      };
      "dyn-clone" = rec {
        crateName = "dyn-clone";
        version = "1.0.19";
        edition = "2018";
        sha256 = "01ahm5abl20480v48nxy4ffyx80cs6263q9zf0gnrxpvm6w8yyhw";
        libName = "dyn_clone";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ecdsa 0.14.8" = rec {
        crateName = "ecdsa";
        version = "0.14.8";
        edition = "2021";
        sha256 = "0p1wxap2s6jm06y2w3cal8dkz6p9223ir9wws70rgx8h929h2cs1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.6.1";
            optional = true;
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979 0.3.1";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
            usesDefaultFeatures = false;
            features = [ "hazmat-preview" "rand-preview" ];
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "signature/digest-preview" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sign" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verify" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "arithmetic" "der" "digest" "hazmat" "rfc6979" "sign" "verify" ];
      };
      "ecdsa 0.16.9" = rec {
        crateName = "ecdsa";
        version = "0.16.9";
        edition = "2021";
        sha256 = "1jhb0bcbkaz4001sdmfyv8ajrv8a1cg7z7aa5myrd4jjbhmz69zf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.7.10";
            optional = true;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979 0.4.0";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" "signature/alloc" "spki/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "dep:digest" "signature/digest" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "digest" "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "signing" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "spki" = [ "dep:spki" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verifying" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "der" "digest" "hazmat" "pkcs8" "rfc6979" "signing" "spki" "std" "verifying" ];
      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0lydzdf26zbn82g7xfczcac9d7mzm3qgx934ijjrd5hjpjx32m8i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8?/alloc" ];
          "default" = [ "std" ];
          "pem" = [ "alloc" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [ "serde" "dep:serde_bytes" ];
          "std" = [ "pkcs8?/std" "signature/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "ed25519-consensus" = rec {
        crateName = "ed25519-consensus";
        version = "2.1.0";
        edition = "2018";
        sha256 = "12wrrwg5hafpm3ashyi6vginwrqnkc0imll1xbzkcx7fr3nnb11w";
        libName = "ed25519_consensus";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek-ng";
            packageId = "curve25519-dalek-ng";
            rename = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "u64_backend" "alloc" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "serde" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
      };
      "ed25519-zebra" = rec {
        crateName = "ed25519-zebra";
        version = "4.0.3";
        edition = "2018";
        sha256 = "1ab55w7w6hh7hyyjg507ki7hrz0w9nygyifdjrc43m559n3yd73x";
        libName = "ed25519_zebra";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
          "Zcash Foundation <zebra@zfnd.org>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "alloc" "digest" "zeroize" "precomputed-tables" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "serde" "std" ];
          "der" = [ "dep:der" ];
          "pem" = [ "der" "ed25519/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" "ed25519/serde" ];
          "std" = [ "ed25519/std" ];
        };
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "elf" = rec {
        crateName = "elf";
        version = "0.7.4";
        edition = "2021";
        sha256 = "0yyij25ps8mln1s1xzwggjr88gb2b35c8jf8az25dmfvfaar0ia4";
        authors = [
          "Christopher Cole <chris.cole.09@gmail.com>"
        ];
        features = {
          "default" = [ "std" "to_str" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "to_str" ];
      };
      "elliptic-curve 0.12.3" = rec {
        crateName = "elliptic-curve";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1lwi108mh6drw5nzqzlz7ighdba5qxdg5vmwwnw1j2ihnn58ifz7";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.1.1";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.4.9";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "der";
            packageId = "der 0.6.1";
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1 0.3.0";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "der/alloc" "sec1/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "ff" "group" ];
          "base64ct" = [ "dep:base64ct" ];
          "bits" = [ "arithmetic" "ff/bits" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "hkdf" = [ "dep:hkdf" ];
          "jwk" = [ "alloc" "base64ct/alloc" "serde" "serde_json" "zeroize/alloc" ];
          "pem" = [ "alloc" "arithmetic" "der/pem" "pem-rfc7468/alloc" "pkcs8" "sec1/pem" ];
          "pem-rfc7468" = [ "dep:pem-rfc7468" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "alloc" "pkcs8" "sec1/serde" "serdect" ];
          "serde_json" = [ "dep:serde_json" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "alloc" "rand_core/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "arithmetic" "digest" "ff" "group" "hazmat" "sec1" ];
      };
      "elliptic-curve 0.13.8" = rec {
        crateName = "elliptic-curve";
        version = "0.13.8";
        edition = "2021";
        sha256 = "0ixx4brgnzi61z29r3g1606nh2za88hzyz8c5r3p6ydzhqq09rmm";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.5.5";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
            features = [ "zeroize" ];
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1 0.7.3";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "ff?/alloc" "group?/alloc" "pkcs8?/alloc" "sec1?/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "group" ];
          "bits" = [ "arithmetic" "ff/bits" "dep:tap" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "dep:hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "dep:hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "ff" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "jwk" = [ "dep:base64ct" "dep:serde_json" "alloc" "serde" "zeroize/alloc" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "arithmetic" "pkcs8" "sec1/pem" ];
          "pkcs8" = [ "dep:pkcs8" "sec1" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "dep:serdect" "alloc" "pkcs8" "sec1/serde" ];
          "std" = [ "alloc" "rand_core/std" "pkcs8?/std" "sec1?/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ff" "group" "hazmat" "pkcs8" "sec1" "std" ];
      };
      "embedded-hal" = rec {
        crateName = "embedded-hal";
        version = "1.0.0";
        edition = "2021";
        sha256 = "128bb4h3kw8gvz6w7xa0z0j6nrk5jhm3aa7v350clkh0nzz906in";
        libName = "embedded_hal";
        authors = [
          "The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
        ];
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
        };
      };
      "embedded-io 0.4.0" = rec {
        crateName = "embedded-io";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1v9wrc5nsgaaady7i3ya394sik5251j0iq5rls7mrx7fv696h6pg";
        libName = "embedded_io";
        features = {
          "defmt" = [ "dep:defmt" ];
          "futures" = [ "std" "async" "dep:futures" ];
          "log" = [ "dep:log" ];
          "std" = [ "alloc" "futures?/std" ];
          "tokio" = [ "std" "async" "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "embedded-io 0.6.1" = rec {
        crateName = "embedded-io";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0v901xykajh3zffn6x4cnn4fhgfw3c8qpjwbsk6gai3gaccg3l7d";
        libName = "embedded_io";
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "embedded-sdmmc" = rec {
        crateName = "embedded-sdmmc";
        version = "0.8.1";
        edition = "2021";
        sha256 = "0grgna4sfaz9lfwr2k6i971lr4fa396r0lc1d9gv7j8f0hqp6qzb";
        libName = "embedded_sdmmc";
        authors = [
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
          "Rust Embedded Community Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal";
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
        ];
        features = {
          "default" = [ "log" ];
          "defmt-log" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.14.3";
        edition = "2015";
        sha256 = "1m9a5hqk6qn5sqnrc40b55yr97drkfdzd0jj863ksqff8gfqn91x";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "dogged" = [ "dep:dogged" ];
          "persistent" = [ "dogged" ];
        };
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.35";
        edition = "2018";
        sha256 = "1wv64xdrr9v37rqqdjsyb8l8wzlcbab80ryxhrszvnj59wy0y0vm";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = [ "dep:any_all_workaround" ];
          "default" = [ "alloc" ];
          "fast-legacy-encode" = [ "fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode" ];
          "serde" = [ "dep:serde" ];
          "simd-accel" = [ "any_all_workaround" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "enr" = rec {
        crateName = "enr";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1r7p8zb4y95n5d0nfky3dws77i2jqmr9fj7br3559y82dv2qsg9a";
        authors = [
          "Age Manning <Age@AgeManning.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            features = [ "ecdsa" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rlp";
            packageId = "rlp";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "default" = [ "serde" "k256" ];
          "ed25519" = [ "ed25519-dalek" ];
          "ed25519-dalek" = [ "dep:ed25519-dalek" ];
          "k256" = [ "dep:k256" ];
          "rust-secp256k1" = [ "secp256k1" ];
          "secp256k1" = [ "dep:secp256k1" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "k256" "serde" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1005v71kay9kbz1d5907l0y7vh9qn2fqsp2yfgb8bjvin6m0bm2c";
        dependencies = [
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "auto-color" = [ "dep:is-terminal" "color" ];
          "color" = [ "dep:termcolor" ];
          "default" = [ "auto-color" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "auto-color" "color" "default" "humantime" "regex" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.12";
        edition = "2018";
        sha256 = "066ss2qln9z5q4816d3wcvq2bzasn7dajfkhcfqflfsy6pwlx8ff";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "eth-keystore" = rec {
        crateName = "eth-keystore";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1asqf4280mg0y85x5hdjnafgv8i53ikf05q74sjisi5y4gqkpnhz";
        libName = "eth_keystore";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "scrypt";
            packageId = "scrypt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid 0.8.2";
            features = [ "serde" "v4" ];
          }
        ];
        features = {
          "ethereum-types" = [ "dep:ethereum-types" ];
          "geth-compat" = [ "ethereum-types" "k256" "k256/ecdsa" ];
          "k256" = [ "dep:k256" ];
        };
      };
      "ethabi" = rec {
        crateName = "ethabi";
        version = "18.0.0";
        edition = "2021";
        sha256 = "1668rcninb2lrvg2z1khs95k7syb6slnb2ba70vyl0y99kvwa4vl";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Artem Vorotnikov <artem@vorotnikov.me>"
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
        ];
        dependencies = [
          {
            name = "ethereum-types";
            packageId = "ethereum-types";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "sha3";
            packageId = "sha3";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "uint";
            packageId = "uint";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "default" = [ "std" "full-serde" "rlp" ];
          "full-serde" = [ "std" "serde" "serde_json" "regex" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "parity-codec" = [ "ethereum-types/codec" ];
          "regex" = [ "dep:regex" ];
          "rlp" = [ "ethereum-types/rlp" ];
          "serde" = [ "dep:serde" "ethereum-types/serialize" "uint" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "hex/std" "sha3/std" "ethereum-types/std" "thiserror" "uint?/std" "serde?/std" ];
          "thiserror" = [ "dep:thiserror" ];
          "uint" = [ "dep:uint" ];
        };
        resolvedDefaultFeatures = [ "full-serde" "once_cell" "regex" "rlp" "serde" "serde_json" "std" "thiserror" "uint" ];
      };
      "ethbloom" = rec {
        crateName = "ethbloom";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0q0g286d1gb3ghs8fssf8fg77grjsaw9ycmrx3jjzamnhmc4nbf2";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
            features = [ "limit_256" ];
          }
          {
            name = "fixed-hash";
            packageId = "fixed-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" ];
          "codec" = [ "impl-codec" "scale-info" ];
          "default" = [ "std" "rlp" "serialize" "rustc-hex" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "dep:scale-info" ];
          "serialize" = [ "impl-serde" ];
          "std" = [ "fixed-hash/std" "crunchy/std" ];
        };
        resolvedDefaultFeatures = [ "codec" "impl-codec" "impl-rlp" "impl-serde" "rlp" "scale-info" "serialize" "std" ];
      };
      "ethereum-types" = rec {
        crateName = "ethereum-types";
        version = "0.14.1";
        edition = "2021";
        sha256 = "1vnqxmrz1l7wg4mh284f4q09vaw0zrr878wrpvy2wma0y35iblh2";
        libName = "ethereum_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ethbloom";
            packageId = "ethbloom";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fixed-hash";
            packageId = "fixed-hash";
            usesDefaultFeatures = false;
            features = [ "byteorder" "rustc-hex" ];
          }
          {
            name = "impl-codec";
            packageId = "impl-codec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "primitive-types";
            packageId = "primitive-types";
            usesDefaultFeatures = false;
            features = [ "byteorder" "rustc-hex" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "uint";
            packageId = "uint";
            rename = "uint-crate";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "ethbloom/arbitrary" "fixed-hash/arbitrary" "uint-crate/arbitrary" ];
          "codec" = [ "impl-codec" "ethbloom/codec" "scale-info" "primitive-types/scale-info" ];
          "default" = [ "std" "ethbloom" "rlp" "serialize" ];
          "ethbloom" = [ "dep:ethbloom" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "num-traits" = [ "primitive-types/num-traits" ];
          "rlp" = [ "impl-rlp" "ethbloom/rlp" "primitive-types/rlp" ];
          "scale-info" = [ "dep:scale-info" ];
          "serialize" = [ "impl-serde" "primitive-types/serde_no_std" "ethbloom/serialize" ];
          "std" = [ "uint-crate/std" "fixed-hash/std" "ethbloom?/std" "primitive-types/std" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "ethbloom" "impl-codec" "impl-rlp" "impl-serde" "rlp" "scale-info" "serialize" "std" ];
      };
      "ethereum_ssz" = rec {
        crateName = "ethereum_ssz";
        version = "0.5.4";
        edition = "2021";
        sha256 = "09clxjnq100z6w7w98j1l4i0f9k58m5r7ngsllrb91wb7pw2fdkx";
        libName = "ssz";
        dependencies = [
          {
            name = "ethereum-types";
            packageId = "ethereum-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
        ];
        features = {
          "arbitrary" = [ "ethereum-types/arbitrary" ];
        };
      };
      "ethereum_ssz_derive" = rec {
        crateName = "ethereum_ssz_derive";
        version = "0.5.4";
        edition = "2021";
        sha256 = "1sl021wx3cfdn08bl53x6v80jcy6rf481d6rsgnhfjn3iqvxbk4f";
        procMacro = true;
        libName = "ssz_derive";
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.13.4";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "ethers" = rec {
        crateName = "ethers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1h6yp36vx680lfiiwjj2andb2cq0dcxg475gb7j6j34zk3m42s41";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "ethers-addressbook";
            packageId = "ethers-addressbook";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-contract";
            packageId = "ethers-contract";
            usesDefaultFeatures = false;
            features = [ "providers" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-middleware";
            packageId = "ethers-middleware";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-signers";
            packageId = "ethers-signers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-solc";
            packageId = "ethers-solc";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "abigen" = [ "ethers-contract/abigen" ];
          "abigen-offline" = [ "abigen" ];
          "abigen-online" = [ "ethers-contract/abigen-online" ];
          "aws" = [ "ethers-signers/aws" ];
          "celo" = [ "ethers-contract/celo" "ethers-core/celo" "ethers-middleware/celo" "ethers-providers/celo" "ethers-signers/celo" "legacy" ];
          "default" = [ "abigen" "rustls" "etherscan" ];
          "dev-rpc" = [ "ethers-providers/dev-rpc" ];
          "ethers-solc" = [ "solc" ];
          "etherscan" = [ "dep:ethers-etherscan" "ethers-middleware/etherscan" ];
          "ipc" = [ "ethers-providers/ipc" ];
          "ledger" = [ "ethers-signers/ledger" ];
          "legacy" = [ "ethers-core/legacy" "ethers-contract/legacy" ];
          "legacy-ws" = [ "ethers-providers/legacy-ws" ];
          "openssl" = [ "ethers-contract/openssl" "ethers-etherscan?/openssl" "ethers-middleware/openssl" "ethers-providers/openssl" "ethers-solc?/openssl" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" "ethers-signers/optimism" "ethers-middleware/optimism" "ethers-contract/optimism" ];
          "rustls" = [ "ethers-contract/rustls" "ethers-etherscan?/rustls" "ethers-middleware/rustls" "ethers-providers/rustls" "ethers-solc?/rustls" ];
          "solc" = [ "dep:ethers-solc" "ethers-etherscan?/ethers-solc" ];
          "solc-full" = [ "ethers-solc?/full" ];
          "solc-tests" = [ "ethers-solc?/tests" ];
          "trezor" = [ "ethers-signers/trezor" ];
          "ws" = [ "ethers-providers/ws" ];
          "yubi" = [ "ethers-signers/yubi" ];
        };
        resolvedDefaultFeatures = [ "abigen" "default" "eip712" "etherscan" "legacy" "rustls" ];
      };
      "ethers-addressbook" = rec {
        crateName = "ethers-addressbook";
        version = "2.0.14";
        edition = "2021";
        sha256 = "0n8p08xmr5qs0mvj60jm2wyfb0s9ifwj27xs7dn5bajgdg8sz5al";
        libName = "ethers_addressbook";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "ethers-contract" = rec {
        crateName = "ethers-contract";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1ansxjw68984vmg8m9x09lmzjhdhryx7my2ahzmnx0wcayiszkkg";
        libName = "ethers_contract";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "ethers-contract-abigen";
            packageId = "ethers-contract-abigen";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-contract-derive";
            packageId = "ethers-contract-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
            features = [ "ws" ];
          }
        ];
        features = {
          "abigen" = [ "ethers-contract-abigen" "ethers-contract-derive" ];
          "abigen-offline" = [ "abigen" ];
          "abigen-online" = [ "abigen" "ethers-contract-abigen/online" ];
          "celo" = [ "legacy" "ethers-core/celo" "ethers-providers/celo" ];
          "default" = [ "abigen" "providers" ];
          "ethers-contract-abigen" = [ "dep:ethers-contract-abigen" ];
          "ethers-contract-derive" = [ "dep:ethers-contract-derive" ];
          "ethers-providers" = [ "dep:ethers-providers" ];
          "openssl" = [ "ethers-contract-abigen/openssl" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" ];
          "providers" = [ "ethers-providers" "ethers-contract-abigen/providers" "ethers-contract-derive/providers" ];
          "rustls" = [ "ethers-contract-abigen/rustls" ];
        };
        resolvedDefaultFeatures = [ "abigen" "ethers-contract-abigen" "ethers-contract-derive" "ethers-providers" "legacy" "providers" "rustls" ];
      };
      "ethers-contract-abigen" = rec {
        crateName = "ethers-contract-abigen";
        version = "2.0.14";
        edition = "2021";
        sha256 = "16vkb85sjy222kdrzvwh8bqq2rqnf2jx95gb5723h6ikqbxh3fh4";
        libName = "ethers_contract_abigen";
        authors = [
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            features = [ "verbatim" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "blocking" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.22";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "default" = [ "providers" ];
          "ethers-etherscan" = [ "dep:ethers-etherscan" ];
          "online" = [ "reqwest" "ethers-etherscan" "url" "tokio" ];
          "openssl" = [ "reqwest?/native-tls" "ethers-etherscan?/openssl" ];
          "reqwest" = [ "dep:reqwest" ];
          "rustls" = [ "reqwest?/rustls-tls" "ethers-etherscan?/rustls" ];
          "tokio" = [ "dep:tokio" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "providers" "rustls" ];
      };
      "ethers-contract-derive" = rec {
        crateName = "ethers-contract-derive";
        version = "2.0.14";
        edition = "2021";
        sha256 = "13qnk9k8rzdkbmbi8p0jyrjks2g9z6cf5bda1khwsl80pk59ss47";
        procMacro = true;
        libName = "ethers_contract_derive";
        authors = [
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "ethers-contract-abigen";
            packageId = "ethers-contract-abigen";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "providers" ];
          "providers" = [ "ethers-contract-abigen/providers" ];
        };
        resolvedDefaultFeatures = [ "providers" ];
      };
      "ethers-core" = rec {
        crateName = "ethers-core";
        version = "2.0.14";
        edition = "2021";
        sha256 = "07zv33picj1japynmh1zcal2hzxk6fpj6rbqmd44mc9hmp30rn42";
        libName = "ethers_core";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata";
            optional = true;
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
          }
          {
            name = "ethabi";
            packageId = "ethabi";
            usesDefaultFeatures = false;
            features = [ "full-serde" "rlp" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" "std" "ecdsa" "std" ];
          }
          {
            name = "num_enum";
            packageId = "num_enum 0.7.3";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "open-fastrlp";
            packageId = "open-fastrlp";
            features = [ "std" "derive" "ethereum-types" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rlp";
            packageId = "rlp";
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            features = [ "extra-traits" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "cargo_metadata" = [ "dep:cargo_metadata" ];
          "celo" = [ "legacy" ];
          "macros" = [ "syn" "cargo_metadata" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "cargo_metadata" "legacy" "macros" "once_cell" "syn" ];
      };
      "ethers-etherscan" = rec {
        crateName = "ethers-etherscan";
        version = "2.0.14";
        edition = "2021";
        sha256 = "0jcnbca48wdlf5k2i4riwnmqqchl4drvs82mwl6ayjvdq9rmk7p7";
        libName = "ethers_etherscan";
        authors = [
          "Matthias Seitz <matthias.seitz@outlook.de>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "default" = [ "rustls" ];
          "ethers-solc" = [ "dep:ethers-solc" ];
          "openssl" = [ "reqwest/native-tls" ];
          "rustls" = [ "reqwest/rustls-tls" ];
          "solc-full" = [ "ethers-solc?/full" ];
          "solc-tests" = [ "ethers-solc?/tests" ];
        };
        resolvedDefaultFeatures = [ "rustls" ];
      };
      "ethers-middleware" = rec {
        crateName = "ethers-middleware";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1pj3mazjh79c2yj0nl72s0dvxygasl41kn89k44pqrpckbqgvya8";
        libName = "ethers_middleware";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "ethers-contract";
            packageId = "ethers-contract";
            usesDefaultFeatures = false;
            features = [ "abigen" "providers" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-signers";
            packageId = "ethers-signers";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-locks";
            packageId = "futures-locks";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
            features = [ "ws" "rustls" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" "rustls" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" "macros" "time" ];
          }
        ];
        features = {
          "celo" = [ "ethers-core/celo" "ethers-providers/celo" "ethers-signers/celo" "ethers-contract/celo" ];
          "default" = [ "rustls" "etherscan" ];
          "etherscan" = [ "dep:ethers-etherscan" ];
          "openssl" = [ "reqwest/native-tls" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" "ethers-contract/optimism" ];
          "rustls" = [ "reqwest/rustls-tls" ];
        };
        resolvedDefaultFeatures = [ "etherscan" "rustls" ];
      };
      "ethers-providers" = rec {
        crateName = "ethers-providers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1cisx1phls11capjjjzc1xdgmckdcq92wivmkkyfzwci72iwjd34";
        libName = "ethers_providers";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "enr";
            packageId = "enr";
            usesDefaultFeatures = false;
            features = [ "k256" "serde" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            usesDefaultFeatures = false;
            features = [ "wasm-bindgen" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "hashers";
            packageId = "hashers";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "time" ];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite 0.20.1";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "connect" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "attributes" ];
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
            features = [ "std-future" ];
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "console" ];
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" "macros" "time" ];
          }
        ];
        features = {
          "celo" = [ "ethers-core/celo" ];
          "default" = [ "ws" "rustls" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "ipc" = [ "tokio/io-util" "futures-channel" "winapi" ];
          "legacy-ws" = [ "ws" ];
          "openssl" = [ "tokio-tungstenite/native-tls" "reqwest/native-tls" ];
          "optimism" = [ "ethers-core/optimism" ];
          "rustls" = [ "tokio-tungstenite/rustls-tls-webpki-roots" "reqwest/rustls-tls" ];
          "tokio-tungstenite" = [ "dep:tokio-tungstenite" ];
          "winapi" = [ "dep:winapi" ];
          "ws" = [ "tokio-tungstenite" "futures-channel" ];
        };
        resolvedDefaultFeatures = [ "rustls" "tokio-tungstenite" ];
      };
      "ethers-signers" = rec {
        crateName = "ethers-signers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1hk6cz94sr2kb0mc6fqxaylcsqmcxkc2sr9vfx8xhakq3i4pb212";
        libName = "ethers_signers";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32 0.8.7";
          }
          {
            name = "coins-bip39";
            packageId = "coins-bip39 0.8.7";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
          }
          {
            name = "eth-keystore";
            packageId = "eth-keystore";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "aws" = [ "rusoto_core/rustls" "rusoto_kms/rustls" "spki" ];
          "celo" = [ "ethers-core/celo" ];
          "coins-ledger" = [ "dep:coins-ledger" ];
          "futures" = [ "futures-util" "futures-executor" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "futures-util" = [ "dep:futures-util" ];
          "home" = [ "dep:home" ];
          "ledger" = [ "coins-ledger" "futures" "semver" ];
          "optimism" = [ "ethers-core/optimism" ];
          "rusoto_core" = [ "dep:rusoto_core" ];
          "rusoto_kms" = [ "dep:rusoto_kms" ];
          "semver" = [ "dep:semver" ];
          "spki" = [ "dep:spki" ];
          "trezor" = [ "trezor-client" "futures" "semver" "home" ];
          "trezor-client" = [ "dep:trezor-client" ];
          "yubi" = [ "yubihsm" ];
          "yubihsm" = [ "dep:yubihsm" ];
        };
      };
      "ethers-solc" = rec {
        crateName = "ethers-solc";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1p8yn64n1b3qwr28cjdn8r0xlkfadq7gxvyv8qk2hqwi3mvll936";
        libName = "ethers_solc";
        authors = [
          "Matthias Seitz <matthias.seitz@outlook.de>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "home";
            packageId = "home";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "path-slash";
            packageId = "path-slash";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solang-parser";
            packageId = "solang-parser";
            usesDefaultFeatures = false;
          }
          {
            name = "svm-rs";
            packageId = "svm-rs";
            rename = "svm";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "blocking" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "yansi";
            packageId = "yansi";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "async" = [ "tokio/process" "tokio/io-util" "tokio/fs" "tokio/time" "futures-util" ];
          "default" = [ "rustls" ];
          "fs_extra" = [ "dep:fs_extra" ];
          "full" = [ "async" "svm-solc" ];
          "futures-util" = [ "dep:futures-util" ];
          "openssl" = [ "svm?/openssl" ];
          "project-util" = [ "tempfile" "fs_extra" "rand" ];
          "rand" = [ "dep:rand" ];
          "rustls" = [ "svm?/rustls" ];
          "sha2" = [ "dep:sha2" ];
          "svm" = [ "dep:svm" ];
          "svm-builds" = [ "dep:svm-builds" ];
          "svm-solc" = [ "svm" "svm-builds" "sha2" ];
          "tempfile" = [ "dep:tempfile" ];
        };
        resolvedDefaultFeatures = [ "rustls" ];
      };
      "eyre" = rec {
        crateName = "eyre";
        version = "0.6.12";
        edition = "2018";
        sha256 = "1v1a3vb9gs5zkwp4jzkcfnpg0gvyp4ifydzx37f4qy14kzcibnbw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Jane Lusby <jlusby42@gmail.com>"
        ];
        dependencies = [
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "auto-install" "track-caller" ];
          "pyo3" = [ "dep:pyo3" ];
        };
        resolvedDefaultFeatures = [ "auto-install" "default" "track-caller" ];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fastrlp 0.3.1" = rec {
        crateName = "fastrlp";
        version = "0.3.1";
        edition = "2021";
        sha256 = "0634hphxgxyix0kvxhi62z7qsl0hs7405znz2g9bsfrppbfk960k";
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "fastrlp-derive" ];
          "ethbloom" = [ "ethereum-types/ethbloom" ];
          "ethereum-types" = [ "dep:ethereum-types" ];
          "ethnum" = [ "dep:ethnum" ];
          "fastrlp-derive" = [ "dep:fastrlp-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "fastrlp 0.4.0" = rec {
        crateName = "fastrlp";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1i4d060g6xnm34zncsgj61mv2mdafnqpj61p9hkvh57g2i3vm3ff";
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "fastrlp-derive" ];
          "ethbloom" = [ "ethereum-types/ethbloom" ];
          "ethereum-types" = [ "dep:ethereum-types" ];
          "ethnum" = [ "dep:ethnum" ];
          "fastrlp-derive" = [ "dep:fastrlp-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ff 0.12.1" = rec {
        crateName = "ff";
        version = "0.12.1";
        edition = "2021";
        sha256 = "0q3imz4m3dj2cy182i20wa8kbclgj13ddfngqb2miicc6cjzq4yh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "bitvec" "default" "std" ];
      };
      "ff 0.13.1" = rec {
        crateName = "ff";
        version = "0.13.1";
        edition = "2021";
        sha256 = "14v3bc6q24gbcjnxjfbq2dddgf4as2z2gd4mj35gjlrncpxhpdf0";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff_derive";
            packageId = "ff_derive";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "bitvec" "byteorder" "default" "derive" "derive_bits" "ff_derive" "std" ];
      };
      "ff_derive" = rec {
        crateName = "ff_derive";
        version = "0.13.1";
        edition = "2021";
        sha256 = "0q0v2p64zd6q630776a9hqch7hwggal6nz2qjy8ykc1n41ji43gi";
        procMacro = true;
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "addchain";
            packageId = "addchain";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "bits" ];
      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "fixed-hash" = rec {
        crateName = "fixed-hash";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0d25wr8vrvr7kwmjya6894wp461f2wic0wgxdz7im360n0n0ap43";
        libName = "fixed_hash";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "std" "rand" "rustc-hex" "byteorder" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "rustc-hex" = [ "dep:rustc-hex" ];
          "std" = [ "rustc-hex/std" "rand/std" "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "rand" "rustc-hex" "std" ];
      };
      "fixedbitset 0.4.2" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "fixedbitset 0.5.7" = rec {
        crateName = "fixedbitset";
        version = "0.5.7";
        edition = "2021";
        sha256 = "16fd3v9d2cms2vddf9xhlm56sz4j0zgrk3d2h6v1l7hx760lwrqx";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1kpycx57dqpkr3vp53b4nq75p9mflh0smxy8hkys4v4ndvkr5vbw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
          "zlib-rs" = [ "any_zlib" "libz-rs-sys" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "miniz_oxide" "rust_backend" ];
      };
      "flex-error" = rec {
        crateName = "flex-error";
        version = "0.4.4";
        edition = "2018";
        sha256 = "0ywxqij98lb1bd04xp5vs02y352g8cbc3zywl1zm04fyr69dh1n6";
        libName = "flex_error";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "eyre";
            packageId = "eyre";
            optional = true;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "anyhow" = [ "dep:anyhow" ];
          "anyhow_tracer" = [ "anyhow" "std" ];
          "default" = [ "full" ];
          "eyre" = [ "dep:eyre" ];
          "eyre_tracer" = [ "eyre" "std" ];
          "full" = [ "std" "eyre_tracer" "anyhow_tracer" ];
        };
        resolvedDefaultFeatures = [ "eyre" "eyre_tracer" "std" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foldhash" = rec {
        crateName = "foldhash";
        version = "0.1.5";
        edition = "2021";
        sha256 = "1wisr1xlc2bj7hk4rgkcjkz3j2x4dhd1h9lwk7mj8p71qpdgbi6r";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        libName = "foreign_types";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];

      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        libName = "foreign_types_shared";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "frunk" = rec {
        crateName = "frunk";
        version = "0.4.3";
        edition = "2021";
        sha256 = "05xq51xfawnlgcz4qs6pn66c9sns1p3bl61nfpn77hlgfcbnljw7";
        authors = [
          "Lloyd <lloydmeta@gmail.com>"
        ];
        dependencies = [
          {
            name = "frunk_core";
            packageId = "frunk_core";
            usesDefaultFeatures = false;
          }
          {
            name = "frunk_derives";
            packageId = "frunk_derives";
            usesDefaultFeatures = false;
          }
          {
            name = "frunk_proc_macros";
            packageId = "frunk_proc_macros";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "frunk_core/alloc" "serde?/alloc" ];
          "default" = [ "validated" "proc-macros" "alloc" ];
          "frunk_proc_macros" = [ "dep:frunk_proc_macros" ];
          "proc-macros" = [ "frunk_proc_macros" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "serde?/std" ];
          "validated" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "frunk_proc_macros" "proc-macros" "validated" ];
      };
      "frunk_core" = rec {
        crateName = "frunk_core";
        version = "0.4.3";
        edition = "2021";
        sha256 = "0p3abck4syfgc1bihxjrbl0184bn3718bm9ki1w8f0b5jmqa0a9m";
        authors = [
          "Lloyd <lloydmeta@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "frunk_derives" = rec {
        crateName = "frunk_derives";
        version = "0.4.3";
        edition = "2021";
        sha256 = "1qxavv8mzl8nh9gayxk0f2rsyxyw44f74py70jv883mf50y8p6z9";
        procMacro = true;
        authors = [
          "Lloyd <lloydmeta@gmail.com>"
        ];
        dependencies = [
          {
            name = "frunk_proc_macro_helpers";
            packageId = "frunk_proc_macro_helpers";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "frunk_proc_macro_helpers" = rec {
        crateName = "frunk_proc_macro_helpers";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1km5zr360x73xjn4v9f7d9wc4s0gsb57s8ifa5z9fxy36vpmda85";
        authors = [
          "Lloyd <lloydmeta@gmail.com>"
        ];
        dependencies = [
          {
            name = "frunk_core";
            packageId = "frunk_core";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "frunk_proc_macros" = rec {
        crateName = "frunk_proc_macros";
        version = "0.1.3";
        edition = "2021";
        sha256 = "0lfwyhyzj6zr3w472nk3xrgv23yjm8ksazm2zq9jfrl3j4n6rs37";
        procMacro = true;
        authors = [
          "Lloyd <lloydmeta@gmail.com>"
        ];
        dependencies = [
          {
            name = "frunk_core";
            packageId = "frunk_core";
            usesDefaultFeatures = false;
          }
          {
            name = "frunk_proc_macro_helpers";
            packageId = "frunk_proc_macro_helpers";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "fs2" = rec {
        crateName = "fs2";
        version = "0.4.3";
        edition = "2015";
        sha256 = "04v2hwk7035c088f19mfl5b1lz84gnvv2hv6m935n0hmirszqr4m";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std" ];
          }
        ];

      };
      "funty" = rec {
        crateName = "funty";
        version = "2.0.0";
        edition = "2018";
        sha256 = "177w048bm0046qlzvp33ag3ghqkqw4ncpzcm5lq36gxf2lla7mg6";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-locks" = rec {
        crateName = "futures-locks";
        version = "0.7.1";
        edition = "2018";
        sha256 = "01jdx6w1flwwli7drgl65z2ycd2fsjww0djmgkk6gyasczinzv25";
        libName = "futures_locks";
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
          }
        ];
        features = {
          "default" = [ "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-timer" = rec {
        crateName = "futures-timer";
        version = "3.0.3";
        edition = "2018";
        sha256 = "094vw8k37djpbwv74bwf2qb7n6v6ghif4myss6smd6hgyajb127j";
        libName = "futures_timer";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "gloo-timers";
            packageId = "gloo-timers";
            optional = true;
            features = [ "futures" ];
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper 0.4.0";
            optional = true;
          }
        ];
        features = {
          "gloo-timers" = [ "dep:gloo-timers" ];
          "send_wrapper" = [ "dep:send_wrapper" ];
          "wasm-bindgen" = [ "gloo-timers" "send_wrapper" ];
        };
        resolvedDefaultFeatures = [ "gloo-timers" "send_wrapper" "wasm-bindgen" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" ];
      };
      "futures-utils-wasm" = rec {
        crateName = "futures-utils-wasm";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1sapb9grci03nlssfgja1w1d8z8gz4kkgzj5nmcal0af0q7jn0a2";
        libName = "futures_utils_wasm";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        features = {
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];

      };
      "gcd" = rec {
        crateName = "gcd";
        version = "2.3.0";
        edition = "2021";
        sha256 = "06l4fib4dh4m6gazdrzzzinhvcpcfh05r4i4gzscl03vnjhqnx8x";
        authors = [
          "Corey Farwell <coreyf@rwell.org>"
        ];

      };
      "generic-array 0.14.7" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" "zeroize" ];
      };
      "generic-array 1.2.0" = rec {
        crateName = "generic-array";
        version = "1.2.0";
        edition = "2021";
        sha256 = "00qpb5rxfiv5mvdb2rvqmw40h612ysvwl36car8r66ypr55l9j78";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
            features = [ "const-generics" ];
          }
        ];
        features = {
          "const-default" = [ "dep:const-default" ];
          "faster-hex" = [ "dep:faster-hex" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" ];
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "custom" "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "getrandom 0.3.3" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = { target, features }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi 0.14.2+wasi-0.2.4";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "dep:compiler_builtins" "dep:core" ];
          "wasm_js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" "wasm_js" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "git2" = rec {
        crateName = "git2";
        version = "0.19.0";
        edition = "2018";
        sha256 = "091pv7866z1qjq800ys0wjv8n73wrv7fqdrddxcnq36w8lzbf0xr";
        authors = [
          "Josh Triplett <josh@joshtriplett.org>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libgit2-sys";
            packageId = "libgit2-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "ssh" "https" "ssh_key_from_memory" ];
          "https" = [ "libgit2-sys/https" "openssl-sys" "openssl-probe" ];
          "openssl-probe" = [ "dep:openssl-probe" ];
          "openssl-sys" = [ "dep:openssl-sys" ];
          "ssh" = [ "libgit2-sys/ssh" ];
          "ssh_key_from_memory" = [ "libgit2-sys/ssh_key_from_memory" ];
          "vendored-libgit2" = [ "libgit2-sys/vendored" ];
          "vendored-openssl" = [ "openssl-sys/vendored" "libgit2-sys/vendored-openssl" ];
          "zlib-ng-compat" = [ "libgit2-sys/zlib-ng-compat" ];
        };
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cm2w34b5w45fxr522h5b0fv1bxchfswcj560m3pnjbia7asvld8";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "gloo-timers" = rec {
        crateName = "gloo-timers";
        version = "0.2.6";
        edition = "2018";
        sha256 = "0p2yqcxw0q9kclhwpgshq1r4ijns07nmmagll3lvrgl7pdk5m6cv";
        libName = "gloo_timers";
        authors = [
          "Rust and WebAssembly Working Group"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "futures" = [ "futures-core" "futures-channel" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-channel" "futures-core" ];
      };
      "group 0.12.1" = rec {
        crateName = "group";
        version = "0.12.1";
        edition = "2021";
        sha256 = "1ixspxqdpq0hxg0hd9s6rngrp6rll21v4jjnr7ar1lzvdhxgpysx";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "memuse";
            packageId = "memuse";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "memuse" "wnaf-memuse" ];
      };
      "group 0.13.0" = rec {
        crateName = "group";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0qqs2p5vqnv3zvq9mfjkmw3qlvgqb0c3cm6p33srkh7pc9sfzygh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.13.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "h2 0.3.26" = rec {
        crateName = "h2";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1s7msnfv7xprzs6xzfj5sg6p8bjcdpcqcmjjbkd345cyi1x55zl1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "h2 0.4.10" = rec {
        crateName = "h2";
        version = "0.4.10";
        edition = "2021";
        sha256 = "19f0va87lhzrc0lmwkgcz1z0haf6glajb4icp0b7n50vdmkilhm9";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1j83v0xaqvrw50ppn0g33zig0zsbdi7xiqbzgn7sd5al57nrd4a5";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [ "dep:rand" "dep:rand_distr" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
      };
      "halo2" = rec {
        crateName = "halo2";
        version = "0.1.0-beta.2";
        edition = "2018";
        sha256 = "15armrhslknn33pc9lk1b94phlxxsm5a8b8h70azwlw2ndwwf8ra";
        authors = [
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "halo2_proofs";
            packageId = "halo2_proofs";
          }
        ];

      };
      "halo2_proofs" = rec {
        crateName = "halo2_proofs";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0q1pjcazcfz92rscc875plixzwznag3qbdpjqxj87vmd942ph9g9";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
          }
          {
            name = "group";
            packageId = "group 0.12.1";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves 0.4.1";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "dev-graph" = [ "plotters" "tabbycat" ];
          "gadget-traces" = [ "backtrace" ];
          "plotters" = [ "dep:plotters" ];
          "tabbycat" = [ "dep:tabbycat" ];
        };
      };
      "hash32" = rec {
        crateName = "hash32";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01h68z8qi5gl9lnr17nz10lay8wjiidyjdyd60kqx8ibj090pmj7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];

      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.13.2" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "allocator-api2" "default" "inline-more" "raw" "serde" ];
      };
      "hashbrown 0.15.3" = rec {
        crateName = "hashbrown";
        version = "0.15.3";
        edition = "2021";
        sha256 = "1cwfw1yzkvsqkhmkg5igdvgsl8a0wyi716cn83k2j8h09ma6rcl4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "equivalent";
            packageId = "equivalent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "allocator-api2" "default" "default-hasher" "equivalent" "inline-more" "raw-entry" "serde" ];
      };
      "hashers" = rec {
        crateName = "hashers";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0c1w7sanj02r4sgdz0xpx9jn2g77f5zmhmhf49pp8npa2lxskg5j";
        authors = [
          "Tommy M. McGuire <mcguire@crsr.net>"
        ];
        dependencies = [
          {
            name = "fxhash";
            packageId = "fxhash";
          }
        ];

      };
      "heapless" = rec {
        crateName = "heapless";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1b9zpdjv4qkl2511s2c80fz16fx9in4m9qkhbaa8j73032v9xyqb";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "hash32";
            packageId = "hash32";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt-03" = [ "dep:defmt" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable-atomic-critical-section" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/critical-section" ];
          "portable-atomic-unsafe-assume-single-core" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/unsafe-assume-single-core" ];
          "serde" = [ "dep:serde" ];
          "ufmt" = [ "dep:ufmt-write" ];
        };
      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.5.1";
        edition = "2021";
        sha256 = "026bh0y8gpfd62gjm7gx6nyf6bgdyxdn0jc67i1ysl37hm3cwm7i";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "serde" "std" ];
      };
      "hex-literal" = rec {
        crateName = "hex-literal";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0iny5inkixsdr41pm2vkqh3fl66752z5j5c0cdxw16yl9ryjdqkg";
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "hmac 0.12.1" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "reset" ];
      };
      "hmac 0.8.1" = rec {
        crateName = "hmac";
        version = "0.8.1";
        edition = "2018";
        sha256 = "0h48wc7iysh4xd6ci4prh8bb7nszijrh9w3blaaq8a6cilk8hs0j";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
            features = [ "dev" ];
          }
        ];

      };
      "hmac-drbg" = rec {
        crateName = "hmac-drbg";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1cc5ddks8bg3512fzrd4n2gqr1kqkvg1l33fv9s6anyzjh9hmshp";
        libName = "hmac_drbg";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "hmac";
            packageId = "hmac 0.8.1";
          }
        ];

      };
      "home" = rec {
        crateName = "home";
        version = "0.5.11";
        edition = "2021";
        sha256 = "1kxb4k87a9sayr8jipr7nq9wpgmjk4hk4047hmf9kc24692k75aq";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_UI_Shell" "Win32_System_Com" ];
          }
        ];

      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];

      };
      "http 1.3.1" = rec {
        crateName = "http";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0r95i5h7dr1xadp1ac9453w0s62s27hzkam356nyx2d9mqqmva7l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "http-body 0.4.6" = rec {
        crateName = "http-body";
        version = "0.4.6";
        edition = "2018";
        sha256 = "1lmyjfk6bqk6k9gkn1dxq770sb78pqbqshga241hr5p995bb5skw";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "http-body 1.0.1" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0jm6jv4gxsnlsi1kzdyffjrj8cfr3zninnxpw73mvkxy4qzdj8dh";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "channel" = [ "dep:tokio" ];
          "full" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.10.1";
        edition = "2018";
        sha256 = "11ycd554bw2dkgw0q61xsa7a4jn1wb1xbfacmf3dbwsikvkkvgvd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.2.0";
        edition = "2021";
        sha256 = "17rz8jhh1mcv4b03wnknhv1shwq2v9vhkhlfg884pprsig62l4cv";

      };
      "hyper 0.14.32" = rec {
        crateName = "hyper";
        version = "0.14.32";
        edition = "2018";
        sha256 = "1rvcb0smz8q1i0y6p7rwxr02x5sclfg2hhxf3g0774zczn0cgps1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "ffi" = [ "libc" ];
          "full" = [ "client" "http1" "http2" "server" "stream" "runtime" ];
          "h2" = [ "dep:h2" ];
          "http2" = [ "h2" ];
          "libc" = [ "dep:libc" ];
          "runtime" = [ "tcp" "tokio/rt" "tokio/time" ];
          "socket2" = [ "dep:socket2" ];
          "tcp" = [ "socket2" "tokio/net" "tokio/rt" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "full" "h2" "http1" "http2" "runtime" "server" "socket2" "stream" "tcp" ];
      };
      "hyper 1.6.0" = rec {
        crateName = "hyper";
        version = "1.6.0";
        edition = "2021";
        sha256 = "103ggny2k31z0iq2gzwk2vbx601wx6xkpjpxn40hr3p3b0b5fayc";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.4.10";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "const_generics" "const_new" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "client" = [ "dep:want" "dep:pin-project-lite" "dep:smallvec" ];
          "ffi" = [ "dep:http-body-util" "futures-util?/alloc" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "http1" = [ "dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa" ];
          "http2" = [ "dep:futures-channel" "dep:futures-util" "dep:h2" ];
          "server" = [ "dep:httpdate" "dep:pin-project-lite" "dep:smallvec" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http1" "http2" "server" ];
      };
      "hyper-rustls 0.24.2" = rec {
        crateName = "hyper-rustls";
        version = "0.24.2";
        edition = "2021";
        sha256 = "1475j4a2nczz4aajzzsq3hpwg1zacmzbqg393a14j80ff8izsgpc";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            usesDefaultFeatures = false;
            features = [ "client" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            features = [ "full" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "acceptor" = [ "hyper/server" "tokio-runtime" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "acceptor" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "tokio-runtime" "rustls-native-certs" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "tokio-runtime" = [ "hyper/runtime" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "tokio-runtime" "webpki-roots" ];
        };
      };
      "hyper-rustls 0.27.6" = rec {
        crateName = "hyper-rustls";
        version = "0.27.6";
        edition = "2021";
        sha256 = "0va008pmz5h062wnh2h08d3r3iizvqnw68k5ji8frp0vw6aib803";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.0";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "aws-lc-rs" ];
          "fips" = [ "aws-lc-rs" "rustls/fips" ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "http1" "http2" "ring" "tls12" "webpki-roots" "webpki-tokio" ];
      };
      "hyper-timeout 0.4.1" = rec {
        crateName = "hyper-timeout";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1c8k3g8k2yh1gxvsx9p7amkimgxhl9kafwpj7jyf8ywc5r45ifdv";
        libName = "hyper_timeout";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            features = [ "client" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-io-timeout";
            packageId = "tokio-io-timeout";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            features = [ "client" "http1" "tcp" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "io-util" "macros" ];
          }
        ];

      };
      "hyper-timeout 0.5.2" = rec {
        crateName = "hyper-timeout";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1c431l5ckr698248yd6bnsmizjy2m1da02cbpmsnmkpvpxkdb41b";
        libName = "hyper_timeout";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "http1" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            features = [ "http1" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "http1" "server" "server-graceful" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "io-util" "macros" ];
          }
        ];

      };
      "hyper-tls 0.5.0" = rec {
        crateName = "hyper-tls";
        version = "0.5.0";
        edition = "2018";
        sha256 = "01crgy13102iagakf6q4mb75dprzr7ps1gj0l5hxm1cvm7gks66n";
        libName = "hyper_tls";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            usesDefaultFeatures = false;
            features = [ "tcp" "client" ];
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            usesDefaultFeatures = false;
            features = [ "http1" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "io-util" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "hyper-tls 0.6.0" = rec {
        crateName = "hyper-tls";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1q36x2yps6hhvxq5r7mc8ph9zz6xlb573gx0x3yskb0fi736y83h";
        libName = "hyper_tls";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "http1" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "io-util" ];
          }
        ];
        features = {
          "alpn" = [ "native-tls/alpn" ];
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.14";
        edition = "2021";
        sha256 = "1nqvf5azmv8p7hs5ghjlbgfya7xaafq377vppdazxbq8zzdxybyw";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "system-configuration";
            packageId = "system-configuration 0.6.1";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-registry";
            packageId = "windows-registry";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" "signal" ];
          }
        ];
        features = {
          "client" = [ "hyper/client" "dep:tracing" "dep:futures-channel" "dep:tower-service" ];
          "client-legacy" = [ "client" "dep:socket2" "tokio/sync" "dep:libc" "dep:futures-util" ];
          "client-proxy" = [ "client" "dep:base64" "dep:ipnet" "dep:percent-encoding" ];
          "client-proxy-system" = [ "dep:system-configuration" "dep:windows-registry" ];
          "full" = [ "client" "client-legacy" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" "tracing" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [ "server" "http1" "http2" ];
          "server-graceful" = [ "server" "tokio/sync" ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [ "dep:tokio" "tokio/net" "tokio/rt" "tokio/time" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "client-legacy" "client-proxy" "client-proxy-system" "default" "http1" "http2" "server" "server-auto" "service" "tokio" ];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.63";
        edition = "2021";
        sha256 = "1n171f5lbc7bryzmp1h30zw86zbvl5480aq02z92lcdwvvjikjdh";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "ibc-proto" = rec {
        crateName = "ibc-proto";
        version = "0.36.0";
        edition = "2021";
        sha256 = "0vhd0m84zrmb9zpsnj1sbh243l30mk6mpc6lvhf52f7xcb5rl5xw";
        libName = "ibc_proto";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "ics23";
            packageId = "ics23";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.11.9";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.33.2";
            usesDefaultFeatures = false;
          }
          {
            name = "tonic";
            packageId = "tonic 0.9.2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "client" = [ "std" "tonic" "tonic/codegen" "tonic/transport" "tonic/prost" ];
          "default" = [ "std" "client" ];
          "json-schema" = [ "std" "schemars" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" "dep:scale-info" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "ics23/serde" ];
          "server" = [ "std" "tonic" "tonic/codegen" "tonic/transport" "tonic/prost" ];
          "std" = [ "prost/std" "bytes/std" "subtle-encoding/std" "base64/std" "flex-error/std" "ics23/std" ];
          "tonic" = [ "dep:tonic" ];
        };
        resolvedDefaultFeatures = [ "client" "std" "tonic" ];
      };
      "ics23" = rec {
        crateName = "ics23";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1m7n3g4k6y65c1badbzrnw5prn15r13g4r6877vpcvlm6ymlnba4";
        authors = [
          "Ethan Frey <ethanfrey@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "informalsystems-pbjson";
            packageId = "informalsystems-pbjson";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.11.9";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" "host-functions" ];
          "host-functions" = [ "sha2" "sha3" "ripemd" ];
          "informalsystems-pbjson" = [ "dep:informalsystems-pbjson" ];
          "ripemd" = [ "dep:ripemd" ];
          "serde" = [ "dep:serde" "informalsystems-pbjson" ];
          "sha2" = [ "dep:sha2" ];
          "sha3" = [ "dep:sha3" ];
          "std" = [ "prost/std" "bytes/std" "hex/std" "anyhow/std" "informalsystems-pbjson/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "informalsystems-pbjson" "serde" "std" ];
      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0izfgypv1hsxlz1h8fc2aak641iyvkak16aaz5b4aqg3s3sp4010";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" ];
          "databake" = [ "dep:databake" "zerovec/databake" ];
          "serde" = [ "dep:serde" "zerovec/serde" "potential_utf/serde" "alloc" ];
        };
      };
      "icu_locale_core" = rec {
        crateName = "icu_locale_core";
        version = "2.0.0";
        edition = "2021";
        sha256 = "02phv7vwhyx6vmaqgwkh2p4kc2kciykv2px6g4h8glxfrh02gphc";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "alloc" ];
          "serde" = [ "dep:serde" "tinystr/serde" "alloc" ];
          "zerovec" = [ "dep:zerovec" "tinystr/zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0ybrnfnxx4sf09gsrxri8p48qifn54il6n3dq2xxgx4dw7l80s23";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "dep:icu_normalizer_data" "icu_properties?/compiled_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "icu_properties" "icu_collections/databake" "zerovec/databake" "icu_properties?/datagen" "icu_provider/export" ];
          "default" = [ "compiled_data" "utf8_iter" "utf16_iter" ];
          "icu_properties" = [ "dep:icu_properties" ];
          "serde" = [ "dep:serde" "icu_collections/serde" "zerovec/serde" "icu_properties?/serde" "icu_provider/serde" ];
          "utf16_iter" = [ "dep:utf16_iter" "write16" ];
          "utf8_iter" = [ "dep:utf8_iter" ];
          "write16" = [ "dep:write16" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1lvjpzxndyhhjyzd1f6vi961gvzhj244nribfpdqxjdgjdl0s880";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0az349pjg8f18lrjbdmxcpg676a7iz2ibc09d2wfz57b3sf62v01";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = [ "yoke" "zerofrom" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" "icu_collections/alloc" ];
          "compiled_data" = [ "dep:icu_properties_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "potential_utf/databake" "zerovec/databake" "icu_collections/databake" "icu_locale_core/databake" "zerotrie/databake" "icu_provider/export" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "icu_locale_core/serde" "potential_utf/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" "zerotrie/serde" ];
          "unicode_bidi" = [ "dep:unicode-bidi" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0cnn3fkq6k88w7p86w7hsd1254s4sl783rpz4p6hlccq74a5k119";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1bz5v02gxv1i06yhdhs2kbwxkw3ny9r2vvj9j288fhazgfi0vj03";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "icu_locale_core/alloc" "zerovec/alloc" "zerotrie/alloc" ];
          "baked" = [ "zerotrie" ];
          "deserialize_bincode_1" = [ "serde" "dep:bincode" "std" ];
          "deserialize_json" = [ "serde" "dep:serde_json" ];
          "deserialize_postcard_1" = [ "serde" "dep:postcard" ];
          "export" = [ "serde" "dep:erased-serde" "dep:databake" "std" "sync" "dep:postcard" "zerovec/databake" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" "yoke/serde" ];
          "std" = [ "alloc" ];
          "zerotrie" = [ "dep:zerotrie" ];
        };
        resolvedDefaultFeatures = [ "baked" "zerotrie" ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = [ "idna_adapter/compiled_data" ];
          "default" = [ "std" "compiled_data" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "compiled_data" "std" ];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.1";
        edition = "2021";
        sha256 = "0i0339pxig6mv786nkqcxnwqa87v4m94b2653f6k3aj0jmhfkjis";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "icu_normalizer/compiled_data" "icu_properties/compiled_data" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "impl-codec" = rec {
        crateName = "impl-codec";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0bvzlxap996zrai9shwcnzris117r1gx2dizgxhiark27402fsms";
        libName = "impl_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "max-encoded-len" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "impl-rlp" = rec {
        crateName = "impl-rlp";
        version = "0.3.0";
        edition = "2018";
        sha256 = "021869d5s47ili9kmhm9y80qpsbf0wwdap14qzfpb84pjbw210pj";
        libName = "impl_rlp";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "rlp";
            packageId = "rlp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "rlp/std" ];
        };
      };
      "impl-serde" = rec {
        crateName = "impl-serde";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k9mr5wfypgz95azk0k9bgsdb66kd5ia7fjkr2q3vbi8f338zj7b";
        libName = "impl_serde";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
      };
      "impl-trait-for-tuples" = rec {
        crateName = "impl-trait-for-tuples";
        version = "0.2.3";
        edition = "2021";
        sha256 = "1nagmq8p805hlg04zqknjd9sjp8h5d5n1r2gk304iy5b8crmmsx0";
        procMacro = true;
        libName = "impl_trait_for_tuples";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" "fold" "extra-traits" ];
          }
        ];

      };
      "indenter" = rec {
        crateName = "indenter";
        version = "0.3.3";
        edition = "2018";
        sha256 = "10y6i6y4ls7xsfsc1r3p5j2hhbxhaqnk5zzk8aj52b14v05ba8yf";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde-1" "std" ];
      };
      "indexmap 2.9.0" = rec {
        crateName = "indexmap";
        version = "2.9.0";
        edition = "2021";
        sha256 = "07m15a571yywmvqyb7ms717q9n42b46badbpsmx215jrg7dhv9yf";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "indicatif 0.16.2" = rec {
        crateName = "indicatif";
        version = "0.16.2";
        edition = "2018";
        sha256 = "06xyjs0kzqiqkjn60n1miwm2l87sa9p2lmzz0ymq18y72z37s81d";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Dirkjan Ochtman <dirkjan@ochtman.nl>"
        ];
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "improved_unicode" = [ "unicode-segmentation" "unicode-width" "console/unicode-width" ];
          "rayon" = [ "dep:rayon" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "with_rayon" = [ "rayon" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "indicatif 0.17.11" = rec {
        crateName = "indicatif";
        version = "0.17.11";
        edition = "2021";
        sha256 = "0db2b2r79r9x8x4lysq1ci9xm13c0xg0sqn3z960yh2bk2430fqq";
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
            features = [ "ansi-parsing" ];
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "default" = [ "unicode-width" "console/unicode-width" ];
          "futures" = [ "dep:futures-core" ];
          "improved_unicode" = [ "unicode-segmentation" "unicode-width" "console/unicode-width" ];
          "in_memory" = [ "vt100" ];
          "rayon" = [ "dep:rayon" ];
          "tokio" = [ "dep:tokio" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "vt100" = [ "dep:vt100" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode-width" ];
      };
      "informalsystems-pbjson" = rec {
        crateName = "informalsystems-pbjson";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1yz1g9w2dfgj2jz8r2chh8991qxiysafzilimhp43skvz28cvvml";
        libName = "pbjson";
        authors = [
          "Raphael Taylor-Davies <r.taylordavies@googlemail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" "base64/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.4";
        edition = "2021";
        sha256 = "008xfl1jn9rxsq19phnhbimccf4p64880jmnpg59wqi07kk117w7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
          "std" = [ "block-padding/std" ];
        };
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "interprocess" = rec {
        crateName = "interprocess";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0bgcvxjgqqm9m1iwfppc4id98d4imkk8x6l5hww9j8i3pl2v8hfr";
        authors = [
          "Goat <v.toncharov@gmail.com>"
        ];
        dependencies = [
          {
            name = "doctest-file";
            packageId = "doctest-file";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
            features = [ "extra_traits" ];
          }
          {
            name = "recvmsg";
            packageId = "recvmsg";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" "rt" "net" "time" "io-util" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "sync" "rt-multi-thread" "fs" "net" "time" "io-util" ];
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security" "Win32_Security_Authorization" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_Threading" "Win32_System_Memory" "Win32_System_SystemServices" "Win32_System_LibraryLoader" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt-multi-thread" "io-util" "macros" ];
          }
        ];
        features = {
          "async" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
          "tokio" = [ "dep:tokio" "async" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "futures-core" "tokio" ];
      };
      "inventory" = rec {
        crateName = "inventory";
        version = "0.3.20";
        edition = "2021";
        sha256 = "10ybwdx175d7xpvzpz0g2cczn0yvqykkwf75974z55sq5k6xf25b";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.11.0";
        edition = "2018";
        sha256 = "0c5i9sfi2asai28m8xp48k5gvwkqrg5ffpi767py6mzsrswv17s6";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [ "serde" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "iri-string" = rec {
        crateName = "iri-string";
        version = "0.7.8";
        edition = "2021";
        sha256 = "1cl0wfq97wq4s1p4dl0ix5cfgsc5fn7l22ljgw9ab9x1qglypifv";
        libName = "iri_string";
        authors = [
          "YOSHIOKA Takuma <nop_thread@nops.red>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "memchr" = [ "dep:memchr" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.16";
        edition = "2018";
        sha256 = "1acm63whnpwiw1padm9bpqz04sz8msymrmyxc55mvlq8hqqpykg0";
        libName = "is_terminal";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
        ];

      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.11.0" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.14.0" = rec {
        crateName = "itertools";
        version = "0.14.0";
        edition = "2018";
        sha256 = "118j6l1vs2mx65dqhwyssbrxpawa90886m3mzafdvyip41w2q69b";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.33";
        edition = "2021";
        sha256 = "12jkn3cxvfs7jsb6knmh9y2b41lwmrk3vdqywkmssx61jzq65wiq";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = { target, features }: (target."windows" or false);
            features = [ "std" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "13x2qcky5l22z4xgivi59xhjjx4kxir1zg7gcj0f1ijzd4yg7yhw";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "jsonwebtoken" = rec {
        crateName = "jsonwebtoken";
        version = "8.3.0";
        edition = "2021";
        sha256 = "0y034cm6nwb9ljakh04j281asjjkbcaz9w1ziwykr81ski6xlwb9";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "pem";
            packageId = "pem";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.16.20";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "use_pem" ];
          "pem" = [ "dep:pem" ];
          "simple_asn1" = [ "dep:simple_asn1" ];
          "use_pem" = [ "pem" "simple_asn1" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "simple_asn1" "use_pem" ];
      };
      "jubjub" = rec {
        crateName = "jubjub";
        version = "0.9.0";
        edition = "2021";
        sha256 = "03vvs9l22ni2zlllb59b0dcnbi6gmkv4yrh55ddwvqazk1gxyxd5";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Eirik Ogilvie-Wigley <eowigley@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bls12_381";
            packageId = "bls12_381";
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "ff/alloc" "group/alloc" ];
          "bits" = [ "ff/bits" ];
          "default" = [ "alloc" "bits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "default" ];
      };
      "k256 0.11.6" = rec {
        crateName = "k256";
        version = "0.11.6";
        edition = "2021";
        sha256 = "12zwik967f54b4k5mndy1jyqd937c0whhdb2d5rskh3y3ssy1hbj";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.14.8";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.14.8";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "schnorr" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/sign" "ecdsa-core/verify" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "keccak256" = [ "digest" "sha3" ];
          "pem" = [ "ecdsa-core/pem" "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "schnorr" = [ "arithmetic" "sha256" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "sha3" = [ "dep:sha3" ];
          "std" = [ "ecdsa-core/std" "elliptic-curve/std" ];
          "test-vectors" = [ "hex-literal" ];
        };
        resolvedDefaultFeatures = [ "arithmetic" "digest" "ecdsa" "ecdsa-core" "keccak256" "sha2" "sha256" "sha3" ];
      };
      "k256 0.13.4" = rec {
        crateName = "k256";
        version = "0.13.4";
        edition = "2021";
        sha256 = "06s1lxjp49zgmbxnfdy2kajyklbkl4s3jvdvy0amg552padr3qzn";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "critical-section" = [ "once_cell/critical-section" "precomputed-tables" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "precomputed-tables" "schnorr" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "once_cell" = [ "dep:once_cell" ];
          "pem" = [ "ecdsa-core/pem" "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "precomputed-tables" = [ "arithmetic" "once_cell" ];
          "schnorr" = [ "arithmetic" "sha256" "signature" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" "once_cell?/std" ];
          "test-vectors" = [ "hex-literal" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "expose-field" "once_cell" "pkcs8" "precomputed-tables" "schnorr" "sha2" "sha256" "signature" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "keccak-asm" = rec {
        crateName = "keccak-asm";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1dl33irvzsiq5sawa2w8cdalaz7hqfbxi41g124h884vldb1hpah";
        libName = "keccak_asm";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "sha3-asm";
            packageId = "sha3-asm";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lalrpop" = rec {
        crateName = "lalrpop";
        version = "0.20.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1jn1qg7gs9kka6sy2sbxx8wp6z8lm892ksr414b9yaansrx0gjsm";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "ascii-canvas";
            packageId = "ascii-canvas";
            usesDefaultFeatures = false;
          }
          {
            name = "bit-set";
            packageId = "bit-set 0.5.3";
            usesDefaultFeatures = false;
          }
          {
            name = "ena";
            packageId = "ena";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
            usesDefaultFeatures = false;
            features = [ "use_std" ];
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
            usesDefaultFeatures = false;
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.6.5";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "string_cache";
            packageId = "string_cache";
            usesDefaultFeatures = false;
          }
          {
            name = "term";
            packageId = "term";
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "sha3" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            usesDefaultFeatures = false;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "default" = [ "lexer" "unicode" "pico-args" ];
          "lexer" = [ "lalrpop-util/lexer" ];
          "pico-args" = [ "dep:pico-args" ];
          "unicode" = [ "regex/unicode" "regex-syntax/unicode" "lalrpop-util/unicode" ];
        };
      };
      "lalrpop-util" = rec {
        crateName = "lalrpop-util";
        version = "0.20.2";
        edition = "2021";
        sha256 = "0lr5r12bh9gjjlmnjrbblf4bfcwnad4gz1hqjvp34yzb22ln0x2h";
        libName = "lalrpop_util";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "perf" "syntax" "hybrid" ];
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "lexer" = [ "regex-automata/std" "std" ];
          "regex-automata" = [ "dep:regex-automata" ];
          "unicode" = [ "regex-automata?/unicode" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin 0.9.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "once" ];
          }
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0m8gw7dn30i0zjjpjdyf6pc16c34nl71lpv461mix50x3p70h3c3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "clippy" = [ "dep:clippy" ];
          "nightly-testing" = [ "clippy" "nightly" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "lexpr" = rec {
        crateName = "lexpr";
        version = "0.2.7";
        edition = "2018";
        sha256 = "0rxw93z7jipapzj4r75qjw0cgvcjbg6z1nzm10xkchplkmmdx13a";
        authors = [
          "Andreas Rottmann <mail@r0tty.org>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "lexpr-macros";
            packageId = "lexpr-macros";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
        ];
        features = {
          "default" = [ "fast-float-parsing" ];
        };
        resolvedDefaultFeatures = [ "default" "fast-float-parsing" ];
      };
      "lexpr-macros" = rec {
        crateName = "lexpr-macros";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1frm3zi3dhlrgbprfhynvmsga52jhv2bby50q651mj45p65wpd9n";
        procMacro = true;
        libName = "lexpr_macros";
        authors = [
          "Andreas Rottmann <mail@r0tty.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.172";
        edition = "2021";
        sha256 = "1ykz4skj7gac14znljm5clbnrhini38jkq3d60jggx3y5w2ayl6p";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libgit2-sys" = rec {
        crateName = "libgit2-sys";
        version = "0.17.0+1.8.1";
        edition = "2018";
        links = "git2";
        sha256 = "093jxfl2i9vxdlgf7vk9d040sjwy0nq4fid640y7qix6m0k26iqh";
        libName = "libgit2_sys";
        libPath = "lib.rs";
        authors = [
          "Josh Triplett <josh@joshtriplett.org>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            usesDefaultFeatures = false;
            features = [ "libc" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "https" = [ "openssl-sys" ];
          "libssh2-sys" = [ "dep:libssh2-sys" ];
          "openssl-sys" = [ "dep:openssl-sys" ];
          "ssh" = [ "libssh2-sys" ];
          "vendored-openssl" = [ "openssl-sys/vendored" ];
          "zlib-ng-compat" = [ "libz-sys/zlib-ng" "libssh2-sys?/zlib-ng-compat" ];
        };
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.8.8";
        edition = "2015";
        sha256 = "0rw6q94psj3d6k0bi9nymqhyrz78lbdblryphhaszsw9p9ikj0q7";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.53.0";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.15";
        edition = "2021";
        sha256 = "1plpzf0p829viazdj57yw5dhmlr8ywf3apayxc2f2bq5a6mvryzr";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "default" = [ "arch" ];
          "unstable" = [ "unstable-intrinsics" "unstable-float" ];
        };
        resolvedDefaultFeatures = [ "arch" "default" ];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.3";
        edition = "2021";
        sha256 = "139602gzgs0k91zb7dvgj1qh4ynb8g1lbxsswdim18hcb6ykgzy0";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "call" "std" "redox_syscall" ];
          "ioslice" = [ "dep:ioslice" ];
          "mkns" = [ "ioslice" ];
          "redox_syscall" = [ "dep:redox_syscall" ];
        };
        resolvedDefaultFeatures = [ "call" "std" ];
      };
      "libsecp256k1" = rec {
        crateName = "libsecp256k1";
        version = "0.7.2";
        edition = "2018";
        sha256 = "0fbii0mfl9xwk9pivjcz2dvbq81qbzx0r9vrl02wkv95h5qik477";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "hmac-drbg";
            packageId = "hmac-drbg";
            optional = true;
          }
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "libsecp256k1-gen-ecmult";
            packageId = "libsecp256k1-gen-ecmult";
          }
          {
            name = "libsecp256k1-gen-genmult";
            packageId = "libsecp256k1-gen-genmult";
          }
        ];
        features = {
          "default" = [ "std" "hmac" "static-context" ];
          "hmac" = [ "hmac-drbg" "sha2" "typenum" ];
          "hmac-drbg" = [ "dep:hmac-drbg" ];
          "lazy-static-context" = [ "static-context" "lazy_static" "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "libsecp256k1-core/std" "sha2/std" "rand/std" "serde/std" "base64/std" ];
          "typenum" = [ "dep:typenum" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" "hmac-drbg" "sha2" "static-context" "std" "typenum" ];
      };
      "libsecp256k1-core" = rec {
        crateName = "libsecp256k1-core";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0lalbm1f67dd0cxpa12mjq0q6wvcq5bangjk9nj2519dcjxvksav";
        libName = "libsecp256k1_core";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "subtle/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libsecp256k1-gen-ecmult" = rec {
        crateName = "libsecp256k1-gen-ecmult";
        version = "0.3.0";
        edition = "2018";
        sha256 = "02a8rddxan8616rrq5b88hbw9ikz323psfk4fahyi1swql4chf1h";
        libName = "libsecp256k1_gen_ecmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libsecp256k1-gen-genmult" = rec {
        crateName = "libsecp256k1-gen-genmult";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0z3gl0x5rpdjrr3mds8620gk0h0qjfccr33f1v2ar7pc5jxddf1x";
        libName = "libsecp256k1_gen_genmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.1.22";
        edition = "2018";
        links = "z";
        sha256 = "07b5wxh0ska996kc0g2hanjhmb4di7ksm6ndljhr4pi0vykyfw4b";
        libName = "libz_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "cmake" = [ "dep:cmake" ];
          "default" = [ "libc" "stock-zlib" ];
          "libc" = [ "dep:libc" ];
          "zlib-ng" = [ "libc" "cmake" ];
          "zlib-ng-no-cmake-experimental-community-maintained" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "libc" ];
      };
      "linux-raw-sys 0.4.15" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.15";
        edition = "2021";
        sha256 = "1aq7r2g7786hyxhv40spzf2nhag5xbw2axxc1k8z5k1dsgdm4v6j";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" ];
      };
      "linux-raw-sys 0.9.4" = rec {
        crateName = "linux-raw-sys";
        version = "0.9.4";
        edition = "2021";
        sha256 = "04kyjdrq79lz9ibrf7czk6cv9d3jl597pb9738vzbsbzy1j5i56d";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" ];
      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0mlrlskwwhirxk3wsz9psh6nxcy491n0dh8zl02qgj0jzpssw7i4";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.13";
        edition = "2021";
        sha256 = "0rd73p4299mjwl4hhlfj9qr88v3r0kc8s1nszkfmnq2ky43nb4wn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lru" = rec {
        crateName = "lru";
        version = "0.12.5";
        edition = "2015";
        sha256 = "0f1a7cgqxbyhrmgaqqa11m3azwhcc36w0v5r4izgbhadl3sg8k13";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru-slab" = rec {
        crateName = "lru-slab";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0m2139k466qj3bnpk66bwivgcx3z88qkxvlzk70vd65jq373jaqi";
        libName = "lru_slab";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
        ];

      };
      "macro-string" = rec {
        crateName = "macro-string";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1qq42babqlm25823idy2h7q1q8lzx5k6s2bv73ww6pn6hr0869qv";
        libName = "macro_string";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "printing" "proc-macro" ];
          }
        ];

      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "matchit" = rec {
        crateName = "matchit";
        version = "0.7.3";
        edition = "2021";
        sha256 = "156bgdmmlv4crib31qhgg49nsjk88dxkdqp80ha2pk2rk6n6ax0f";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1kvq5rnpm4fzwmyv5nmnxygdhhb2369888a06gdc9pxyrzh7x7nq";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "md5-asm" ];
          "default" = [ "std" ];
          "md5-asm" = [ "dep:md5-asm" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memuse" = rec {
        crateName = "memuse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "0r692y5lwz0hqp604plsghh3d83zw76k16a6rbw8iw5l7vsbp5rx";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "nonempty" = [ "dep:nonempty" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.8";
        edition = "2021";
        sha256 = "0al9iy33flfgxawj789w2c8xxwg1n2r5vv6m6p5hl2fvd2vlgriv";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler2/rustc-dep-of-std" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "with-alloc" ];
      };
      "mio" = rec {
        crateName = "mio";
        version = "1.0.4";
        edition = "2021";
        sha256 = "073n3kam3nz8j8had35fd2nn7j6a33pi3y5w3kq608cari2d9gkq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "msgpacker" = rec {
        crateName = "msgpacker";
        version = "0.4.8";
        edition = "2021";
        sha256 = "1cr057qr7690xbrzyhqk9vpqw8nyxf5cwi3kfsf4w0vd7bn74jhk";
        authors = [
          "Victor Lopez <victor@codx.io>"
        ];
        dependencies = [
          {
            name = "msgpacker-derive";
            packageId = "msgpacker-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "msgpacker-derive" ];
          "msgpacker-derive" = [ "dep:msgpacker-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "msgpacker-derive" ];
      };
      "msgpacker-derive" = rec {
        crateName = "msgpacker-derive";
        version = "0.3.1";
        edition = "2021";
        sha256 = "0nkvymzhwq8vjxbj686dzm5gy74axrhsnrq628c615qdmjjyq9p9";
        procMacro = true;
        libName = "msgpacker_derive";
        authors = [
          "Victor Lopez <victor@codx.io>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.10.1";
        edition = "2015";
        sha256 = "1150lf0hjfjj4ksb8s3y0hl7a2nqzqlbh0is7vdym2iyjfrfr1qx";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "native-tls" = rec {
        crateName = "native-tls";
        version = "0.2.14";
        edition = "2015";
        sha256 = "03hga800x8bzkp8h7frnm7yp545dwwawgmaq673vx7byk1139pl7";
        libName = "native_tls";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "alpn" = [ "security-framework/alpn" ];
          "vendored" = [ "openssl/vendored" ];
        };
      };
      "neutron-std" = rec {
        crateName = "neutron-std";
        version = "5.1.4";
        edition = "2021";
        sha256 = "1myqkcxs7x62pizjn8apsnas2lgz1n550vlyg0cv5bjyqfphin4g";
        libName = "neutron_std";
        dependencies = [
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "cosmos-sdk-proto";
            packageId = "cosmos-sdk-proto 0.20.0";
            usesDefaultFeatures = false;
          }
          {
            name = "cosmwasm-schema";
            packageId = "cosmwasm-schema";
            usesDefaultFeatures = false;
          }
          {
            name = "cosmwasm-std";
            packageId = "cosmwasm-std";
            features = [ "cosmwasm_2_0" ];
          }
          {
            name = "neutron-std-derive";
            packageId = "neutron-std-derive";
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
          }
          {
            name = "protobuf";
            packageId = "protobuf";
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde-cw-value";
            packageId = "serde-cw-value";
          }
          {
            name = "serde-json-wasm";
            packageId = "serde-json-wasm";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "speedate";
            packageId = "speedate";
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.34.1";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
          }
        ];

      };
      "neutron-std-derive" = rec {
        crateName = "neutron-std-derive";
        version = "0.20.1";
        edition = "2021";
        sha256 = "04gcj81rd8icf44b0kq2nyqj5i5xvh01s524nr70rfyw0n099x12";
        procMacro = true;
        libName = "neutron_std_derive";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.6";
        edition = "2021";
        sha256 = "11phpf1mjxq6khk91yzcbd3ympm78m3ivl7xg6lg2c0lf66fy3k5";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];

      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        libName = "nohash_hasher";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ntapi" = rec {
        crateName = "ntapi";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1r38zhbwdvkis2mzs6671cm1p6djgsl49i7bwxzrvhwicdf8k8z8";
        authors = [
          "MSxDOS <melcodos@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "cfg" "evntrace" "in6addr" "inaddr" "minwinbase" "ntsecapi" "windef" "winioctl" ];
          }
        ];
        features = {
          "default" = [ "user" ];
          "impl-default" = [ "winapi/impl-default" ];
        };
        resolvedDefaultFeatures = [ "default" "user" ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num" = rec {
        crateName = "num";
        version = "0.4.3";
        edition = "2021";
        sha256 = "08yb2fc1psig7pkzaplm495yp7c30m4pykpkwmi5bxrgid705g9m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "alloc" = [ "dep:num-bigint" "num-rational/num-bigint" ];
          "default" = [ "std" ];
          "libm" = [ "num-complex/libm" "num-traits/libm" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "dep:num-bigint" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "std" ];
      };
      "num-bigint 0.3.3" = rec {
        crateName = "num-bigint";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hxjawydfbnxqyqza0n2sh5sk9rslm0wsn7xdh53dwnby8rphvsz";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-bigint 0.4.6" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.4.6";
        edition = "2021";
        sha256 = "15cla16mnw12xzf5g041nxbjjm9m85hdgadd5dl5d0b30w9qmy3k";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bytecheck" = [ "dep:bytecheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "num-traits/libm" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-derive 0.3.3" = rec {
        crateName = "num-derive";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0gbl94ckzqjdzy4j8b1p55mz01g6n1l9bckllqvaj0wfz7zm6sl7";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        features = {
          "full-syntax" = [ "syn/full" ];
        };
      };
      "num-derive 0.4.2" = rec {
        crateName = "num-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "00p2am9ma8jgd2v6xpsz621wc7wbn1yqi71g15gc3h67m7qmafgd";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-modular" = rec {
        crateName = "num-modular";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0zv4miws3q1i93a0bd9wgc4njrr5j5786kr99hzxi9vgycdjdfqp";
        libName = "num_modular";
        features = {
          "num-bigint" = [ "dep:num-bigint" ];
          "num-integer" = [ "dep:num-integer" ];
          "num-traits" = [ "dep:num-traits" ];
        };
      };
      "num-order" = rec {
        crateName = "num-order";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1dhvdncf91ljxh9sawnfxcbiqj1gnag08lyias0cy3y4jxmmjysk";
        libName = "num_order";
        dependencies = [
          {
            name = "num-modular";
            packageId = "num-modular";
          }
        ];
        features = {
          "num-bigint" = [ "dep:num-bigint" "num-traits" ];
          "num-complex" = [ "dep:num-complex" ];
          "num-rational" = [ "dep:num-rational" "num-traits" ];
          "num-traits" = [ "dep:num-traits" ];
        };
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.2";
        edition = "2021";
        sha256 = "093qndy02817vpgcqjnj139im3jl7vkq4h68kykdqqh577d18ggq";
        libName = "num_rational";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "num-bigint" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-bigint?/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "num-bigint" "num-bigint-std" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "libm" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.17.0";
        edition = "2015";
        sha256 = "0fxjazlng4z8cgbmsvbzv411wrg7x3hyxdq8nxixgzjswyylppwi";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "num_enum 0.5.11" = rec {
        crateName = "num_enum";
        version = "0.5.11";
        edition = "2018";
        sha256 = "1japmqhcxwn1d3k7q8jw58y7xfby51s16nzd6dkj483cj2pnqr0z";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive 0.5.11";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum 0.7.3" = rec {
        crateName = "num_enum";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0yai0vafhy85mvhknzfqd7lm04hzaln7i5c599rhy8mj831kyqaf";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive 0.7.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive 0.5.11" = rec {
        crateName = "num_enum_derive";
        version = "0.5.11";
        edition = "2018";
        sha256 = "16f7r4jila0ckcgdnfgqyhhb90w9m2pdbwayyqmwcci0j6ygkgyw";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "num_enum_derive 0.7.3" = rec {
        crateName = "num_enum_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0mksna1jj87ydh146gn6jcqkvvs920c3dgh0p4f3xk184kpl865g";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "num_threads" = rec {
        crateName = "num_threads";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1ngajbmhrgyhzrlc4d5ga9ych1vrfcvfsiqz6zv0h2dpr2wrhwsw";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("freebsd" == target."os" or null));
          }
        ];

      };
      "number_prefix" = rec {
        crateName = "number_prefix";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1wvh13wvlajqxkb1filsfzbrnq0vrmrw298v2j3sy82z1rm282w3";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nybbles" = rec {
        crateName = "nybbles";
        version = "0.3.4";
        edition = "2021";
        sha256 = "01xk08vfpcsl6bzgya1c135spd89jrs3lk0cxqj8j97p9mivp0w9";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
            features = [ "const_new" "union" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "dep:proptest" "smallvec/arbitrary" "std" ];
          "default" = [ "std" ];
          "nightly" = [ "smallvec/specialization" "smallvec/may_dangle" ];
          "rlp" = [ "dep:alloy-rlp" ];
          "serde" = [ "dep:serde" "smallvec/serde" ];
          "std" = [ "const-hex/std" "serde?/std" "alloy-rlp?/std" "proptest?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "once_cell_polyfill" = rec {
        crateName = "once_cell_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1bg0w99srq8h4mkl68l1mza2n2f2hvrg0n8vfa3izjr5nism32d4";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "oneshot" = rec {
        crateName = "oneshot";
        version = "0.1.11";
        edition = "2021";
        sha256 = "1snnjfl71s7ibx6l980p448mm66s9ia8021slngkygam34cl3kml";
        authors = [
          "Linus Färnstrand <faern@faern.net>"
        ];
        features = {
          "default" = [ "std" "async" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "std" ];
      };
      "oorandom" = rec {
        crateName = "oorandom";
        version = "11.1.5";
        edition = "2018";
        sha256 = "07mlf13z453fq01qff38big1lh83j8l6aaglf63ksqzzqxc0yyfn";
        authors = [
          "Simon Heath <icefox@dreamquest.io>"
        ];

      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "open-fastrlp" = rec {
        crateName = "open-fastrlp";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1kmrx6f4qc6vhdiimgf4qsf11pali09x6gq4ysa5fi450kw96qvq";
        libName = "open_fastrlp";
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum-types";
            packageId = "ethereum-types";
            optional = true;
            features = [ "codec" ];
          }
          {
            name = "open-fastrlp-derive";
            packageId = "open-fastrlp-derive";
            rename = "rlp-derive";
            optional = true;
          }
        ];
        features = {
          "derive" = [ "rlp-derive" ];
          "ethereum-types" = [ "dep:ethereum-types" ];
          "ethnum" = [ "dep:ethnum" ];
          "rlp-derive" = [ "dep:rlp-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "ethereum-types" "rlp-derive" "std" ];
      };
      "open-fastrlp-derive" = rec {
        crateName = "open-fastrlp-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "075vckvkh0616rx4b15nzq8d8p4iqfhvhf52n3z1qg65qvjjnfq0";
        procMacro = true;
        libName = "open_fastrlp_derive";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.73";
        edition = "2021";
        sha256 = "1y7b3kanpgb92wiqhwbyqfsdr1xdjzssxqywl4cixay88r6p61c5";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "openssl-macros";
            packageId = "openssl-macros";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            rename = "ffi";
          }
        ];
        features = {
          "aws-lc" = [ "ffi/aws-lc" ];
          "bindgen" = [ "ffi/bindgen" ];
          "unstable_boringssl" = [ "ffi/unstable_boringssl" ];
          "vendored" = [ "ffi/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "openssl-macros" = rec {
        crateName = "openssl-macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "173xxvfc63rr5ybwqwylsir0vq6xsj4kxiv4hmg4c3vscdmncj59";
        procMacro = true;
        libName = "openssl_macros";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0bl52x55laalqb707k009h8kfawliwp992rlsvkzy49n47p2fpnh";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.109";
        edition = "2021";
        links = "openssl";
        sha256 = "0wc54dshsac1xicq6b5wz01p358zcbf542f2s6vph3b38wp6w2ch";
        build = "build/main.rs";
        libName = "openssl_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "aws-lc" = [ "dep:aws-lc-sys" ];
          "bindgen" = [ "dep:bindgen" ];
          "bssl-sys" = [ "dep:bssl-sys" ];
          "openssl-src" = [ "dep:openssl-src" ];
          "unstable_boringssl" = [ "bssl-sys" ];
          "vendored" = [ "openssl-src" ];
        };
      };
      "option-ext" = rec {
        crateName = "option-ext";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0zbf7cx8ib99frnlanpyikm1bx8qn8x602sw1n7bg6p9x94lyx04";
        libName = "option_ext";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];

      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "p256" = rec {
        crateName = "p256";
        version = "0.13.2";
        edition = "2021";
        sha256 = "0jyd3c3k239ybs59ixpnl7dqkmm072fr1js8kh7ldx58bzc3m1n9";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "dep:primeorder" "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdsa" "pem" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "ecdsa-core/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core?/pkcs8" "elliptic-curve/pkcs8" ];
          "serde" = [ "ecdsa-core?/serde" "elliptic-curve/serde" "primeorder?/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" ];
          "test-vectors" = [ "dep:hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "sha2" ];
        };
        resolvedDefaultFeatures = [ "arithmetic" "digest" "ecdsa" "ecdsa-core" "sha2" "sha256" ];
      };
      "p3-air" = rec {
        crateName = "p3-air";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0rg5hf9w5nqfwyqvj0ldnrpzl9rvngs5mjyk1zzpfpgscvphksa5";
        libName = "p3_air";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
        ];

      };
      "p3-baby-bear" = rec {
        crateName = "p3-baby-bear";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "12h4iwfrp8wxs6z9vszxy3zgzwjjknsj8m2k5zjxzkf1m9q595j6";
        libName = "p3_baby_bear";
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-mds";
            packageId = "p3-mds";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "nightly-features" ];
      };
      "p3-blake3" = rec {
        crateName = "p3-blake3";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1fia7h4l7943dfb51gqxj3lfwv2fqvq1p8y8zvwmrp91xbb35vrn";
        libName = "p3_blake3";
        dependencies = [
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
        ];
        features = {
          "neon" = [ "blake3/neon" ];
          "parallel" = [ "blake3/rayon" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "p3-bn254-fr" = rec {
        crateName = "p3-bn254-fr";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0rzda7573d61mrxd4qsdkxgzrhrhxjx30cwfvyd11cz3dg5dygky";
        libName = "p3_bn254_fr";
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.13.1";
            features = [ "derive" "derive_bits" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "p3-challenger" = rec {
        crateName = "p3-challenger";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1sd40c5gj4j7irwldzg1nmrphxbj3m4l96b91jv4in55k6l2wrm6";
        libName = "p3_challenger";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-commit" = rec {
        crateName = "p3-commit";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0vnbgihr8v7dh7xy69fy0a4cf3g7acbvby8b53slxi2wif8n6dgw";
        libName = "p3_commit";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "test-utils" = [ "dep:p3-dft" ];
        };
      };
      "p3-dft" = rec {
        crateName = "p3-dft";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0fijc61d3kqxzvsrs53mmqk09rdz3szmp0py16akrn0r31q9a02i";
        libName = "p3_dft";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-field" = rec {
        crateName = "p3-field";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "00fnf1529dig656ykgxx02q7ciic6ff12958k9qryy3519x9gwb1";
        libName = "p3_field";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "p3-fri" = rec {
        crateName = "p3-fri";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0a0v5n6gj673v4fpjysm2h6clrq1gf26izvkrj4r4390iyaxnbf2";
        libName = "p3_fri";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-interpolation";
            packageId = "p3-interpolation";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-interpolation" = rec {
        crateName = "p3-interpolation";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0075j27bx0hdi2h5bzj26ywsqmcl18ksifdhspbhid7n2aicscnh";
        libName = "p3_interpolation";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
        ];

      };
      "p3-keccak" = rec {
        crateName = "p3-keccak";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1cg401x2ywzj0c8hv92hxyi5ayzm3pm2rsgqs94h0y4abbfsnmkw";
        libName = "p3_keccak";
        dependencies = [
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
        ];

      };
      "p3-keccak-air" = rec {
        crateName = "p3-keccak-air";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "06ygg587vixx43xf9nbwy8im8cppkrgsp30bvw9qbhycjhb8yfg8";
        libName = "p3_keccak_air";
        dependencies = [
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-forest";
            packageId = "tracing-forest";
            features = [ "ansi" "smallvec" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "std" "env-filter" ];
          }
        ];
        features = {
          "parallel" = [ "p3-maybe-rayon/parallel" ];
        };
      };
      "p3-matrix" = rec {
        crateName = "p3-matrix";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1c4mjh2xkk50bfhjh79d3aj0qfqs236kl1rpa2y2x3jghc5ywj6m";
        libName = "p3_matrix";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-maybe-rayon" = rec {
        crateName = "p3-maybe-rayon";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0iizrpln9ykbfm85sfdacnfk7fxq6q7vn6k80lzdpgk17mfmgxam";
        libName = "p3_maybe_rayon";
        dependencies = [
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        features = {
          "parallel" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
        };
        resolvedDefaultFeatures = [ "parallel" "rayon" ];
      };
      "p3-mds" = rec {
        crateName = "p3-mds";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0zhpkpr50pjzl5v1nm85qp4nz8bsx82yhkp2jdgj8n8d67nmfvka";
        libName = "p3_mds";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "min_const_gen" ];
          }
        ];

      };
      "p3-merkle-tree" = rec {
        crateName = "p3-merkle-tree";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1kkwjwngp96g98wpaga0wdd9756psaqvlg2mibn87m3mp8fb8img";
        libName = "p3_merkle_tree";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-poseidon2" = rec {
        crateName = "p3-poseidon2";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1qdys3d7njava1kgg7rwpyinn4m11k7asfr31r9h6whr9kqsdaxd";
        libName = "p3_poseidon2";
        dependencies = [
          {
            name = "gcd";
            packageId = "gcd";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-mds";
            packageId = "p3-mds";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "min_const_gen" ];
          }
        ];

      };
      "p3-symmetric" = rec {
        crateName = "p3-symmetric";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "1hmmhb6lj67vq2gdb129cszgdpy48mkpyw77igs19sv64llc9v2p";
        libName = "p3_symmetric";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];

      };
      "p3-uni-stark" = rec {
        crateName = "p3-uni-stark";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0dzygx7h7q24qkjzsy1jdkja6h62sqyymcczskqqn19bn8wc1x8s";
        libName = "p3_uni_stark";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "postcard";
            packageId = "postcard";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-forest";
            packageId = "tracing-forest";
            features = [ "ansi" "smallvec" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "std" "env-filter" ];
          }
        ];

      };
      "p3-util" = rec {
        crateName = "p3-util";
        version = "0.1.3-succinct";
        edition = "2021";
        sha256 = "0piq64k51awi2i3m45x3rsxzqklvsd68qxay7137578dw3qgxwvr";
        libName = "p3_util";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];

      };
      "pairing" = rec {
        crateName = "pairing";
        version = "0.22.0";
        edition = "2021";
        sha256 = "0fvbifnnxss25514yal3bq9zaa93j4mgplcwdws32axsppc90m8k";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
        ];

      };
      "parity-scale-codec" = rec {
        crateName = "parity-scale-codec";
        version = "3.7.5";
        edition = "2021";
        sha256 = "1yhhk02h2ww5vmh5f94d0l0abgvh16j28j1xw54ajycxcyp835vr";
        libName = "parity_scale_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
            usesDefaultFeatures = false;
          }
          {
            name = "const_format";
            packageId = "const_format";
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec-derive";
            packageId = "parity-scale-codec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "parity-scale-codec-derive" ];
          "fuzz" = [ "std" "arbitrary" ];
          "generic-array" = [ "dep:generic-array" ];
          "max-encoded-len" = [ "parity-scale-codec-derive?/max-encoded-len" ];
          "parity-scale-codec-derive" = [ "dep:parity-scale-codec-derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde/std" "bitvec?/std" "byte-slice-cast/std" "chain-error" ];
        };
        resolvedDefaultFeatures = [ "chain-error" "derive" "max-encoded-len" "parity-scale-codec-derive" "serde" "std" ];
      };
      "parity-scale-codec-derive" = rec {
        crateName = "parity-scale-codec-derive";
        version = "3.7.5";
        edition = "2021";
        sha256 = "0yiyc8y9iyjj2mqpkypb5ckbhzymps7c1r69ac8iaqxmd0qnbd1l";
        procMacro = true;
        libName = "parity_scale_codec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "max-encoded-len" ];
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.4";
        edition = "2021";
        sha256 = "04sab1c7304jg8k0d5b2pxbj1fvgzcf69l3n2mfpkdb96vs8pmbh";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.11";
        edition = "2021";
        sha256 = "19g4d6m5k4ggacinqprnn8xvdaszc3y5smsmbz1adcdmaqm8v0xw";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "password-hash" = rec {
        crateName = "password-hash";
        version = "0.4.2";
        edition = "2021";
        sha256 = "003p2hssyrcaxyq9fs8x2wx5di8ny9byaakskrf352pfm963fxkn";
        libName = "password_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "default" = [ "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "base64ct/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "rand_core" ];
      };
      "pasta_curves 0.4.1" = rec {
        crateName = "pasta_curves";
        version = "0.4.1";
        edition = "2021";
        sha256 = "1n218dh96ygqfwafffv6m6cx9vm02ylpr7xazfqv84vkispmzijw";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" "blake2b_simd" ];
          "bits" = [ "ff/bits" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "default" = [ "bits" "sqrt-table" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "alloc" "ec-gpu" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sqrt-table" = [ "alloc" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "blake2b_simd" "default" "lazy_static" "sqrt-table" ];
      };
      "pasta_curves 0.5.1" = rec {
        crateName = "pasta_curves";
        version = "0.5.1";
        edition = "2021";
        sha256 = "15d0wy6j1d8ilg5cs0n4sxy8g81igd8rriv3mjrf3irwyyc7brfk";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
            features = [ "spin_no_std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" "blake2b_simd" ];
          "bits" = [ "ff/bits" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "default" = [ "bits" "sqrt-table" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "alloc" "ec-gpu" ];
          "hex" = [ "dep:hex" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "serde" = [ "hex" "serde_crate" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "sqrt-table" = [ "alloc" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "blake2b_simd" "default" "lazy_static" "sqrt-table" ];
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "path-slash" = rec {
        crateName = "path-slash";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0hjgljv4vy97qqw9gxnwzqhhpysjss2yhdphfccy3c388afhk48y";
        libName = "path_slash";
        authors = [
          "rhysd <https://rhysd.github.io>"
        ];

      };
      "pbkdf2 0.11.0" = rec {
        crateName = "pbkdf2";
        version = "0.11.0";
        edition = "2021";
        sha256 = "05q9wqjvfrs4dvw03yn3bvcs4zghz0a7ycfa53pz2k2fqhp6k843";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];
        features = {
          "default" = [ "simple" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" "password-hash" "sha2" "simple" ];
      };
      "pbkdf2 0.12.2" = rec {
        crateName = "pbkdf2";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1wms79jh4flpy1zi8xdp4h8ccxv4d85adc6zjagknvppc5vnmvgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
        ];
        features = {
          "default" = [ "hmac" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" ];
      };
      "peg" = rec {
        crateName = "peg";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0xr42lbgihlwbyfcmjggqv1s3a38agp4j077cd8yqdhv235cya4r";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        dependencies = [
          {
            name = "peg-macros";
            packageId = "peg-macros";
          }
          {
            name = "peg-runtime";
            packageId = "peg-runtime";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "peg-runtime/std" ];
          "trace" = [ "peg-macros/trace" ];
          "unstable" = [ "peg-runtime/unstable" ];
        };
      };
      "peg-macros" = rec {
        crateName = "peg-macros";
        version = "0.8.5";
        edition = "2021";
        crateBin = [];
        sha256 = "0w8g53c75hz6iy3khc1ja2qm0idpnygjc0xsa9fmpyh2q82ap632";
        procMacro = true;
        libName = "peg_macros";
        libPath = "lib.rs";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        dependencies = [
          {
            name = "peg-runtime";
            packageId = "peg-runtime";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        features = {
        };
      };
      "peg-runtime" = rec {
        crateName = "peg-runtime";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1jkgfy5jkjqwqy7h11nn3bmm1qfyn9kq2wnxnlspp4ldhsdwlb8k";
        libName = "peg_runtime";
        libPath = "lib.rs";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        features = {
        };
      };
      "pem" = rec {
        crateName = "pem";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1f184b7vs5kgwglfsy9adqqy7625jsq8jj1lsxah9abn78kmr0x8";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.8.0";
        edition = "2021";
        sha256 = "1dp741bxqiracvvwl66mfvlr29byvvph28n4c6ip136m652vg38r";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
          }
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "memchr" ];
          "memchr" = [ "dep:memchr" ];
          "miette-error" = [ "std" "pretty-print" "dep:miette" "dep:thiserror" ];
          "pretty-print" = [ "dep:serde" "dep:serde_json" ];
          "std" = [ "ucd-trie/std" "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "memchr" "std" ];
      };
      "petgraph 0.6.5" = rec {
        crateName = "petgraph";
        version = "0.6.5";
        edition = "2018";
        sha256 = "1ns7mbxidnn2pqahbbjccxkrqkrll2i5rbxx43ns6rh6fn3cridl";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" "rayon" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" "indexmap/rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "petgraph 0.7.1" = rec {
        crateName = "petgraph";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0wkpppwrfv1h197asz1p4yfb4li5b1kw0nqllil67n6vj1qb6win";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" "rayon" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" "indexmap/rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "pharos" = rec {
        crateName = "pharos";
        version = "0.5.3";
        edition = "2021";
        sha256 = "055lg1dzrxnryfy34a9cyrg21b7cl6l2frfx2p7fdvkz864p6mp9";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];

      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.3";
        edition = "2021";
        sha256 = "0y6hxp1d48rx2434wgi5g8j1pr8s5jja29ha2b65435fh057imhz";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_macros";
            packageId = "phf_macros";
            optional = true;
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "phf_shared/std" ];
          "uncased" = [ "phf_shared/uncased" ];
          "unicase" = [ "phf_macros?/unicase" "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "phf_macros" "std" ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.3";
        edition = "2021";
        crateBin = [];
        sha256 = "0gc4np7s91ynrgw73s2i7iakhb4lzdv1gcyx7yhlc0n214a2701w";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_macros" = rec {
        crateName = "phf_macros";
        version = "0.11.3";
        edition = "2021";
        sha256 = "05kjfbyb439344rhmlzzw0f9bwk9fp95mmw56zs7yfn1552c0jpq";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "unicase" = [ "unicase_" "phf_shared/unicase" ];
          "unicase_" = [ "dep:unicase_" ];
        };
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.11.3";
        edition = "2021";
        sha256 = "1rallyvh28jqd9i916gk5gk2igdmzlgvv5q0l3xbf3m6y8pbrsk7";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.1.10";
        edition = "2021";
        sha256 = "12kadbnfm1f43cyadw9gsbyln1cy7vj764wz5c8wxaiza3filzv7";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.1.10";
        edition = "2021";
        sha256 = "0qgqzfl0f4lzaz7yl5llhbg97g68r15kljzihaw9wm64z17qx4bf";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" "clone-impls" "proc-macro" "full" "visit-mut" ];
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkcs8" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.7.10";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "3des" = [ "encryption" "pkcs5/3des" ];
          "alloc" = [ "der/alloc" "der/zeroize" "spki/alloc" ];
          "des-insecure" = [ "encryption" "pkcs5/des-insecure" ];
          "encryption" = [ "alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [ "alloc" "der/pem" "spki/pem" ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1-insecure" = [ "encryption" "pkcs5/sha1-insecure" ];
          "std" = [ "alloc" "der/std" "spki/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.32";
        edition = "2018";
        sha256 = "0k4h3gnzs94sjb2ix6jyksacs52cf1fanpwsmlhjnwrdnp8dppby";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "plotters" = rec {
        crateName = "plotters";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ixpy9svpmr2rkzkxvvdpysjjky4gw104d73n7pi2jbs7m06zsss";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
          {
            name = "plotters-svg";
            packageId = "plotters-svg";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
            features = [ "Document" "DomRect" "Element" "HtmlElement" "Node" "Window" "HtmlCanvasElement" "CanvasRenderingContext2d" ];
          }
        ];
        features = {
          "ab_glyph" = [ "dep:ab_glyph" "once_cell" ];
          "all_elements" = [ "errorbar" "candlestick" "boxplot" "histogram" ];
          "all_series" = [ "area_series" "line_series" "point_series" "surface_series" ];
          "bitmap_backend" = [ "plotters-bitmap" ];
          "bitmap_encoder" = [ "plotters-bitmap/image_encoder" ];
          "bitmap_gif" = [ "plotters-bitmap/gif_backend" ];
          "chrono" = [ "dep:chrono" ];
          "datetime" = [ "chrono" ];
          "default" = [ "bitmap_backend" "bitmap_encoder" "bitmap_gif" "svg_backend" "chrono" "ttf" "image" "deprecated_items" "all_series" "all_elements" "full_palette" "colormaps" ];
          "evcxr" = [ "svg_backend" ];
          "evcxr_bitmap" = [ "evcxr" "bitmap_backend" "plotters-svg/bitmap_encoder" ];
          "font-kit" = [ "dep:font-kit" ];
          "fontconfig-dlopen" = [ "font-kit/source-fontconfig-dlopen" ];
          "image" = [ "dep:image" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "once_cell" = [ "dep:once_cell" ];
          "pathfinder_geometry" = [ "dep:pathfinder_geometry" ];
          "plotters-bitmap" = [ "dep:plotters-bitmap" ];
          "plotters-svg" = [ "dep:plotters-svg" ];
          "svg_backend" = [ "plotters-svg" ];
          "ttf" = [ "font-kit" "ttf-parser" "lazy_static" "pathfinder_geometry" ];
          "ttf-parser" = [ "dep:ttf-parser" ];
        };
        resolvedDefaultFeatures = [ "area_series" "line_series" "plotters-svg" "svg_backend" ];
      };
      "plotters-backend" = rec {
        crateName = "plotters-backend";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ahpliim4hrrf7d4ispc2hwr7rzkn6d6nf7lyyrid2lm28yf2hnz";
        libName = "plotters_backend";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];

      };
      "plotters-svg" = rec {
        crateName = "plotters-svg";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0w56sxaa2crpasa1zj0bhxzihlapqfkncggavyngg0w86anf5fji";
        libName = "plotters_svg";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
        ];
        features = {
          "bitmap_encoder" = [ "image" ];
          "image" = [ "dep:image" ];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.0";
        edition = "2018";
        sha256 = "0glb2wngflvfmg789qbf6dbnwcf6ai212fs7n0lf1c66rd49n3im";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" ];
      };
      "postcard" = rec {
        crateName = "postcard";
        version = "1.1.1";
        edition = "2021";
        sha256 = "1a18yvgmjazphf6frnlnq4nnl6pp2l5qgi6qxnldpjbwyq0jc2hp";
        authors = [
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "cobs";
            packageId = "cobs";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.4.0";
            rename = "embedded-io-04";
            optional = true;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.6.1";
            rename = "embedded-io-06";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "embedded-io-04?/alloc" "embedded-io-06?/alloc" ];
          "crc" = [ "dep:crc" ];
          "default" = [ "heapless-cas" ];
          "defmt" = [ "dep:defmt" ];
          "embedded-io" = [ "dep:embedded-io-04" ];
          "embedded-io-04" = [ "dep:embedded-io-04" ];
          "embedded-io-06" = [ "dep:embedded-io-06" ];
          "experimental-derive" = [ "postcard-derive" ];
          "heapless" = [ "dep:heapless" ];
          "heapless-cas" = [ "heapless" "dep:heapless" "heapless/cas" ];
          "paste" = [ "dep:paste" ];
          "postcard-derive" = [ "dep:postcard-derive" ];
          "use-crc" = [ "crc" "paste" ];
          "use-defmt" = [ "defmt" ];
          "use-std" = [ "serde/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "potential_utf" = rec {
        crateName = "potential_utf";
        version = "0.1.2";
        edition = "2021";
        sha256 = "11dm6k3krx3drbvhgjw8z508giiv0m09wzl6ghza37176w4c79z5";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "serde" = [ "dep:serde" ];
          "writeable" = [ "dep:writeable" "alloc" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        libName = "precomputed_hash";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];

      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.2.33";
        edition = "2021";
        links = "prettyplease02";
        sha256 = "0zba9hcp50rg52j4134px0pwkx9i9zjnbp9ylv3cbx232d993vlx";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "extra-traits" "parsing" "printing" "visit-mut" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
        resolvedDefaultFeatures = [ "verbatim" ];
      };
      "primeorder" = rec {
        crateName = "primeorder";
        version = "0.13.6";
        edition = "2021";
        sha256 = "1rp16710mxksagcjnxqjjq9r9wf5vf72fs8wxffnvhb6i6hiqgim";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "arithmetic" "sec1" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "alloc" "elliptic-curve/std" ];
        };
      };
      "primitive-types" = rec {
        crateName = "primitive-types";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1qj4w8vhn52c7f4ywkh4xbzs0yl4c8pkrh113fj782xfd3yxjd0b";
        libName = "primitive_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "fixed-hash";
            packageId = "fixed-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            rename = "scale-info-crate";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "uint";
            packageId = "uint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" "uint/arbitrary" ];
          "byteorder" = [ "fixed-hash/byteorder" ];
          "codec" = [ "impl-codec" ];
          "default" = [ "std" ];
          "fp-conversion" = [ "std" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-num-traits" = [ "dep:impl-num-traits" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "json-schema" = [ "dep:schemars" ];
          "num-traits" = [ "impl-num-traits" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "codec" "scale-info-crate" ];
          "scale-info-crate" = [ "dep:scale-info-crate" ];
          "serde" = [ "std" "impl-serde" "impl-serde/std" ];
          "serde_no_std" = [ "impl-serde" ];
          "std" = [ "uint/std" "fixed-hash/std" "impl-codec?/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "codec" "impl-codec" "impl-rlp" "impl-serde" "rlp" "rustc-hex" "scale-info" "scale-info-crate" "serde_no_std" "std" ];
      };
      "proc-macro-crate 0.1.5" = rec {
        crateName = "proc-macro-crate";
        version = "0.1.5";
        edition = "2018";
        sha256 = "11cpihdk9ba68hzw95aa8zxn0i5g6kdrfd4l2cy3d5jvb72a6vhx";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
        ];

      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 3.3.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.26";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        libName = "proc_macro_error";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn" = [ "dep:syn" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        libName = "proc_macro_error_attr";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn-error" ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proptest" = rec {
        crateName = "proptest";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l4y4bb8hffv7cys7d59qwqdmvmqjfzz0x9vblc08209clqfkjhl";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set 0.8.0";
            optional = true;
          }
          {
            name = "bit-vec";
            packageId = "bit-vec 0.8.0";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
          }
          {
            name = "rusty-fork";
            packageId = "rusty-fork";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "unarray";
            packageId = "unarray";
          }
        ];
        features = {
          "attr-macro" = [ "proptest-macro" ];
          "bit-set" = [ "dep:bit-set" "dep:bit-vec" ];
          "default" = [ "std" "fork" "timeout" "bit-set" ];
          "default-code-coverage" = [ "std" "fork" "timeout" "bit-set" ];
          "fork" = [ "std" "rusty-fork" "tempfile" ];
          "handle-panics" = [ "std" ];
          "hardware-rng" = [ "x86" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "no_std" = [ "num-traits/libm" ];
          "proptest-macro" = [ "dep:proptest-macro" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "rusty-fork" = [ "dep:rusty-fork" ];
          "std" = [ "rand/std" "lazy_static" "regex-syntax" "num-traits/std" ];
          "tempfile" = [ "dep:tempfile" ];
          "timeout" = [ "fork" "rusty-fork/timeout" ];
          "x86" = [ "dep:x86" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bit-set" "default" "fork" "lazy_static" "no_std" "regex-syntax" "rusty-fork" "std" "tempfile" "timeout" ];
      };
      "prost 0.11.9" = rec {
        crateName = "prost";
        version = "0.11.9";
        edition = "2021";
        sha256 = "1kc1hva2h894hc0zf6r4r8fsxfpazf7xn5rj3jya9sbrsyhym0hb";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.11.9";
            optional = true;
          }
        ];
        features = {
          "default" = [ "prost-derive" "std" ];
          "prost-derive" = [ "dep:prost-derive" ];
        };
        resolvedDefaultFeatures = [ "prost-derive" "std" ];
      };
      "prost 0.12.6" = rec {
        crateName = "prost";
        version = "0.12.6";
        edition = "2021";
        sha256 = "0a8z87ir8yqjgl1kxbdj30a7pzsjs9ka85szll6i6xlb31f47cfy";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.12.6";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "prost-derive" "std" ];
      };
      "prost 0.13.5" = rec {
        crateName = "prost";
        version = "0.13.5";
        edition = "2021";
        sha256 = "1r8yi6zxxwv9gq5ia9p55nspgwmchs94sqpp64x33v5k3njgm5i7";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.13.5";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "prost-derive" "std" ];
      };
      "prost-build 0.12.6" = rec {
        crateName = "prost-build";
        version = "0.12.6";
        edition = "2021";
        sha256 = "1936q2grirm4rh5l26p88gbw8dijjcf4sfcn55y3p3nsjif5ll12";
        libName = "prost_build";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.6.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-bool" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "cleanup-markdown" = [ "dep:pulldown-cmark" "dep:pulldown-cmark-to-cmark" ];
          "default" = [ "format" ];
          "format" = [ "dep:prettyplease" "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "format" ];
      };
      "prost-build 0.13.5" = rec {
        crateName = "prost-build";
        version = "0.13.5";
        edition = "2021";
        sha256 = "1gw1mr0rmv15fc2yvn9jmxbqaj8qh80w5nn5x5s1932y8ijr8xmy";
        libName = "prost_build";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.7.1";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-bool" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "cleanup-markdown" = [ "dep:pulldown-cmark" "dep:pulldown-cmark-to-cmark" ];
          "default" = [ "format" ];
          "format" = [ "dep:prettyplease" "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "format" ];
      };
      "prost-derive 0.11.9" = rec {
        crateName = "prost-derive";
        version = "0.11.9";
        edition = "2021";
        sha256 = "1d3mw2s2jba1f7wcjmjd6ha2a255p2rmynxhm1nysv9w1z8xilp5";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-derive 0.12.6" = rec {
        crateName = "prost-derive";
        version = "0.12.6";
        edition = "2021";
        sha256 = "1waaq9d2f114bvvpw957s7vsx268licnfawr20b51ydb43dxrgc1";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-derive 0.13.5" = rec {
        crateName = "prost-derive";
        version = "0.13.5";
        edition = "2021";
        sha256 = "0kgc9gbzsa998xixblfi3kfydka64zqf6rmpm53b761cjxbxfmla";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-types 0.11.9" = rec {
        crateName = "prost-types";
        version = "0.11.9";
        edition = "2021";
        sha256 = "04ryk38sqkp2nf4dgdqdfbgn6zwwvjraw6hqq6d9a6088shj4di1";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.11.9";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
      };
      "prost-types 0.12.6" = rec {
        crateName = "prost-types";
        version = "0.12.6";
        edition = "2021";
        sha256 = "1c6mvfhz91q8a8fwada9smaxgg9w4y8l1ypj9yc8wq1j185wk4ch";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.12.6";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "prost-types 0.13.5" = rec {
        crateName = "prost-types";
        version = "0.13.5";
        edition = "2021";
        sha256 = "05mx699wyg7cjil3hz7h8lp4dhi7xhy1lq5kjv1s3cfx6szw3hjj";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "protobuf" = rec {
        crateName = "protobuf";
        version = "3.3.0";
        edition = "2021";
        sha256 = "1461vasdqvjkbll40lys6826kydbw1rw22fwwlsaf8w7q674lpxn";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "protobuf-support";
            packageId = "protobuf-support";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "with-bytes" = [ "bytes" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "protobuf-src" = rec {
        crateName = "protobuf-src";
        version = "1.1.0+21.5";
        edition = "2021";
        links = "protobuf-src";
        sha256 = "1hg3w2799fdlrr2wjf7i9g8ybzy0jgxlcdmrhgxwcg7bp998ib67";
        libName = "protobuf_src";
        authors = [
          "Materialize, Inc."
        ];
        buildDependencies = [
          {
            name = "autotools";
            packageId = "autotools";
          }
        ];

      };
      "protobuf-support" = rec {
        crateName = "protobuf-support";
        version = "3.3.0";
        edition = "2021";
        sha256 = "1776rzbj4ypkaxwn4bc9zhgv0xxvpgskhn1bk8ih70xrykag8wk8";
        libName = "protobuf_support";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "psm" = rec {
        crateName = "psm";
        version = "0.1.26";
        edition = "2021";
        sha256 = "07xfl8gpz8v9qz2zvnpcy9r3nppbhxlxkgqbxcdwsdl5xij4953f";
        authors = [
          "Simonas Kazlauskas <psm@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        libName = "quick_error";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];

      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.8";
        edition = "2021";
        sha256 = "1j02h87nfxww5mjcw4vjcnx8b70q0yinnc8xvjv82ryskii18qk2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "rt-multi-thread" "time" "macros" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "aws-lc-rs" = [ "proto/aws-lc-rs" ];
          "aws-lc-rs-fips" = [ "proto/aws-lc-rs-fips" ];
          "bloom" = [ "proto/bloom" ];
          "default" = [ "log" "platform-verifier" "runtime-tokio" "rustls-ring" "bloom" ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [ "tracing/log" "proto/log" "udp/log" ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [ "async-io" "async-std" ];
          "runtime-smol" = [ "async-io" "smol" ];
          "runtime-tokio" = [ "tokio/time" "tokio/rt" "tokio/net" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "ring" "proto/rustls-ring" "proto/ring" ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [ "ring" "runtime-tokio" "rustls" "rustls-ring" ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.12";
        edition = "2021";
        sha256 = "0bj2yyrf1mrg2bcj19ipsspvrj5sq0di0pz5maw5pj31j4x89ps9";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm_js" ];
          }
          {
            name = "lru-slab";
            packageId = "lru-slab";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm32_unknown_unknown_js" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "web" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "aws-lc-rs" "aws-lc-rs?/fips" ];
          "bloom" = [ "dep:fastbloom" ];
          "default" = [ "rustls-ring" "log" "bloom" ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "rustls-aws-lc-rs" "aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "rustls?/ring" "ring" ];
        };
        resolvedDefaultFeatures = [ "ring" "rustls-ring" ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.12";
        edition = "2021";
        sha256 = "0hm89bv7mm383lv2c8z5r9512pdgp1q26lsmazicajgrj6cm4kpf";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "tracing" "log" ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.2.0";
        edition = "2018";
        sha256 = "1ig93jvpqyi87nc5kb6dri49p56q7r7qxrn8kfizmqkfj5nmyxkl";
        libName = "r_efi";
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "examples" = [ "native" ];
          "rustc-dep-of-std" = [ "compiler_builtins/rustc-dep-of-std" "core" ];
        };
      };
      "radium" = rec {
        crateName = "radium";
        version = "0.7.0";
        edition = "2018";
        sha256 = "02cxfi3ky3c4yhyqx9axqwhyaca804ws46nn4gc1imbk94nzycyw";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "min_const_gen" "rand_chacha" "serde" "small_rng" "std" "std_rng" ];
      };
      "rand 0.9.1" = rec {
        crateName = "rand";
        version = "0.9.1";
        edition = "2021";
        sha256 = "15yxfcxbgmwba5cv7mjg9bhc1r5c9483dfcdfspg62x4jk8dkgwz";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "std_rng" "os_rng" "small_rng" "thread_rng" ];
          "log" = [ "dep:log" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" "rand_core/serde" ];
          "std" = [ "rand_core/std" "rand_chacha?/std" "alloc" ];
          "std_rng" = [ "dep:rand_chacha" ];
          "thread_rng" = [ "std" "std_rng" "os_rng" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "os_rng" "small_rng" "std" "std_rng" "thread_rng" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.9.0" = rec {
        crateName = "rand_chacha";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1jr5ygix7r60pz0s1cv3ms1f6pd1i9pcdmnxzzhjc3zn3mgjn0nk";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            features = [ "os_rng" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "ppv-lite86/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.9.3" = rec {
        crateName = "rand_core";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0f3xhf16yks5ic6kmgxcpv1ngdhp48mmfy4ag82i1wnwh8ws3ncr";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
        ];
        features = {
          "os_rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "getrandom?/std" ];
        };
        resolvedDefaultFeatures = [ "os_rng" "std" ];
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.3.0";
        edition = "2018";
        sha256 = "13vcag7gmqspzyabfl1gr9ykvxd2142q2agrj8dkyjmfqmgg4nyj";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "rayon-scan" = rec {
        crateName = "rayon-scan";
        version = "0.1.1";
        edition = "2021";
        sha256 = "057sg3q0sb0bj84ak01dcw9ipik0ay48kj7zl06ln2qll08wr1rz";
        libName = "rayon_scan";
        authors = [
          "Ariel Uy"
        ];
        dependencies = [
          {
            name = "rayon";
            packageId = "rayon";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "recvmsg" = rec {
        crateName = "recvmsg";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0xa173gbg1cx8q7wyzi6c4kmcsz5rka68r4jb6kg14icskax9vfk";
        features = {
          "libc" = [ "dep:libc" ];
          "std_net" = [ "std" "libc" "windows-sys" ];
          "tokio" = [ "dep:tokio" "std_net" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.12";
        edition = "2021";
        sha256 = "1by5k76jr4kjy37287ifn56dzw6jh6nrwnrjm29j615ayafcm3wj";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "std" ];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = [ "std" "call" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "auth" = [ "rust-argon2" "zeroize" ];
          "default" = [ "auth" ];
          "rust-argon2" = [ "dep:rust-argon2" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.9" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "relative-path" = rec {
        crateName = "relative-path";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1c4jm6x0p88722c77xx53mb7zcs4xznp9d3whdsbmn1248qhm95w";
        libName = "relative_path";
        authors = [
          "John-John Tedro <udoprog@tedro.se>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" "alloc" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "reqwest 0.11.27" = rec {
        crateName = "reqwest";
        version = "0.11.27";
        edition = "2021";
        sha256 = "0qjary4hpplpgdi62d2m0xvbn6lnzckwffm0rgkm2x51023m6ryx";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tcp" "http1" "http2" "client" "runtime" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls 0.5.0";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "native-tls";
            packageId = "native-tls";
            rename = "native-tls-crate";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "dangerous_configuration" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 1.0.4";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 0.1.2";
          }
          {
            name = "system-configuration";
            packageId = "system-configuration 0.5.1";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "tcp" "stream" "http1" "http2" "client" "server" "runtime" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {target, features}: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "hyper-rustls" "tokio-rustls" "rustls" "__tls" ];
          "__tls" = [ "dep:rustls-pemfile" ];
          "async-compression" = [ "dep:async-compression" ];
          "blocking" = [ "futures-util/io" "tokio/sync" ];
          "brotli" = [ "async-compression" "async-compression/brotli" "tokio-util" ];
          "cookie_crate" = [ "dep:cookie_crate" ];
          "cookie_store" = [ "dep:cookie_store" ];
          "cookies" = [ "cookie_crate" "cookie_store" ];
          "default" = [ "default-tls" ];
          "default-tls" = [ "hyper-tls" "native-tls-crate" "__tls" "tokio-native-tls" ];
          "deflate" = [ "async-compression" "async-compression/zlib" "tokio-util" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "gzip" = [ "async-compression" "async-compression/gzip" "tokio-util" ];
          "h3" = [ "dep:h3" ];
          "h3-quinn" = [ "dep:h3-quinn" ];
          "hickory-dns" = [ "hickory-resolver" ];
          "hickory-resolver" = [ "dep:hickory-resolver" ];
          "http3" = [ "rustls-tls-manual-roots" "h3" "h3-quinn" "quinn" "futures-channel" ];
          "hyper-rustls" = [ "dep:hyper-rustls" ];
          "hyper-tls" = [ "dep:hyper-tls" ];
          "json" = [ "serde_json" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "multipart" = [ "mime_guess" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate/alpn" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "quinn" = [ "dep:quinn" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "rustls-native-certs" "__rustls" ];
          "rustls-tls-webpki-roots" = [ "webpki-roots" "__rustls" ];
          "serde_json" = [ "dep:serde_json" ];
          "socks" = [ "tokio-socks" ];
          "stream" = [ "tokio/fs" "tokio-util" "wasm-streams" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "tokio-socks" = [ "dep:tokio-socks" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "trust-dns" = [ "hickory-dns" ];
          "wasm-streams" = [ "dep:wasm-streams" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__tls" "blocking" "default" "default-tls" "hyper-rustls" "hyper-tls" "json" "native-tls-crate" "rustls" "rustls-native-certs" "rustls-tls" "rustls-tls-native-roots" "rustls-tls-webpki-roots" "serde_json" "tokio-native-tls" "tokio-rustls" "webpki-roots" ];
      };
      "reqwest 0.12.19" = rec {
        crateName = "reqwest";
        version = "0.12.19";
        edition = "2021";
        sha256 = "06b1mn98nsqki42233i5jm7giwzaczf0clgbhsrybwk37m8yby52";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.4.10";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.27.6";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "tls12" ];
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls 0.6.0";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" "client-legacy" "client-proxy" "tokio" ];
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "native-tls";
            packageId = "native-tls";
            rename = "native-tls-crate";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rustls" "runtime-tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "tls12" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.2";
            features = [ "futures" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tls12" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "codec" "io" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "timeout" "util" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "follow-redirect" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-streams";
            packageId = "wasm-streams";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.0";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "client-legacy" "server-auto" "server-graceful" "tokio" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "limit" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {target, features}: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "dep:hyper-rustls" "dep:tokio-rustls" "dep:rustls" "__tls" ];
          "__rustls-ring" = [ "hyper-rustls?/ring" "tokio-rustls?/ring" "rustls?/ring" "quinn?/ring" ];
          "__tls" = [ "dep:rustls-pki-types" "tokio/io-util" ];
          "blocking" = [ "dep:futures-channel" "futures-channel?/sink" "dep:futures-util" "futures-util?/io" "futures-util?/sink" "tokio/sync" ];
          "brotli" = [ "dep:async-compression" "async-compression?/brotli" "dep:futures-util" "dep:tokio-util" ];
          "charset" = [ "dep:encoding_rs" ];
          "cookies" = [ "dep:cookie_crate" "dep:cookie_store" ];
          "default" = [ "default-tls" "charset" "http2" "system-proxy" ];
          "default-tls" = [ "dep:hyper-tls" "dep:native-tls-crate" "__tls" "dep:tokio-native-tls" ];
          "deflate" = [ "dep:async-compression" "async-compression?/zlib" "dep:futures-util" "dep:tokio-util" ];
          "gzip" = [ "dep:async-compression" "async-compression?/gzip" "dep:futures-util" "dep:tokio-util" ];
          "h2" = [ "dep:h2" ];
          "hickory-dns" = [ "dep:hickory-resolver" ];
          "http2" = [ "h2" "hyper/http2" "hyper-util/http2" "hyper-rustls?/http2" ];
          "http3" = [ "rustls-tls-manual-roots" "dep:h3" "dep:h3-quinn" "dep:quinn" "dep:slab" "dep:futures-channel" "tokio/macros" ];
          "json" = [ "dep:serde_json" ];
          "macos-system-configuration" = [ "system-proxy" ];
          "multipart" = [ "dep:mime_guess" "dep:futures-util" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate?/alpn" "hyper-tls?/alpn" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate?/vendored" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "rustls-tls-manual-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-manual-roots-no-provider" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "rustls-tls-native-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-native-roots-no-provider" = [ "dep:rustls-native-certs" "hyper-rustls?/native-tokio" "__rustls" ];
          "rustls-tls-no-provider" = [ "rustls-tls-manual-roots-no-provider" ];
          "rustls-tls-webpki-roots" = [ "rustls-tls-webpki-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-webpki-roots-no-provider" = [ "dep:webpki-roots" "hyper-rustls?/webpki-tokio" "__rustls" ];
          "socks" = [ "dep:tokio-socks" ];
          "stream" = [ "tokio/fs" "dep:futures-util" "dep:tokio-util" "dep:wasm-streams" ];
          "system-proxy" = [ "hyper-util/client-proxy-system" ];
          "zstd" = [ "dep:async-compression" "async-compression?/zstd" "dep:futures-util" "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__rustls-ring" "__tls" "blocking" "charset" "default" "default-tls" "h2" "http2" "json" "rustls-tls" "rustls-tls-webpki-roots" "rustls-tls-webpki-roots-no-provider" "stream" "system-proxy" "trust-dns" ];
      };
      "reqwest-middleware" = rec {
        crateName = "reqwest-middleware";
        version = "0.3.3";
        edition = "2018";
        sha256 = "011b8n9a1bwalyk2y6x5s0wz52pxk70l4bbrba47qgsdc1dfnb2n";
        libName = "reqwest_middleware";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "charset" = [ "reqwest/charset" ];
          "http2" = [ "reqwest/http2" ];
          "json" = [ "reqwest/json" ];
          "multipart" = [ "reqwest/multipart" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
        };
      };
      "rfc6979 0.3.1" = rec {
        crateName = "rfc6979";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1fzsp705b5lhwd2r9il9grc3lj6rm3b2r89vh0xv181gy5xg2hvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.4.9";
            usesDefaultFeatures = false;
            features = [ "generic-array" "zeroize" ];
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];

      };
      "rfc6979 0.4.0" = rec {
        crateName = "rfc6979";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1chw95jgcfrysyzsq6a10b1j5qb7bagkx8h0wda4lv25in02mpgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];

      };
      "ring 0.16.20" = rec {
        crateName = "ring";
        version = "0.16.20";
        edition = "2018";
        links = "ring-asm";
        sha256 = "1z682xp7v38ayq9g9nkbhhfpj6ygralmlx7wdmsfv8rnw99cylrh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("illumos" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("solaris" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "spin";
            packageId = "spin 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null) || ((("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)) && (("android" == target."os" or null) || ("fuchsia" == target."os" or null) || ("linux" == target."os" or null))));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.7.1";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."vendor" or null) && ("unknown" == target."os" or null) && ("" == target."env" or null));
            features = [ "Crypto" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "ntsecapi" "wtypesbase" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "dev_urandom_fallback" = [ "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "once_cell" "std" ];
      };
      "ring 0.17.14" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("apple" == target."vendor" or null) && (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("tvos" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) || (("arm" == target."arch" or null) && ("little" == target."endian" or null))) && (("android" == target."os" or null) || ("linux" == target."os" or null)));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "wasm32_unknown_unknown_js" ];
      };
      "ripemd" = rec {
        crateName = "ripemd";
        version = "0.1.3";
        edition = "2018";
        sha256 = "17xh5yl9wjjj2v18rh3m8ajlmdjg1yj13l6r9rj3mnbss4i444mx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "risc0-binfmt" = rec {
        crateName = "risc0-binfmt";
        version = "0.19.1";
        edition = "2021";
        sha256 = "08icy9d67p60gnpfj9hn6r560lk2l39rliyliidlgadr7ji8ag4j";
        libName = "risc0_binfmt";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "elf";
            packageId = "elf";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "risc0-zkp";
            packageId = "risc0-zkp";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkvm-platform";
            packageId = "risc0-zkvm-platform";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "anyhow/std" "elf/std" "log/std" "risc0-zkp/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "risc0-circuit-recursion" = rec {
        crateName = "risc0-circuit-recursion";
        version = "0.19.1";
        edition = "2021";
        sha256 = "0ah10gjf6bzix5n5q0b838xh47xkb30mvd7zcj5spapxx487wm4p";
        libName = "risc0_circuit_recursion";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-core";
            packageId = "risc0-core";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkp";
            packageId = "risc0-zkp";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "attributes" ];
          }
        ];
        features = {
          "cuda" = [ "dep:cust" "prove" "risc0-circuit-recursion-sys/cuda" "risc0-zkp/cuda" "std" ];
          "default" = [ "prove" "test" ];
          "metal" = [ "dep:metal" "prove" "risc0-circuit-recursion-sys/metal" "risc0-zkp/metal" ];
          "prove" = [ "dep:downloader" "dep:rand" "dep:rayon" "dep:sha2" "dep:zip" "risc0-zkp/prove" "risc0-circuit-recursion-sys" "std" ];
          "risc0-circuit-recursion-sys" = [ "dep:risc0-circuit-recursion-sys" ];
          "std" = [ "risc0-zkp/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "risc0-circuit-rv32im" = rec {
        crateName = "risc0-circuit-rv32im";
        version = "0.19.1";
        edition = "2021";
        sha256 = "0bnyvhlr2bnify1ib7fpbrqfh8rnzhk8gxh83bp29flcn40rs9hs";
        libName = "risc0_circuit_rv32im";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-core";
            packageId = "risc0-core";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkp";
            packageId = "risc0-zkp";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkvm-platform";
            packageId = "risc0-zkvm-platform";
            usesDefaultFeatures = false;
            target = { target, features }: ("zkvm" == target."os" or null);
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "attributes" ];
          }
        ];
        features = {
          "cuda" = [ "dep:cust" "prove" "risc0-circuit-rv32im-sys/cuda" "risc0-zkp/cuda" "std" ];
          "default" = [ "prove" ];
          "metal" = [ "dep:metal" "prove" "risc0-circuit-rv32im-sys/metal" "risc0-zkp/metal" ];
          "prove" = [ "dep:rand" "dep:rayon" "risc0-zkp/prove" "risc0-circuit-rv32im-sys" "std" ];
          "risc0-circuit-rv32im-sys" = [ "dep:risc0-circuit-rv32im-sys" ];
          "std" = [ "risc0-zkp/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "risc0-core" = rec {
        crateName = "risc0-core";
        version = "0.19.1";
        edition = "2021";
        sha256 = "0zf0ymdf0xqbv8xsfbma1wnna7lhjssiwllb11apj2zcsaw0nzj7";
        libName = "risc0_core";
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
        };
      };
      "risc0-zkp" = rec {
        crateName = "risc0-zkp";
        version = "0.19.1";
        edition = "2021";
        sha256 = "10mxj34m4hhlywlapgvdlrxpw42qqdv3nmhyxnd3yzc4ryhb3aym";
        libName = "risc0_zkp";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "blake2";
            packageId = "blake2";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "oid" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "risc0-core";
            packageId = "risc0-core";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkvm-platform";
            packageId = "risc0-zkvm-platform";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
            features = [ "compress" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "attributes" ];
          }
        ];
        features = {
          "cuda" = [ "dep:cust" "prove" "risc0-sys/cuda" ];
          "metal" = [ "dep:metal" "prove" "risc0-sys/metal" ];
          "prove" = [ "dep:ff" "dep:lazy_static" "dep:ndarray" "dep:rand" "dep:rayon" "risc0-sys" "std" ];
          "risc0-sys" = [ "dep:risc0-sys" ];
          "std" = [ "anyhow/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "risc0-zkvm" = rec {
        crateName = "risc0-zkvm";
        version = "0.19.1";
        edition = "2021";
        sha256 = "115k0xdl47yzpc6ccl9bbgy8pcqlh7d4zqwv371fyf600br0vy1w";
        libName = "risc0_zkvm";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "bonsai-sdk";
            packageId = "bonsai-sdk";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
            target = { target, features }: (!("zkvm" == target."os" or null));
            features = [ "serde" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "custom" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "num-derive";
            packageId = "num-derive 0.4.2";
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
            optional = true;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-binfmt";
            packageId = "risc0-binfmt";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-circuit-recursion";
            packageId = "risc0-circuit-recursion";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-circuit-rv32im";
            packageId = "risc0-circuit-rv32im";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-core";
            packageId = "risc0-core";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-core";
            packageId = "risc0-core";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
          }
          {
            name = "risc0-zkp";
            packageId = "risc0-zkp";
            usesDefaultFeatures = false;
          }
          {
            name = "risc0-zkvm-platform";
            packageId = "risc0-zkvm-platform";
            usesDefaultFeatures = false;
            features = [ "rust-runtime" "export-getrandom" ];
          }
          {
            name = "rrs-lib";
            packageId = "rrs-lib";
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            target = { target, features }: (!("zkvm" == target."os" or null));
            features = [ "attributes" ];
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build 0.12.6";
            optional = true;
          }
          {
            name = "protobuf-src";
            packageId = "protobuf-src";
            optional = true;
          }
        ];
        features = {
          "client" = [ "dep:bincode" "dep:bonsai-sdk" "dep:bytes" "dep:prost" "dep:prost-build" "dep:protobuf-src" "std" ];
          "cuda" = [ "prove" "risc0-circuit-recursion/cuda" "risc0-circuit-rv32im/cuda" "risc0-zkp/cuda" ];
          "default" = [ "client" ];
          "metal" = [ "prove" "risc0-circuit-recursion/metal" "risc0-circuit-rv32im/metal" "risc0-zkp/metal" ];
          "profiler" = [ "dep:addr2line" "dep:gimli" "dep:object" "dep:prost" "dep:prost-build" "dep:protobuf-src" "dep:goblin" "dep:rustc-demangle" ];
          "prove" = [ "client" "fault-proof" "dep:addr2line" "dep:bincode" "dep:bytes" "dep:crypto-bigint" "dep:num-traits" "dep:generic-array" "dep:getrandom" "dep:lazy-regex" "dep:prost" "dep:prost-build" "dep:protobuf-src" "dep:rayon" "dep:sha2" "dep:tempfile" "dep:typetag" "risc0-circuit-recursion/prove" "risc0-circuit-rv32im/prove" "risc0-zkp/prove" "std" ];
          "std" = [ "anyhow/std" "num-traits?/std" "risc0-binfmt/std" "risc0-circuit-recursion/std" "risc0-circuit-rv32im/std" "risc0-zkp/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "std" ];
      };
      "risc0-zkvm-platform" = rec {
        crateName = "risc0-zkvm-platform";
        version = "0.19.1";
        edition = "2021";
        sha256 = "00ndqmk6qjdl1xz1zpphv7452y4vv433zkqavc0j15x4yxk6pk9d";
        libName = "risc0_zkvm_platform";
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            target = { target, features }: ("zkvm" == target."os" or null);
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
            target = { target, features }: ("zkvm" == target."os" or null);
            features = [ "custom" ];
          }
          {
            name = "libm";
            packageId = "libm";
            optional = true;
            target = { target, features }: ("zkvm" == target."os" or null);
          }
        ];
        features = {
          "export-getrandom" = [ "dep:getrandom" "dep:bytemuck" ];
          "export-libm" = [ "dep:libm" ];
          "rust-runtime" = [ "export-syscalls" "export-libm" ];
        };
        resolvedDefaultFeatures = [ "export-getrandom" "export-libm" "export-syscalls" "rust-runtime" ];
      };
      "rlp" = rec {
        crateName = "rlp";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1v718xmnv7274y2rkrsjq8rmz9xzxnbzf3n15yyvcr23yd1r54dv";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "rlp-derive";
            packageId = "rlp-derive";
            optional = true;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "rlp-derive" ];
          "rlp-derive" = [ "dep:rlp-derive" ];
          "std" = [ "bytes/std" "rustc-hex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "rlp-derive" "std" ];
      };
      "rlp-derive" = rec {
        crateName = "rlp-derive";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0ak73xi7zpw0zs5n30w6j2jmwfqdyb9hfagyjy3hsd0cpqm7ngg3";
        procMacro = true;
        libName = "rlp_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "rmp" = rec {
        crateName = "rmp";
        version = "0.8.14";
        edition = "2021";
        sha256 = "1i1l6dhv7vws5vp0ikakj44fk597xi59g3j6ng1q55x3dz0xg3i2";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "byteorder/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rmp-serde" = rec {
        crateName = "rmp-serde";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1nylmh7w2vpa1bwrnx1jfp2l4yz6i5qrmpic5zll166gfyj9kraj";
        libName = "rmp_serde";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rmp";
            packageId = "rmp";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "rrs-lib" = rec {
        crateName = "rrs-lib";
        version = "0.1.0";
        edition = "2018";
        sha256 = "00fh4mx3g4xk8d4lq008k3495zsg27cyv9jbyvkxmsx4ycx2sf5l";
        libName = "rrs_lib";
        authors = [
          "Greg Chadwick <mail@gregchadwick.co.uk>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];

      };
      "rrs-succinct" = rec {
        crateName = "rrs-succinct";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1a8g71ym33lmimwkva3rfg8pya0p01ljsycfx4c7vxm9jdc6hwik";
        libName = "rrs_succinct";
        authors = [
          "Greg Chadwick <mail@gregchadwick.co.uk>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "num_enum";
            packageId = "num_enum 0.5.11";
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];

      };
      "ruint" = rec {
        crateName = "ruint";
        version = "1.15.0";
        edition = "2021";
        sha256 = "1d3zkj42w569v502fy54cwikvwwjwlh0gvrrdyn5d3y6x1gnn98i";
        authors = [
          "Remco Bloemen <remco@wicked.ventures>"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.3.0";
            rename = "ark-ff-03";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            rename = "ark-ff-04";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "fastrlp";
            packageId = "fastrlp 0.3.1";
            rename = "fastrlp-03";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "fastrlp";
            packageId = "fastrlp 0.4.0";
            rename = "fastrlp-04";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "primitive-types";
            packageId = "primitive-types";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "no_std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "rand-08";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            rename = "rand-09";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rlp";
            packageId = "rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ruint-macro";
            packageId = "ruint-macro";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            rename = "rand-09";
          }
        ];
        features = {
          "alloc" = [ "proptest?/alloc" "rand-08?/alloc" "rand-09?/alloc" "serde?/alloc" "valuable?/alloc" "zeroize?/alloc" ];
          "alloy-rlp" = [ "dep:alloy-rlp" "alloc" ];
          "arbitrary" = [ "dep:arbitrary" "std" ];
          "ark-ff" = [ "dep:ark-ff-03" ];
          "ark-ff-04" = [ "dep:ark-ff-04" ];
          "bn-rs" = [ "dep:bn-rs" "std" ];
          "borsh" = [ "dep:borsh" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "der" = [ "dep:der" "alloc" ];
          "diesel" = [ "dep:diesel" "std" "dep:thiserror" ];
          "fastrlp" = [ "dep:fastrlp-03" "alloc" ];
          "fastrlp-04" = [ "dep:fastrlp-04" "alloc" ];
          "generic_const_exprs" = [ "nightly" ];
          "num-bigint" = [ "dep:num-bigint" "alloc" ];
          "num-integer" = [ "dep:num-integer" "num-traits" "alloc" ];
          "num-traits" = [ "dep:num-traits" "alloc" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" "alloc" ];
          "postgres" = [ "dep:postgres-types" "dep:bytes" "dep:thiserror" "std" ];
          "primitive-types" = [ "dep:primitive-types" ];
          "proptest" = [ "dep:proptest" "alloc" ];
          "pyo3" = [ "dep:pyo3" "std" ];
          "quickcheck" = [ "dep:quickcheck" "std" ];
          "rand" = [ "dep:rand-08" ];
          "rand-09" = [ "dep:rand-09" ];
          "rlp" = [ "dep:rlp" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "sqlx" = [ "dep:sqlx-core" "std" "dep:thiserror" ];
          "ssz" = [ "std" "dep:ethereum_ssz" ];
          "std" = [ "alloc" "alloy-rlp?/std" "ark-ff-03?/std" "ark-ff-04?/std" "bytes?/std" "fastrlp-03?/std" "fastrlp-04?/std" "num-bigint?/std" "num-integer?/std" "num-traits?/std" "parity-scale-codec?/std" "primitive-types?/std" "proptest?/std" "rand-08?/std" "rand-08?/std_rng" "rand-09?/std" "rand-09?/thread_rng" "rlp?/std" "serde?/std" "valuable?/std" "zeroize?/std" ];
          "subtle" = [ "dep:subtle" ];
          "valuable" = [ "dep:valuable" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "alloy-rlp" "serde" "std" ];
      };
      "ruint-macro" = rec {
        crateName = "ruint-macro";
        version = "1.2.1";
        edition = "2021";
        sha256 = "065fmbmrpixy4y8qnz5ygb3dv50v6wjyra22knniaziplvc7pza8";
        procMacro = true;
        libName = "ruint_macro";
        authors = [
          "Remco Bloemen <remco@wicked.ventures>"
        ];

      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hash 2.1.1" = rec {
        crateName = "rustc-hash";
        version = "2.1.1";
        edition = "2021";
        sha256 = "03gz5lvd9ghcwsal022cgkq67dmimcgdjghfb5yb5d352ga06xrm";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hex" = rec {
        crateName = "rustc-hex";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1mkjy2vbn5kzg67wgngwddlk4snmd8mkjkql2dzrzzfh6ajzcx9y";
        libName = "rustc_hex";
        authors = [
          "The Rust Project Developers"
          "debris <marek.kotewicz@gmail.com>"
          "Robert Habermeier"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rustc_version 0.3.3" = rec {
        crateName = "rustc_version";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1vjmw7xcdri0spsf24mkpwpph853wrbqppihhw061i2igh4f5pzh";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver 0.11.0";
          }
        ];

      };
      "rustc_version 0.4.1" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver 1.0.26";
          }
        ];

      };
      "rustix 0.38.44" = rec {
        crateName = "rustix";
        version = "0.38.44";
        edition = "2021";
        sha256 = "0m61v0h15lf5rrnbjhcb9306bgqrhskrqv7i1n0939dsw8dbrdgx";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.15";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.15";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" "libc-extra-traits" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" "libc-extra-traits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "fs" "libc-extra-traits" "std" ];
      };
      "rustix 1.0.7" = rec {
        crateName = "rustix";
        version = "1.0.7";
        edition = "2021";
        sha256 = "0rhjh16bnxi86nrn9qwcnw5632mvd5m1vdy61s4n9zz7mzb867n7";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.9.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.9.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "io_uring" = [ "event" "fs" "net" "thread" "linux-raw-sys/io_uring" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_5_1" = [ "linux_4_11" ];
          "linux_5_11" = [ "linux_5_1" ];
          "linux_latest" = [ "linux_5_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "pty" = [ "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fs" "std" ];
      };
      "rustls 0.21.12" = rec {
        crateName = "rustls";
        version = "0.21.12";
        edition = "2021";
        sha256 = "0gjdg2a9r81sdwkyw3n5yfbkrr6p9gyk3xr2kcsr3cs83x6s2miz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.101.7";
            rename = "webpki";
            features = [ "alloc" "std" ];
          }
          {
            name = "sct";
            packageId = "sct";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = [ "logging" "tls12" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
        };
        resolvedDefaultFeatures = [ "dangerous_configuration" "default" "log" "logging" "tls12" ];
      };
      "rustls 0.23.27" = rec {
        crateName = "rustls";
        version = "0.23.27";
        edition = "2021";
        sha256 = "08d3nipyhmy4apksjyrb98s9k91wjyg1k7y0flx2671w135482bk";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" "race" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.3";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "brotli" = [ "dep:brotli" "dep:brotli-decompressor" "std" ];
          "default" = [ "aws_lc_rs" "logging" "prefer-post-quantum" "std" "tls12" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" "webpki/aws-lc-rs-fips" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "prefer-post-quantum" = [ "aws_lc_rs" ];
          "read_buf" = [ "rustversion" "std" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [ "webpki/std" "pki-types/std" "once_cell/std" ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [ "log" "logging" "ring" "std" "tls12" ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.6.3";
        edition = "2021";
        sha256 = "007zind70rd5rfsrkdcfm8vn09j8sg02phg9334kark6rdscxam9";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 1.0.4";
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pemfile 1.0.4" = rec {
        crateName = "rustls-pemfile";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1324n5bcns0rnw6vywr5agff3rwfvzphi7rmbyzwnv6glkhclx0w";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
        ];

      };
      "rustls-pemfile 2.2.0" = rec {
        crateName = "rustls-pemfile";
        version = "2.2.0";
        edition = "2018";
        sha256 = "0l3f3mrfkgdjrava7ibwzgwc4h3dljw3pdkbsi9rkwz3zvji9qyw";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.12.0";
        edition = "2021";
        sha256 = "0yawbdpix8jif6s8zj1p2hbyb7y3bj66fhx0y7hyf4qh4964m6i2";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "dep:zeroize" ];
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "web" "web-time" ];
      };
      "rustls-webpki 0.101.7" = rec {
        crateName = "rustls-webpki";
        version = "0.101.7";
        edition = "2021";
        sha256 = "0rapfhpkqp75552i8r0y7f4vq7csb4k7gjjans0df73sxv8paqlb";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.14";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-webpki 0.103.3" = rec {
        crateName = "rustls-webpki";
        version = "0.103.3";
        edition = "2021";
        sha256 = "0ddl9qxx94iyichk05r7l30d9dxfd35ybffhsxpsr9pppki2z9z4";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "dep:aws-lc-rs" "aws-lc-rs/fips" ];
          "default" = [ "std" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ring" "std" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.21";
        edition = "2018";
        sha256 = "07bb1xx05hhwpnl43sqrhsmxyk5sd5m5baadp19nxp69s9xij3ca";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "rusty-fork" = rec {
        crateName = "rusty-fork";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0kxwq5c480gg6q0j3bg4zzyfh2kwmc3v2ba94jw8ncjc8mpcqgfb";
        libName = "rusty_fork";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "wait-timeout";
            packageId = "wait-timeout";
            optional = true;
          }
        ];
        features = {
          "default" = [ "timeout" ];
          "timeout" = [ "wait-timeout" ];
          "wait-timeout" = [ "dep:wait-timeout" ];
        };
        resolvedDefaultFeatures = [ "timeout" "wait-timeout" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "salsa20" = rec {
        crateName = "salsa20";
        version = "0.10.2";
        edition = "2021";
        sha256 = "04w211x17xzny53f83p8f7cj7k2hi8zck282q5aajwqzydd2z8lp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "cipher/std" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scale-info" = rec {
        crateName = "scale-info";
        version = "2.11.6";
        edition = "2021";
        sha256 = "02sdd1yx0aic804zwwjvys8dxwq8dc2jfnfbm4bhsr52xcr3nsil";
        libName = "scale_info";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "from" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "scale";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
          }
        ];
        features = {
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "decode" = [ "scale/full" ];
          "default" = [ "std" ];
          "derive" = [ "scale-info-derive" ];
          "docs" = [ "scale-info-derive/docs" ];
          "scale-info-derive" = [ "dep:scale-info-derive" ];
          "schema" = [ "std" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "bitvec?/std" "scale/std" ];
        };
        resolvedDefaultFeatures = [ "derive" "scale-info-derive" ];
      };
      "scale-info-derive" = rec {
        crateName = "scale-info-derive";
        version = "2.11.6";
        edition = "2021";
        sha256 = "1gvyzvqvyzb7fv9waqj284cziflqi2r29d0zp5wj37kkpwj00qy6";
        procMacro = true;
        libName = "scale_info_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "derive" "visit" "visit-mut" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "docs" ];
        };
      };
      "scc" = rec {
        crateName = "scc";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1x1739jz8bx9x46d26aagwin9psykka1siw9fn0lbwi8zdsxgci2";
        authors = [
          "wvwwvwwv <wvwwvwwv@me.com>"
        ];
        dependencies = [
          {
            name = "sdd";
            packageId = "sdd";
          }
        ];
        features = {
          "equivalent" = [ "dep:equivalent" ];
          "loom" = [ "dep:loom" "sdd/loom" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.27";
        edition = "2018";
        sha256 = "0gbbhy28v72kd5iina0z2vcdl3vz63mk5idvkzn5r52z6jmfna8z";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_SystemInformation" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "schemars" = rec {
        crateName = "schemars";
        version = "0.8.22";
        edition = "2021";
        sha256 = "05an9nbi18ynyxv1rjmwbg6j08j0496hd64mjggh53mwp3hjmgrz";
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "schemars_derive";
            packageId = "schemars_derive";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "arrayvec" = [ "arrayvec05" ];
          "arrayvec05" = [ "dep:arrayvec05" ];
          "arrayvec07" = [ "dep:arrayvec07" ];
          "bigdecimal" = [ "bigdecimal03" ];
          "bigdecimal03" = [ "dep:bigdecimal03" ];
          "bigdecimal04" = [ "dep:bigdecimal04" ];
          "bytes" = [ "dep:bytes" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "derive" ];
          "derive" = [ "schemars_derive" ];
          "derive_json_schema" = [ "impl_json_schema" ];
          "either" = [ "dep:either" ];
          "enumset" = [ "dep:enumset" ];
          "impl_json_schema" = [ "derive" ];
          "indexmap" = [ "dep:indexmap" ];
          "indexmap1" = [ "indexmap" ];
          "indexmap2" = [ "dep:indexmap2" ];
          "preserve_order" = [ "indexmap" ];
          "raw_value" = [ "serde_json/raw_value" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "schemars_derive" = [ "dep:schemars_derive" ];
          "semver" = [ "dep:semver" ];
          "smallvec" = [ "dep:smallvec" ];
          "smol_str" = [ "dep:smol_str" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "uuid08" ];
          "uuid08" = [ "dep:uuid08" ];
          "uuid1" = [ "dep:uuid1" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "schemars_derive" ];
      };
      "schemars_derive" = rec {
        crateName = "schemars_derive";
        version = "0.8.22";
        edition = "2021";
        sha256 = "0kakyzrp5801s4i043l4ilv96lzimnlh01pap958h66n99w6bqij";
        procMacro = true;
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_derive_internals";
            packageId = "serde_derive_internals";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "schnellru" = rec {
        crateName = "schnellru";
        version = "0.2.4";
        edition = "2021";
        sha256 = "0j8ngnis4qk1gncwpf2m5g4jlrrry0cbv5ifwpcn7skvy6xqaqim";
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
            usesDefaultFeatures = false;
            features = [ "raw" "inline-more" ];
          }
        ];
        features = {
          "default" = [ "runtime-rng" ];
          "runtime-rng" = [ "ahash/runtime-rng" ];
        };
        resolvedDefaultFeatures = [ "default" "runtime-rng" ];
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "scrypt" = rec {
        crateName = "scrypt";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0pglmppcl8mdzfxdv2x9dsjrwxhc1bm9zvxjibnlv59jnv9297lz";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "simple" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "simple" = [ "password-hash" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.7.1";
        edition = "2021";
        sha256 = "056lmi2xkzdg1dbai6ha3n57s18cbip4pnmpdhyljli3m99n216s";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.14";
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];

      };
      "sdd" = rec {
        crateName = "sdd";
        version = "3.0.8";
        edition = "2021";
        sha256 = "08gfrs3cz2ncbqz7v1xm5687hggl166pic1frfk7s0f7244hfkjq";
        authors = [
          "wvwwvwwv <wvwwvwwv@me.com>"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "sec1 0.3.0" = rec {
        crateName = "sec1";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0a09lk5w3nyggpyz54m10nnlg9v8qbh6kw3v1bgla31988c4rqiv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.1.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.6.1";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der/alloc" "pkcs8/alloc" "zeroize/alloc" ];
          "base16ct" = [ "dep:base16ct" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "base16ct" "generic-array" ];
          "serde" = [ "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "der/std" "alloc" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "base16ct" "default" "der" "generic-array" "point" "subtle" "zeroize" ];
      };
      "sec1 0.7.3" = rec {
        crateName = "sec1";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1p273j8c87pid6a1iyyc7vxbvifrw55wbxgr0dh3l8vnbxb7msfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.7.10";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der?/alloc" "pkcs8?/alloc" "zeroize?/alloc" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" "zeroize" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "dep:base16ct" "dep:generic-array" ];
          "serde" = [ "dep:serdect" ];
          "std" = [ "alloc" "der?/std" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" "der?/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "der" "point" "std" "subtle" "zeroize" ];
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "2.11.1";
        edition = "2021";
        sha256 = "00ldclwx78dm61v7wkach9lcx76awlrv0fdgjdwch4dmy12j4yw9";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" "serial-number-bigint" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "serial-number-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_9" "default" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.14.0";
        edition = "2021";
        sha256 = "0chwn01qrnvs59i5220bymd38iddy4krbnmfnhf4k451aqfj7ns9";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_9" "default" ];
      };
      "semver 0.11.0" = rec {
        crateName = "semver";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1dn6064fipjymnmjccyjhb70miyvqvp08gvw1wbg8vbg4c8ay0gk";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" "diesel/sqlite" ];
          "diesel" = [ "dep:diesel" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver 1.0.26" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.10.3";
        edition = "2018";
        crateBin = [];
        sha256 = "1hnyq04mmxwx40xi3a2a9yn8nmjav7zqp4waggf7ylm3aimj004r";
        libName = "semver_parser";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
        ];

      };
      "send_wrapper 0.4.0" = rec {
        crateName = "send_wrapper";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1l7s28vfnwdbjyrrk3lx81jy4f0dcrv4iwyah2wj6vndxhqxaf7n";
        authors = [
          "Thomas Keh"
        ];

      };
      "send_wrapper 0.6.0" = rec {
        crateName = "send_wrapper";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wrxzsh9fzgkkkms621ydnz8mj30ilyq299a8cf65jn1y72hw2yd";
        authors = [
          "Thomas Keh"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "rc" "serde_derive" "std" ];
      };
      "serde-cw-value" = rec {
        crateName = "serde-cw-value";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1m4riskk8gp6jq921jzk9ldgaz8xiz0c7djhv2vmimwfdgd34pd7";
        libName = "serde_cw_value";
        authors = [
          "Bartłomiej Kuras"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde-json-wasm" = rec {
        crateName = "serde-json-wasm";
        version = "1.0.1";
        edition = "2021";
        sha256 = "19f9z0m31xvz8f9ynj76bqh5nhnfx709s2fmzyyraifxag8s0pgh";
        libName = "serde_json_wasm";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Ethan Frey <ethanfrey@noreply.github.com>"
          "Simon Warta <webmaster128@noreply.github.com>"
          "Mauro Lacy <maurolacy@noreply.github.com>"
          "Bartłomiej Kuras <hashedone@noreply.github.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
          "unstable" = [ "serde/unstable" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.17";
        edition = "2018";
        sha256 = "15kds0mw19lvm8ydd1qbharh5rz96zir06yn2silqbfy3cigsdw4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_derive_internals" = rec {
        crateName = "serde_derive_internals";
        version = "0.29.1";
        edition = "2015";
        sha256 = "04g7macx819vbnxhi52cx0nhxi56xlhrybgwybyy7fb9m4h6mlhq";
        libPath = "lib.rs";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" ];
          }
        ];

      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.140";
        edition = "2021";
        sha256 = "0wwkp4vc20r87081ihj3vpyz5qf7wqkqipq17v99nv6wjrp8n1i0";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "raw_value" "std" "unbounded_depth" ];
      };
      "serde_path_to_error" = rec {
        crateName = "serde_path_to_error";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0alb447z25dvczd6ll3vfjbf51pypn23mgs5hv8978vzjczv3yjr";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.20";
        edition = "2021";
        sha256 = "1755gss3f6lwvv23pk7fhnjdkjw7609rcgjlr8vjg6791blf6php";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.12.0";
        edition = "2021";
        sha256 = "1ai9c3cbdgrsvmlc4qpg9z73y80yplk3k7zp45wp97xnzkrggdnn";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
            rename = "chrono_0_4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            rename = "indexmap_1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde-1" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            rename = "indexmap_2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            rename = "time_0_3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "base64?/alloc" "chrono_0_4?/alloc" "hex?/alloc" "serde_json?/alloc" "time_0_3?/alloc" ];
          "base64" = [ "dep:base64" "alloc" ];
          "chrono" = [ "chrono_0_4" ];
          "chrono_0_4" = [ "dep:chrono_0_4" ];
          "default" = [ "std" "macros" ];
          "guide" = [ "dep:doc-comment" "dep:document-features" "macros" "std" ];
          "hashbrown_0_14" = [ "dep:hashbrown_0_14" "alloc" ];
          "hashbrown_0_15" = [ "dep:hashbrown_0_15" "alloc" ];
          "hex" = [ "dep:hex" "alloc" ];
          "indexmap" = [ "indexmap_1" ];
          "indexmap_1" = [ "dep:indexmap_1" "alloc" ];
          "indexmap_2" = [ "dep:indexmap_2" "alloc" ];
          "json" = [ "dep:serde_json" "alloc" ];
          "macros" = [ "dep:serde_with_macros" ];
          "schemars_0_8" = [ "dep:schemars_0_8" "std" "serde_with_macros?/schemars_0_8" ];
          "std" = [ "alloc" "serde/std" "chrono_0_4?/clock" "chrono_0_4?/std" "indexmap_1?/std" "indexmap_2?/std" "time_0_3?/serde-well-known" "time_0_3?/std" ];
          "time_0_3" = [ "dep:time_0_3" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "macros" "std" ];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.12.0";
        edition = "2021";
        sha256 = "13hznly0qq1rngsdh8gpnajab2knkrmvwwrbmii86g1s36jwl04d";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.20.11";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" "parsing" ];
          }
        ];
        features = {
        };
      };
      "serial_test" = rec {
        crateName = "serial_test";
        version = "3.2.0";
        edition = "2018";
        sha256 = "1a8zg87gi28952hzj363ykwd8p1ssrakl1gi3f4xdqa4y84q298v";
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            usesDefaultFeatures = false;
          }
          {
            name = "scc";
            packageId = "scc";
            usesDefaultFeatures = false;
          }
          {
            name = "serial_test_derive";
            packageId = "serial_test_derive";
          }
        ];
        features = {
          "async" = [ "dep:futures" "serial_test_derive/async" ];
          "default" = [ "logging" "async" ];
          "docsrs" = [ "dep:document-features" ];
          "file_locks" = [ "dep:fslock" ];
          "logging" = [ "dep:log" ];
          "test_logging" = [ "logging" "dep:env_logger" "serial_test_derive/test_logging" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "logging" ];
      };
      "serial_test_derive" = rec {
        crateName = "serial_test_derive";
        version = "3.2.0";
        edition = "2018";
        sha256 = "1vwyz2k5kiy5jmba0fvp6ph8ia707801bz918n2ff7bm11d2csax";
        procMacro = true;
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" "printing" "parsing" "clone-impls" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "async" "default" ];
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.10.9" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "compress" "default" "std" ];
      };
      "sha2 0.9.9" = rec {
        crateName = "sha2";
        version = "0.9.9";
        edition = "2018";
        sha256 = "006q2f0ar26xcjxqz8zsncfgz86zqa5dkwlwv03rhx1rpzhs2n2d";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3-asm" = rec {
        crateName = "sha3-asm";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0iids1y6f4fc3f435b1rz5g72l62bxcax7n56yl7m0vw69ggr3n2";
        libName = "sha3_asm";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature 1.6.4" = rec {
        crateName = "signature";
        version = "1.6.4";
        edition = "2021";
        sha256 = "0z3xg405pg827g6hfdprnszsdqkkbrsfx7f1dl04nv9g7cxks8vl";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive-preview" = [ "digest-preview" "signature_derive" ];
          "digest" = [ "dep:digest" ];
          "digest-preview" = [ "digest" ];
          "rand-preview" = [ "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "signature_derive" = [ "dep:signature_derive" ];
        };
        resolvedDefaultFeatures = [ "digest" "digest-preview" "hazmat-preview" "rand-preview" "rand_core" ];
      };
      "signature 2.2.0" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "rand_core?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "digest" "rand_core" "std" ];
      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1fz8842yya5qrbdsgcij1ysw0zlrcdwqcrs6p2cqr73ja0gn6zr9";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "macros" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "macros" "parsing" "quickcheck" ];
          }
        ];

      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17f35782ma3fn6sh21c027kjmd227xyrx06ffi8gw4xzv9yry6an";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "size" = rec {
        crateName = "size";
        version = "0.4.1";
        edition = "2018";
        sha256 = "0vdxh3h5zjx8zb5sk8fydqvcwzsrzb44yiljif36v1djgx691vcz";
        authors = [
          "Mahmoud Al-Qudsi <mqudsi@neosmart.net>"
          "NeoSmart Technologies"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.0";
        edition = "2018";
        sha256 = "1sgfw8z729nlxk8k13dhs0a762wnaxmlx70a7xlf3wz989bjh5w9";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bincode" = [ "dep:bincode" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "impl_bincode" = [ "bincode" "unty" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "unty" = [ "dep:unty" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "serde" "union" "write" ];
      };
      "snowbridge-amcl" = rec {
        crateName = "snowbridge-amcl";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1r97qkbjbgh5grrlm7l6sppw86dsynji52kyhjww20yz7kb9w2j6";
        libName = "snowbridge_amcl";
        authors = [
          "Nikita Khateev <nikita.khateev@dsr-corporation.com>"
          "Kirk Baird <baird.k@outlook.com>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "all" = [ "anssi" "bls24" "bls48" "bls381" "bls383" "bls461" "bn254" "bn254cx" "brainpool" "c25519" "c41417" "ed25519" "fp256bn" "fp512bn" "goldilocks" "hifive" "nist256" "nist384" "nist521" "nums256e" "nums256w" "nums384e" "nums384w" "nums512e" "nums512w" "rsa2048" "rsa3072" "rsa4096" "secp256k1" ];
          "bench" = [ "all" ];
          "default" = [ "std" ];
          "std" = [ "codec/std" "scale-info/std" ];
        };
        resolvedDefaultFeatures = [ "bls381" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.10";
        edition = "2021";
        sha256 = "0y067ki5q946w91xlz2sb175pnfazizva6fi3kfp639mxnmpc8z2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "solang-parser" = rec {
        crateName = "solang-parser";
        version = "0.3.3";
        edition = "2021";
        sha256 = "09jvia8g1qap64nn50w80maisfjwf7sbvw4jfmqm9cglb4fcw9f4";
        libName = "solang_parser";
        authors = [
          "Sean Young <sean@mess.org>"
          "Lucas Steuernagel <lucas.tnagel@gmail.com>"
          "Cyrill Leutwiler <bigcyrill@hotmail.com>"
        ];
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "phf";
            packageId = "phf";
            features = [ "macros" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "pt-serde" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "sp1-core-executor" = rec {
        crateName = "sp1-core-executor";
        version = "1.2.0";
        edition = "2021";
        sha256 = "1ygdvggsq03v6nh40y4v7fhx7ca571jcpb635qkzmrziikl13plg";
        libName = "sp1_core_executor";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "elf";
            packageId = "elf";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "generic-array";
            packageId = "generic-array 1.2.0";
            features = [ "alloc" "serde" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-keccak-air";
            packageId = "p3-keccak-air";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rrs-succinct";
            packageId = "rrs-succinct";
            rename = "rrs_lib";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "sp1-curves";
            packageId = "sp1-curves";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
        };
      };
      "sp1-core-machine" = rec {
        crateName = "sp1-core-machine";
        version = "1.2.0";
        edition = "2021";
        sha256 = "1z2ql88xxgll64kw5zx23mdv1wz65pnnzx49ychmb41qsj1zm3vl";
        libName = "sp1_core_machine";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "elf";
            packageId = "elf";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
          }
          {
            name = "generic-array";
            packageId = "generic-array 1.2.0";
            features = [ "alloc" "serde" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            features = [ "expose-field" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-blake3";
            packageId = "p3-blake3";
            features = [ "parallel" ];
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-keccak";
            packageId = "p3-keccak";
          }
          {
            name = "p3-keccak-air";
            packageId = "p3-keccak-air";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-uni-stark";
            packageId = "p3-uni-stark";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon-scan";
            packageId = "rayon-scan";
          }
          {
            name = "rrs-succinct";
            packageId = "rrs-succinct";
            rename = "rrs_lib";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "size";
            packageId = "size";
          }
          {
            name = "snowbridge-amcl";
            packageId = "snowbridge-amcl";
            rename = "amcl";
            usesDefaultFeatures = false;
            features = [ "bls381" ];
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-curves";
            packageId = "sp1-curves";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-forest";
            packageId = "tracing-forest";
            features = [ "ansi" "smallvec" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "std" "env-filter" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "num";
            packageId = "num";
            features = [ "rand" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
            features = [ "programs" ];
          }
        ];
        features = {
          "neon" = [ "p3-blake3/neon" ];
        };
      };
      "sp1-curves" = rec {
        crateName = "sp1-curves";
        version = "1.2.0";
        edition = "2021";
        sha256 = "12dwqj1gfi1rhzcwh4hl2l06h4rsxls7cga5p19yq5yx1zkd269c";
        libName = "sp1_curves";
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "dashu";
            packageId = "dashu";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
          }
          {
            name = "generic-array";
            packageId = "generic-array 1.2.0";
            features = [ "alloc" "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            features = [ "expose-field" ];
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "snowbridge-amcl";
            packageId = "snowbridge-amcl";
            rename = "amcl";
            usesDefaultFeatures = false;
            features = [ "bls381" ];
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];

      };
      "sp1-derive" = rec {
        crateName = "sp1-derive";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0ynia5ay2zz5sa52n9l3159kwr9510c14p8mbc4ajx6ww7d6zl3l";
        procMacro = true;
        libName = "sp1_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "sp1-primitives" = rec {
        crateName = "sp1-primitives";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0ndgl933gap5ip7asr9i4jnyq9nbrv5kb8c0b7zfqw9hqj59ngyi";
        libName = "sp1_primitives";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
        ];

      };
      "sp1-prover" = rec {
        crateName = "sp1-prover";
        version = "1.2.0";
        edition = "2021";
        crateBin = [];
        sha256 = "1b8r4af3k4ql2s3lzz3i87h5bg6qnhc4h29p4lrj7sl995srcm5z";
        libName = "sp1_prover";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "env" ];
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "oneshot";
            packageId = "oneshot";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serial_test";
            packageId = "serial_test";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-circuit";
            packageId = "sp1-recursion-circuit";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-gnark-ffi";
            packageId = "sp1-recursion-gnark-ffi";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-program";
            packageId = "sp1-recursion-program";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        features = {
          "native-gnark" = [ "sp1-recursion-gnark-ffi/native" ];
          "neon" = [ "sp1-core-machine/neon" ];
        };
      };
      "sp1-recursion-circuit" = rec {
        crateName = "sp1-recursion-circuit";
        version = "1.2.0";
        edition = "2021";
        sha256 = "1avq6wr3vs7476gxx5jxh02y85017qmlfsh45xkik14jsjfyh3mb";
        libName = "sp1_recursion_circuit";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-derive";
            packageId = "sp1-recursion-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-program";
            packageId = "sp1-recursion-program";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
        ];
        features = {
          "native-gnark" = [ "sp1-recursion-gnark-ffi/native" ];
        };
      };
      "sp1-recursion-compiler" = rec {
        crateName = "sp1-recursion-compiler";
        version = "1.2.0";
        edition = "2021";
        sha256 = "1pin4l7229rrir5f5ikgf7p5k1r2d86wjdn3xjcddvb64z7hv7fq";
        libName = "sp1_recursion_compiler";
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-core-v2";
            packageId = "sp1-recursion-core-v2";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-derive";
            packageId = "sp1-recursion-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
        ];

      };
      "sp1-recursion-core" = rec {
        crateName = "sp1-recursion-core";
        version = "1.2.0";
        edition = "2021";
        sha256 = "18cj7mn3cyczv25wkqi28ly1vssndkifgphci21wghxgh3sl9wpy";
        libName = "sp1_recursion_core";
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "backtrace";
            packageId = "backtrace";
            features = [ "serde" ];
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            features = [ "derive" "derive_bits" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "zkhash";
            packageId = "zkhash";
          }
        ];

      };
      "sp1-recursion-core-v2" = rec {
        crateName = "sp1-recursion-core-v2";
        version = "1.2.0";
        edition = "2021";
        sha256 = "1blkz6b23z2v4457cph0qm0dfzwk6xjc153kzc9y07glpjxav0ld";
        libName = "sp1_recursion_core_v2";
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "backtrace";
            packageId = "backtrace";
            features = [ "serde" ];
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            features = [ "derive" "derive_bits" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
          {
            name = "zkhash";
            packageId = "zkhash";
          }
        ];

      };
      "sp1-recursion-derive" = rec {
        crateName = "sp1-recursion-derive";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0hx0r63ynpkpf20qfxqyw7khrpsvakxy7yk0ydvki2vcd991x30n";
        procMacro = true;
        libName = "sp1_recursion_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "sp1-recursion-gnark-ffi" = rec {
        crateName = "sp1-recursion-gnark-ffi";
        version = "1.2.0";
        edition = "2021";
        sha256 = "188k9ch0g61zplidpxji1c2dbn0fsvavd2bzzfm9fhrpnj5fl00i";
        libName = "sp1_recursion_gnark_ffi";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
        };
      };
      "sp1-recursion-program" = rec {
        crateName = "sp1-recursion-program";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0y6s4sqz2d711mkgr9g6a0ak03fy23pwjpnzs4vlzm8bigfjn99m";
        libName = "sp1_recursion_program";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "stacker";
            packageId = "stacker";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "debug" = [ "sp1-core-machine/debug" ];
        };
      };
      "sp1-sdk" = rec {
        crateName = "sp1-sdk";
        version = "1.2.0";
        edition = "2021";
        sha256 = "102gvnmq3c5lml8brfycgph09f96mlniclm6fadvx74vi0w138l5";
        libName = "sp1_sdk";
        dependencies = [
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types 0.7.7";
            optional = true;
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "ethers";
            packageId = "ethers";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "custom" "js" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indicatif";
            packageId = "indicatif 0.17.11";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            optional = true;
            features = [ "rustls-tls" "trust-dns" "stream" ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-prover";
            packageId = "sp1-prover";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "twirp-rs";
            packageId = "twirp-rs";
            rename = "twirp";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "vergen";
            packageId = "vergen";
            usesDefaultFeatures = false;
            features = [ "build" "git" "git2" ];
          }
        ];
        features = {
          "axum" = [ "dep:axum" ];
          "cuda" = [ "sp1-cuda" ];
          "default" = [ "network" ];
          "native-gnark" = [ "sp1-prover/native-gnark" ];
          "neon" = [ "sp1-core-machine/neon" ];
          "network" = [ "dep:alloy-sol-types" "dep:tokio" "dep:ethers" "dep:reqwest" "dep:twirp" "dep:reqwest-middleware" ];
          "sp1-cuda" = [ "dep:sp1-cuda" ];
        };
        resolvedDefaultFeatures = [ "default" "network" ];
      };
      "sp1-stark" = rec {
        crateName = "sp1-stark";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0s1w007s4dly6ll447kdz0kqwbjzc0was12wy7jryv3wx27jibmz";
        libName = "sp1_stark";
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "custom" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
            features = [ "nightly-features" ];
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-uni-stark";
            packageId = "p3-uni-stark";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rayon-scan";
            packageId = "rayon-scan";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "speedate" = rec {
        crateName = "speedate";
        version = "0.13.0";
        edition = "2021";
        sha256 = "16xi4d98ab3ag7rkba2fv37kk3d0fgg0l287hq4vz36i1z2pcbr4";
        authors = [
          "Samuel Colvin <s@muelcolvin.com>"
        ];
        dependencies = [
          {
            name = "strum";
            packageId = "strum 0.25.0";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
          }
        ];

      };
      "spin 0.5.2" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];

      };
      "spin 0.9.8" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "once" ];
      };
      "spki" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.7.10";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [ "base64ct?/alloc" "der/alloc" ];
          "arbitrary" = [ "std" "dep:arbitrary" "der/arbitrary" ];
          "base64" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [ "alloc" "der/pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "der/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "stacker" = rec {
        crateName = "stacker";
        version = "0.1.21";
        edition = "2021";
        sha256 = "0syhx9fiydyd901v464saqd6z8f31a6is24iv94hfxyv5pihgnyd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Simonas Kazlauskas <stacker@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "psm";
            packageId = "psm";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Memory" "Win32_System_Threading" "Win32_Foundation" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.8.9";
        edition = "2018";
        sha256 = "03z7km2kzlwiv2r2qifq5riv4g8phazwng9wnvs3py3lzainnxxz";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
        ];
        features = {
          "default" = [ "serde_support" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" ];
        };
      };
      "strsim 0.10.0" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "strsim 0.11.1" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum 0.25.0" = rec {
        crateName = "strum";
        version = "0.25.0";
        edition = "2018";
        sha256 = "09g1q55ms8vax1z0mxlbva3vm8n2r1179kfvbccnkjcidzm58399";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum 0.26.3" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum 0.27.1" = rec {
        crateName = "strum";
        version = "0.27.1";
        edition = "2021";
        sha256 = "0cic9r2sc2h17nnpjm2yfp7rsd35gkbcbqvrhl553jaiih4fykgn";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.27.1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "derive" "strum_macros" ];
      };
      "strum_macros 0.25.3" = rec {
        crateName = "strum_macros";
        version = "0.25.3";
        edition = "2018";
        sha256 = "184y62g474zqb2f7n16x3ghvlyjbh50viw32p9w9l5lwmjlizp13";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "strum_macros 0.26.4" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "strum_macros 0.27.1" = rec {
        crateName = "strum_macros";
        version = "0.27.1";
        edition = "2021";
        sha256 = "1s7x07nkrgjfvxrvcdjw6qanad4c55yjnd32bph9q3xgpid8qyn7";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" ];
          }
        ];

      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "subtle-encoding" = rec {
        crateName = "subtle-encoding";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0icrwnjs67xf4k02x3yq5rgcf4ksvm8jc1a1aknmw31kp3bixjvx";
        libName = "subtle_encoding";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "base64" = [ "zeroize" ];
          "bech32-preview" = [ "alloc" "zeroize" ];
          "default" = [ "base64" "hex" "std" ];
          "std" = [ "alloc" "zeroize" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "base64" "bech32-preview" "default" "hex" "std" "zeroize" ];
      };
      "subtle-ng" = rec {
        crateName = "subtle-ng";
        version = "2.5.0";
        edition = "2015";
        sha256 = "0hj1wp8xl64bjhbvlfffmllqy7wdw2b505f32gn3qqic4vmpcikk";
        libName = "subtle_ng";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "svm-rs" = rec {
        crateName = "svm-rs";
        version = "0.3.5";
        edition = "2021";
        crateBin = [];
        sha256 = "1957va9r01slgw9wvrdqn4gc09aydan8wi92ayfwk82zzsm7na8i";
        libName = "svm_lib";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "fs2";
            packageId = "fs2";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "zip";
            packageId = "zip";
            target = { target, features }: (("windows" == target."os" or null) && ("x86_64" == target."arch" or null));
          }
        ];
        buildDependencies = [
          {
            name = "dirs";
            packageId = "dirs";
          }
        ];
        features = {
          "anyhow" = [ "dep:anyhow" ];
          "blocking" = [ "reqwest/blocking" ];
          "clap" = [ "dep:clap" ];
          "cli" = [ "anyhow" "clap" "console" "dialoguer" "indicatif" "itertools" "tokio" ];
          "console" = [ "dep:console" ];
          "default" = [ "rustls" "cli" "solc" ];
          "dialoguer" = [ "dep:dialoguer" ];
          "indicatif" = [ "dep:indicatif" ];
          "itertools" = [ "dep:itertools" ];
          "openssl" = [ "reqwest/native-tls" ];
          "rustls" = [ "reqwest/rustls-tls" ];
          "solc" = [ "anyhow" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "blocking" "rustls" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.101" = rec {
        crateName = "syn";
        version = "2.0.101";
        edition = "2021";
        sha256 = "1brwsh7fn3bnbj50d2lpwy9akimzb3lghz0ai89j8fhvjkybgqlc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "syn-solidity 0.7.7" = rec {
        crateName = "syn-solidity";
        version = "0.7.7";
        edition = "2021";
        sha256 = "1sppxnpzp61qzd4pp1jq5jqxlh1ig20znjj4dgj78w6baa4dqdy8";
        libName = "syn_solidity";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "visit" "visit-mut" ];
      };
      "syn-solidity 0.8.25" = rec {
        crateName = "syn-solidity";
        version = "0.8.25";
        edition = "2021";
        sha256 = "04llmhmn2mrcf08bicwdcrak8740sqz81k5mix5bj539plzm6q25";
        libName = "syn_solidity";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "visit" "visit-mut" ];
      };
      "sync_wrapper 0.1.2" = rec {
        crateName = "sync_wrapper";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0q01lyj0gr9a93n10nxsn8lwbzq97jqd6b768x17c8f7v7gccir0";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "sync_wrapper 1.0.2" = rec {
        crateName = "sync_wrapper";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0qvjyasd6w18mjg5xlaq5jgy84jsjfsvmnn12c13gypxbv75dwhb";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "futures" "futures-core" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1lh9lx3r3jb18f8sbj29am5hm9jymvbwh6jb1izsnnxgvgrp12kj";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.30.13";
        edition = "2018";
        sha256 = "1csbkx1hdlacgzw5ynjyfvgc1xg58w3h1rgh5gm2pysmxvd4snqa";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("unknown" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "ntapi";
            packageId = "ntapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_NetManagement" "Win32_NetworkManagement_Ndis" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage_FileSystem" "Win32_System_Com" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_LibraryLoader" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI_Shell" ];
          }
        ];
        features = {
          "apple-app-store" = [ "apple-sandbox" ];
          "debug" = [ "libc/extra_traits" ];
          "default" = [ "multithread" ];
          "multithread" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "multithread" "rayon" ];
      };
      "system-configuration 0.5.1" = rec {
        crateName = "system-configuration";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1rz0r30xn7fiyqay2dvzfy56cvaa3km74hnbz2d72p97bkf3lfms";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys 0.5.0";
          }
        ];

      };
      "system-configuration 0.6.1" = rec {
        crateName = "system-configuration";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0sxslml567zm0v8g732314vd2gk9sd3k4xj22xk6p64xir29v1rw";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys 0.6.0";
          }
        ];

      };
      "system-configuration-sys 0.5.0" = rec {
        crateName = "system-configuration-sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1jckxvdr37bay3i9v52izgy52dg690x5xfg3hd394sv2xf4b2px7";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "system-configuration-sys 0.6.0" = rec {
        crateName = "system-configuration-sys";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1i5sqrmgy58l4704hibjbl36hclddglh73fb3wx95jnmrq81n7cf";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0sc3gl4nldqpvyhqi3bbd0l9k7fngrcl4zs47n314nqqk4bpx4sm";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.20.0";
        edition = "2021";
        sha256 = "18fnp7mjckd9c9ldlb2zhp1hd4467y2hpvx9l50j97rlhlwlx9p8";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix 1.0.7";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
          "default" = [ "getrandom" ];
          "getrandom" = [ "dep:getrandom" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" ];
      };
      "tendermint" = rec {
        crateName = "tendermint";
        version = "0.38.1";
        edition = "2021";
        sha256 = "15qy96l81k83ml890ac9d4jwcmpz5l6nwz1hgkj1sfxqzrprspah";
        authors = [
          "Informal Systems <hello@informal.systems>"
          "Ismail Khoffi <Ismail.Khoffi@gmail.com>"
          "ValarDragon <dojha12@gmail.com>"
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "ed25519-consensus";
            packageId = "ed25519-consensus";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256 0.13.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "ecdsa" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "ripemd";
            packageId = "ripemd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
            features = [ "bech32-preview" ];
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.38.1";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "macros" "parsing" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "k256";
            packageId = "k256 0.13.4";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
        ];
        features = {
          "clock" = [ "time/std" ];
          "default" = [ "std" "rust-crypto" ];
          "ed25519-consensus" = [ "dep:ed25519-consensus" ];
          "k256" = [ "dep:k256" ];
          "ripemd" = [ "dep:ripemd" ];
          "rust-crypto" = [ "sha2" "ed25519-consensus" ];
          "secp256k1" = [ "k256" "ripemd" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "flex-error/std" "clock" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "ed25519-consensus" "k256" "ripemd" "rust-crypto" "secp256k1" "sha2" "std" ];
      };
      "tendermint-config" = rec {
        crateName = "tendermint-config";
        version = "0.38.1";
        edition = "2021";
        sha256 = "0pvpz4f5mv3rybfslvi5bihslxrw8qmlbhkscbpxlaivcpm13qcx";
        libName = "tendermint_config";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tendermint";
            packageId = "tendermint";
            usesDefaultFeatures = false;
            features = [ "rust-crypto" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.22";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "secp256k1" = [ "tendermint/secp256k1" ];
        };
      };
      "tendermint-proto 0.33.2" = rec {
        crateName = "tendermint-proto";
        version = "0.33.2";
        edition = "2021";
        sha256 = "00igf27lwsqbq6a48vha55lyimwq9k3p42l0i8ihs8kpzpgmm7k3";
        libName = "tendermint_proto";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "num-derive";
            packageId = "num-derive 0.3.3";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.11.9";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.11.9";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
            features = [ "hex" "base64" "alloc" ];
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "macros" "parsing" ];
          }
        ];
        features = {
          "grpc" = [ "grpc-server" ];
          "grpc-server" = [ "tonic" ];
          "tonic" = [ "dep:tonic" ];
        };
      };
      "tendermint-proto 0.34.1" = rec {
        crateName = "tendermint-proto";
        version = "0.34.1";
        edition = "2021";
        sha256 = "07lslvars9y1icl3l62ap85xij4x4ggpnph65wfykbpa5cyxv5xp";
        libName = "tendermint_proto";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "num-derive";
            packageId = "num-derive 0.3.3";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.12.6";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
            features = [ "hex" "base64" "alloc" ];
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "macros" "parsing" ];
          }
        ];
        features = {
          "grpc" = [ "grpc-server" ];
          "grpc-server" = [ "tonic" ];
          "tonic" = [ "dep:tonic" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tendermint-proto 0.38.1" = rec {
        crateName = "tendermint-proto";
        version = "0.38.1";
        edition = "2021";
        sha256 = "0vhxndg49553k1pw50nr4v9yiiynrnjlr9qwwaps60h57fz4mlcf";
        libName = "tendermint_proto";
        authors = [
          "Informal Systems <hello@informal.systems>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
            features = [ "hex" "base64" "alloc" ];
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "macros" "parsing" ];
          }
        ];
        features = {
          "grpc" = [ "grpc-server" ];
          "grpc-server" = [ "tonic" ];
          "tonic" = [ "dep:tonic" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tendermint-rpc" = rec {
        crateName = "tendermint-rpc";
        version = "0.38.1";
        edition = "2021";
        crateBin = [];
        sha256 = "0qqgm55wq80a925d02a7mz3fz28mvimiljq2wichng8di8mnmy82";
        libName = "tendermint_rpc";
        authors = [
          "Informal Systems <hello@informal.systems>"
          "Ismail Khoffi <Ismail.Khoffi@gmail.com>"
          "Alexander Simmerl <a.simmerl@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "flex-error";
            packageId = "flex-error";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            features = [ "js" ];
          }
          {
            name = "peg";
            packageId = "peg";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rustls-tls-native-roots" ];
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle-encoding";
            packageId = "subtle-encoding";
            usesDefaultFeatures = false;
            features = [ "bech32-preview" ];
          }
          {
            name = "tendermint";
            packageId = "tendermint";
            usesDefaultFeatures = false;
          }
          {
            name = "tendermint-config";
            packageId = "tendermint-config";
            usesDefaultFeatures = false;
          }
          {
            name = "tendermint-proto";
            packageId = "tendermint-proto 0.38.1";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "macros" "parsing" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid 1.17.0";
            usesDefaultFeatures = false;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tendermint";
            packageId = "tendermint";
            usesDefaultFeatures = false;
            features = [ "secp256k1" ];
          }
        ];
        features = {
          "async-tungstenite" = [ "dep:async-tungstenite" ];
          "cli" = [ "http-client" "structopt" "tracing-subscriber" "websocket-client" ];
          "default" = [ "flex-error/std" "flex-error/eyre_tracer" ];
          "futures" = [ "dep:futures" ];
          "http-client" = [ "futures" "reqwest" "tokio/macros" "tracing" ];
          "reqwest" = [ "dep:reqwest" ];
          "secp256k1" = [ "tendermint/secp256k1" ];
          "structopt" = [ "dep:structopt" ];
          "tokio" = [ "dep:tokio" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-subscriber" = [ "dep:tracing-subscriber" ];
          "websocket-client" = [ "async-tungstenite" "futures" "tokio/rt-multi-thread" "tokio/fs" "tokio/macros" "tokio/sync" "tokio/time" "tracing" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "http-client" "reqwest" "tokio" "tracing" ];
      };
      "term" = rec {
        crateName = "term";
        version = "0.7.0";
        edition = "2018";
        sha256 = "07xzxmg7dbhlirpyfq09v7cfb9gxn0077sqqvszgjvyrjnngi7f5";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "dirs-next";
            packageId = "dirs-next";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "wincon" "handleapi" "fileapi" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.3.41";
        edition = "2021";
        sha256 = "0h0cpiyya8cjlrh00d2r72bmgg4lsdcncs76qpwy0rn2kghijxla";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (builtins.elem "unix" target."family");
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "num_threads";
            packageId = "num_threads";
            optional = true;
            target = { target, features }: (builtins.elem "unix" target."family");
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "formatting" "local-offset" "macros" "parsing" "serde" "serde-well-known" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0z5h9fknvdvbs2k2s1chpi3ab3jvgkfhdnqwrvixjngm263s7sf9";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.22";
        edition = "2021";
        sha256 = "0jcaxpw220han2bzbrdlpqhy1s5k9i8ri3lw6n5zv4zcja9p69im";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" "serde" ];
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        libName = "tiny_keccak";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = [ "keccak" "shake" "sha3" ];
          "kmac" = [ "cshake" ];
          "parallel_hash" = [ "cshake" ];
          "sp800" = [ "cshake" "kmac" "tuple_hash" ];
          "tuple_hash" = [ "cshake" ];
        };
        resolvedDefaultFeatures = [ "default" "keccak" "sha3" ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.8.1";
        edition = "2021";
        sha256 = "12sc6h3hnn6x78iycm5v6wrs2xhxph0ydm43yyn7gdfw8l8nsksx";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "zerovec" ];
      };
      "tinytemplate" = rec {
        crateName = "tinytemplate";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1g5n77cqkdh9hy75zdb01adxn45mkh9y40wdr7l68xpz35gnnkdy";
        authors = [
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "generic-array" = [ "dep:generic-array" ];
          "latest_stable_rust" = [ "rustc_1_61" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "grab_spare_slice" "std" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.45.1";
        edition = "2021";
        sha256 = "0yb7h0mr0m0gfwdl1jir2k37gcrwhcib2kiyx9f95npi7sim3vvm";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {target, features}: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "test-util" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-io-timeout" = rec {
        crateName = "tokio-io-timeout";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1gx84f92q1491vj4pkn81j8pz1s3pgwnbrsdhfsa2556mli41drh";
        libName = "tokio_io_timeout";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "tokio-native-tls" = rec {
        crateName = "tokio-native-tls";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1wkfg6zn85zckmv4im7mv20ca6b1vmlib5xwz9p7g19wjfmpdbmv";
        libName = "tokio_native_tls";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "io-util" "net" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "tokio-rustls 0.24.1" = rec {
        crateName = "tokio-rustls";
        version = "0.24.1";
        edition = "2018";
        sha256 = "10bhibg57mqir7xjhb2xmf24xgfpx6fzpyw720a4ih8a737jg0y2";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "dangerous_configuration" = [ "rustls/dangerous_configuration" ];
          "default" = [ "logging" "tls12" ];
          "logging" = [ "rustls/logging" ];
          "secret_extraction" = [ "rustls/secret_extraction" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "tls12" ];
      };
      "tokio-rustls 0.26.2" = rec {
        crateName = "tokio-rustls";
        version = "0.26.2";
        edition = "2021";
        sha256 = "16wf007q3584j46wc4s0zc4szj6280g23hka6x6bgs50l4v7nwlf";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "logging" "tls12" "aws_lc_rs" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "logging" "ring" "tls12" ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [ "time" "net" "io-util" "fs" "sync" "signal" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "net" "sync" "time" "tokio-util" ];
      };
      "tokio-tungstenite 0.20.1" = rec {
        crateName = "tokio-tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "0v1v24l27hxi5hlchs7hfd5rgzi167x0ygbw220nvq0w5b5msb91";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            optional = true;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite 0.20.1";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "connect" "handshake" "rustls" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "webpki-roots" ];
      };
      "tokio-tungstenite 0.24.0" = rec {
        crateName = "tokio-tungstenite";
        version = "0.24.0";
        edition = "2018";
        sha256 = "1nfw1i6yy120a14h1xagd4f31k3g1mz4rdxpvgh77jcd4i7ggigd";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite 0.24.0";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "url" = [ "tungstenite/url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "connect" "default" "handshake" "rustls" "rustls-pki-types" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "webpki-roots" ];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.15";
        edition = "2021";
        sha256 = "1pypd9lm1fdnpw0779pqvc16qqrxjy63dgfm20ajhpbdmnlkk9b6";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "io" ];
      };
      "toml 0.5.11" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml 0.8.22" = rec {
        crateName = "toml";
        version = "0.8.22";
        edition = "2021";
        sha256 = "1bjsrmi9w88v4sik8bd6chp0d7bnb9dzzmxyb5xd3i083yfk5bh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.26";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" "toml_edit?/display" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" "toml_edit?/parse" ];
          "preserve_order" = [ "indexmap" ];
          "unbounded" = [ "toml_edit?/unbounded" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.9";
        edition = "2021";
        sha256 = "18q9ix4isxw2n4mij3v6x0pb4jw1hbxbc5wbprlbq91yjrddp99x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.22.26" = rec {
        crateName = "toml_edit";
        version = "0.22.26";
        edition = "2021";
        sha256 = "0zhk135y6rn6jxik7knia3xblpc545fw6b4xcpkv7idj7n3nh01i";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "toml_write";
            packageId = "toml_write";
            optional = true;
          }
          {
            name = "winnow";
            packageId = "winnow 0.7.10";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "display" "parse" "serde" ];
      };
      "toml_write" = rec {
        crateName = "toml_write";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0xhhyipq7vivp8pfmjkhma4zn9cs5fyybggwwxz9mqnqw7gl5fdz";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "tonic 0.12.3" = rec {
        crateName = "tonic";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0ljd1lfjpw0vrm5wbv15x6nq2i38llsanls5rkzmdn2n0wrmnz47";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum 0.7.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "h2";
            packageId = "h2 0.4.10";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            optional = true;
            features = [ "http1" "http2" ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout 0.5.2";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.2.0";
            optional = true;
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "tls12" "ring" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [ "dep:hyper" "hyper?/client" "dep:hyper-util" "hyper-util?/client-legacy" "dep:tower" "tower?/balance" "tower?/buffer" "tower?/discover" "tower?/limit" "tower?/util" "dep:tokio" "tokio?/time" "dep:hyper-timeout" ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [ "transport" "codegen" "prost" ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "router" = [ "dep:axum" "dep:tower" "tower?/util" ];
          "server" = [ "router" "dep:async-stream" "dep:h2" "dep:hyper" "hyper?/server" "dep:hyper-util" "hyper-util?/service" "hyper-util?/server-auto" "dep:socket2" "dep:tokio" "tokio?/macros" "tokio?/net" "tokio?/time" "tokio-stream/net" "dep:tower" "tower?/util" "tower?/limit" ];
          "tls" = [ "dep:rustls-pemfile" "dep:tokio-rustls" "dep:tokio" "tokio?/rt" "tokio?/macros" ];
          "tls-native-roots" = [ "tls" "channel" "dep:rustls-native-certs" ];
          "tls-roots" = [ "tls-native-roots" ];
          "tls-webpki-roots" = [ "tls" "channel" "dep:webpki-roots" ];
          "transport" = [ "server" "channel" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "channel" "codegen" "prost" "router" "server" "tls" "tls-webpki-roots" "transport" ];
      };
      "tonic 0.9.2" = rec {
        crateName = "tonic";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0nlx35lvah5hdcp6lg1d6dlprq0zz8ijj6f727szfcv479m6d0ih";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum 0.6.20";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout 0.4.1";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost 0.11.9";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "net" "time" "macros" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "balance" "buffer" "discover" "limit" "load" "make" "timeout" "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [ "dep:h2" "dep:hyper" "dep:tokio" "dep:tower" "dep:hyper-timeout" ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [ "transport" "codegen" "prost" ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "tls" = [ "dep:rustls-pemfile" "transport" "dep:tokio-rustls" "dep:async-stream" ];
          "tls-roots" = [ "tls-roots-common" "dep:rustls-native-certs" ];
          "tls-roots-common" = [ "tls" ];
          "tls-webpki-roots" = [ "tls-roots-common" "dep:webpki-roots" ];
          "transport" = [ "dep:axum" "channel" ];
        };
        resolvedDefaultFeatures = [ "channel" "codegen" "prost" "transport" ];
      };
      "tonic-build" = rec {
        crateName = "tonic-build";
        version = "0.12.3";
        edition = "2021";
        sha256 = "04baqblgrlc0g8scnhpky5s0n4cljaixrrdrr6cv6wx7kq8cwmwm";
        libName = "tonic_build";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "prost-build";
            packageId = "prost-build 0.13.5";
            optional = true;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
            optional = true;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "cleanup-markdown" = [ "prost" "prost-build/cleanup-markdown" ];
          "default" = [ "transport" "prost" ];
          "prost" = [ "prost-build" "dep:prost-types" ];
          "prost-build" = [ "dep:prost-build" ];
        };
        resolvedDefaultFeatures = [ "prost" "prost-build" "transport" ];
      };
      "tower 0.4.13" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "rand" "slab" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "__common" "balance" "buffer" "discover" "futures-core" "futures-util" "indexmap" "limit" "load" "make" "pin-project" "pin-project-lite" "rand" "ready-cache" "slab" "timeout" "tokio" "tokio-util" "tracing" "util" ];
      };
      "tower 0.5.2" = rec {
        crateName = "tower";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ybmd59nm4abl9bsvy6rx31m4zvzp5rja2slzpn712y9b68ssffh";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.2";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "slab" "util" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" "util" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "sync_wrapper" = [ "dep:sync_wrapper" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project-lite" "sync_wrapper" ];
        };
        resolvedDefaultFeatures = [ "__common" "futures-core" "futures-util" "log" "make" "pin-project-lite" "sync_wrapper" "timeout" "tokio" "tracing" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.6.6";
        edition = "2018";
        sha256 = "1wh51y4rf03f91c6rvli6nwzsarx7097yx6sqlm75ag27pbjzj5d";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            optional = true;
          }
          {
            name = "iri-string";
            packageId = "iri-string";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "buffer" "util" "retry" "make" "timeout" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" "validate-request" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" "dep:http-body" "dep:http-body-util" ];
          "compression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" "compression-zstd" ];
          "compression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd" ];
          "decompression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "follow-redirect" = [ "futures-util" "dep:http-body" "iri-string" "tower/util" ];
          "fs" = [ "futures-core" "futures-util" "dep:http-body" "dep:http-body-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "limit" = [ "dep:http-body" "dep:http-body-util" ];
          "metrics" = [ "dep:http-body" "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "dep:http-body" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "dep:http-body" "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "follow-redirect" "futures-util" "iri-string" "tower" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "log" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.28";
        edition = "2018";
        sha256 = "0v92l9cxs42rdm4m5hsa8z7ln1xsiw1zc2iil8c6k7lzq0jf2nir";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.33";
        edition = "2018";
        sha256 = "170gc7cxyjx824r9kr17zc9gvzx89ypqfdzq259pr56gg5bwjwp6";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable?/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" ];
      };
      "tracing-forest" = rec {
        crateName = "tracing-forest";
        version = "0.1.6";
        edition = "2018";
        sha256 = "0bsr88f4shanjr86ajrx9p8dmsfxxmr24a8llhxixpadn5fq6h7f";
        libName = "tracing_forest";
        authors = [
          "Quinn Okabayashi"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "write" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        features = {
          "ansi" = [ "ansi_term" ];
          "ansi_term" = [ "dep:ansi_term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" ];
          "env-filter" = [ "tracing-subscriber/env-filter" ];
          "full" = [ "uuid" "chrono" "smallvec" "tokio" "serde" "env-filter" "ansi" ];
          "serde" = [ "dep:serde" ];
          "smallvec" = [ "dep:smallvec" ];
          "tokio" = [ "dep:tokio" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "ansi" "ansi_term" "default" "smallvec" ];
      };
      "tracing-futures" = rec {
        crateName = "tracing-futures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1wimg0iwa2ldq7xv98lvivvf3q9ykfminig8r1bs0ig22np9bl4p";
        libName = "tracing_futures";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std-future" "std" ];
          "futures" = [ "dep:futures" ];
          "futures-01" = [ "futures_01" "std" ];
          "futures-03" = [ "std-future" "futures" "futures-task" "std" ];
          "futures-task" = [ "dep:futures-task" ];
          "futures_01" = [ "dep:futures_01" ];
          "pin-project" = [ "dep:pin-project" ];
          "std" = [ "tracing/std" ];
          "std-future" = [ "pin-project" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-executor" = [ "dep:tokio-executor" ];
        };
        resolvedDefaultFeatures = [ "default" "pin-project" "std" "std-future" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.19";
        edition = "2018";
        sha256 = "0220rignck8072i89jjsh140vmh14ydwpdwnifyaf3xcnpn9s678";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "tungstenite 0.20.1" = rec {
        crateName = "tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "1fbgcv3h4h1bhhf5sqbwqsp7jnc44bi4m41sgmhzdsk2zl8aqgcy";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" "url" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "sha1" "url" ];
      };
      "tungstenite 0.24.0" = rec {
        crateName = "tungstenite";
        version = "0.24.0";
        edition = "2018";
        sha256 = "12nsxnxazk4nisgsqpywi6za0hsbc2rd15r1scb5pag7dqvbir8q";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "rustls-pki-types" "sha1" ];
      };
      "twirp-rs" = rec {
        crateName = "twirp-rs";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1kmqfkygpr7in1sxaw0q530hqhqs70al4bvn9snvq2pfiqfid8yz";
        libName = "twirp_rs";
        authors = [
          "The blackbird team <support@github.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum 0.7.9";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            usesDefaultFeatures = false;
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
        };
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
        resolvedDefaultFeatures = [ "const-generics" ];
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.7";
        edition = "2021";
        sha256 = "0wc9p07sqwz320848i52nvyjvpsxkx3kv5bfbmm6s35809fdk5i8";
        libName = "ucd_trie";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "uint" = rec {
        crateName = "uint";
        version = "0.9.5";
        edition = "2021";
        sha256 = "0ljb2q0waadsr56w6j5wwchwibby8bbsf09wnv54zc2k5jx4pxkn";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "std" = [ "byteorder/std" "crunchy/std" "hex/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "unarray" = rec {
        crateName = "unarray";
        version = "0.1.4";
        edition = "2018";
        sha256 = "154smf048k84prsdgh09nkm2n0w0336v84jd4zikyn6v6jrqbspa";

      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1zd0r5vs52ifxn25rs06gxrgz8cmh4xpra922k0xlmrchib1kj0z";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "untrusted 0.7.1" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "untrusted 0.9.0" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = [ "alloc" "compiled_data" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "idna/std" "percent-encoding/std" "form_urlencoded/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "uuid 0.8.2" = rec {
        crateName = "uuid";
        version = "0.8.2";
        edition = "2018";
        sha256 = "1dy4ldcp7rnzjy56dxh7d2sgrcvn4q77y0a8r0a48946h66zjp5w";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Christopher Armstrong"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "guid" = [ "winapi" ];
          "md5" = [ "dep:md5" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1" ];
          "slog" = [ "dep:slog" ];
          "stdweb" = [ "getrandom" "getrandom/js" ];
          "v3" = [ "md5" ];
          "v4" = [ "getrandom" ];
          "v5" = [ "sha1" ];
          "wasm-bindgen" = [ "getrandom" "getrandom/js" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "serde" "std" "v4" ];
      };
      "uuid 1.17.0" = rec {
        crateName = "uuid";
        version = "1.17.0";
        edition = "2018";
        sha256 = "07ckq4fdiygy02gmislzfp727hx9zw6lskk9dbcds5ax3sfikx1w";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            target = { target, features }: (!(("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null))));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
            features = [ "msrv" ];
          }
        ];
        devDependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {target, features}: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "atomic" = [ "dep:atomic" ];
          "borsh" = [ "dep:borsh" "dep:borsh-derive" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "fast-rng" = [ "rng" "dep:rand" ];
          "js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
          "macro-diagnostics" = [ "dep:uuid-macro-internal" ];
          "md5" = [ "dep:md-5" ];
          "rng" = [ "dep:getrandom" ];
          "rng-getrandom" = [ "rng" "dep:getrandom" "uuid-rng-internal-lib" "uuid-rng-internal-lib/getrandom" ];
          "rng-rand" = [ "rng" "dep:rand" "uuid-rng-internal-lib" "uuid-rng-internal-lib/rand" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1_smol" ];
          "slog" = [ "dep:slog" ];
          "std" = [ "wasm-bindgen?/std" "js-sys?/std" ];
          "uuid-rng-internal-lib" = [ "dep:uuid-rng-internal-lib" ];
          "v1" = [ "atomic" ];
          "v3" = [ "md5" ];
          "v4" = [ "rng" ];
          "v5" = [ "sha1" ];
          "v6" = [ "atomic" ];
          "v7" = [ "rng" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [ "default" "rng" "serde" "std" "v4" ];
      };
      "valence-coprocessor" = rec {
        crateName = "valence-coprocessor";
        version = "0.1.13";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-coprocessor.git";
          rev = "ca34a85e2215a4a04d8d6d70f533eb7be4c91a8a";
          sha256 = "1hhc43d8l2l8vc6sjih06l1a4zqhyhpllpgvi9vg2hsh4awnc48v";
        };
        libName = "valence_coprocessor";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "blake3";
            packageId = "blake3";
            usesDefaultFeatures = false;
          }
          {
            name = "buf-fs";
            packageId = "buf-fs";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            optional = true;
            features = [ "blocking" "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "reqwest" = [ "dep:reqwest" ];
          "std" = [ "base64/std" "blake3/std" "serde/std" "reqwest" ];
        };
        resolvedDefaultFeatures = [ "reqwest" "std" ];
      };
      "valence-coprocessor-client" = rec {
        crateName = "valence-coprocessor-client";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_coprocessor_client";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.19";
            features = [ "blocking" "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "valence-core" = rec {
        crateName = "valence-core";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_core";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "cosmos-sdk-proto";
            packageId = "cosmos-sdk-proto 0.23.0";
            usesDefaultFeatures = false;
            features = [ "grpc-transport" "cosmwasm" "grpc" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "valence-proto";
            packageId = "valence-proto";
          }
        ];

      };
      "valence-cosmos" = rec {
        crateName = "valence-cosmos";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_cosmos";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "alloy";
            packageId = "alloy";
            features = [ "full" "signers" "sol-types" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "bip32";
            packageId = "bip32";
            usesDefaultFeatures = false;
            features = [ "bip39" "secp256k1" ];
          }
          {
            name = "borsh";
            packageId = "borsh";
            features = [ "std" "rc" ];
          }
          {
            name = "borsh-derive";
            packageId = "borsh-derive";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "cosmos-sdk-proto";
            packageId = "cosmos-sdk-proto 0.23.0";
            usesDefaultFeatures = false;
            features = [ "grpc-transport" "cosmwasm" "grpc" ];
          }
          {
            name = "cosmrs";
            packageId = "cosmrs";
            usesDefaultFeatures = false;
            features = [ "cosmwasm" "rpc" "grpc" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "ibc-proto";
            packageId = "ibc-proto";
            usesDefaultFeatures = false;
            features = [ "client" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "neutron-std";
            packageId = "neutron-std";
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tonic";
            packageId = "tonic 0.12.3";
            usesDefaultFeatures = false;
            features = [ "transport" "codegen" "tls-webpki-roots" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "valence-core";
            packageId = "valence-core";
          }
          {
            name = "valence-proto";
            packageId = "valence-proto";
          }
        ];
        features = {
          "default" = [ "babylon" "noble" "gaia" "neutron" "osmosis" ];
        };
        resolvedDefaultFeatures = [ "babylon" "default" "gaia" "neutron" "noble" "osmosis" ];
      };
      "valence-domain-clients" = rec {
        crateName = "valence-domain-clients";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_domain_clients";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "valence-core";
            packageId = "valence-core";
          }
          {
            name = "valence-cosmos";
            packageId = "valence-cosmos";
          }
          {
            name = "valence-evm";
            packageId = "valence-evm";
          }
          {
            name = "valence-proto";
            packageId = "valence-proto";
          }
        ];
        buildDependencies = [
          {
            name = "tonic-build";
            packageId = "tonic-build";
            usesDefaultFeatures = false;
            features = [ "prost" "transport" ];
          }
        ];
        features = {
          "babylon" = [ "valence-cosmos/babylon" ];
          "base" = [ "valence-evm/base" ];
          "coprocessor" = [ "valence-coprocessor-client" ];
          "default" = [ "ethereum" "base" "babylon" "gaia" "neutron" "osmosis" "noble" "coprocessor" ];
          "ethereum" = [ "valence-evm/ethereum" ];
          "gaia" = [ "valence-cosmos/gaia" ];
          "neutron" = [ "valence-cosmos/neutron" ];
          "noble" = [ "valence-cosmos/noble" ];
          "osmosis" = [ "valence-cosmos/osmosis" ];
          "valence-coprocessor-client" = [ "dep:valence-coprocessor-client" ];
        };
        resolvedDefaultFeatures = [ "ethereum" "neutron" ];
      };
      "valence-evm" = rec {
        crateName = "valence-evm";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_evm";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "alloy";
            packageId = "alloy";
            features = [ "full" "signers" "sol-types" ];
          }
          {
            name = "alloy-contract";
            packageId = "alloy-contract";
          }
          {
            name = "alloy-node-bindings";
            packageId = "alloy-node-bindings";
          }
          {
            name = "alloy-signer";
            packageId = "alloy-signer";
          }
          {
            name = "alloy-signer-local";
            packageId = "alloy-signer-local";
            rename = "alloy_signer_local";
            features = [ "mnemonic" "keystore" ];
          }
          {
            name = "alloy-transport-http";
            packageId = "alloy-transport-http";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "ethers";
            packageId = "ethers";
            optional = true;
            features = [ "eip712" "legacy" ];
          }
          {
            name = "funty";
            packageId = "funty";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "valence-core";
            packageId = "valence-core";
          }
          {
            name = "valence-proto";
            packageId = "valence-proto";
          }
        ];
        features = {
          "_ethers_backend" = [ "dep:ethers" ];
          "default" = [ "ethereum" "base" "_ethers_backend" ];
        };
        resolvedDefaultFeatures = [ "_ethers_backend" "base" "default" "ethereum" ];
      };
      "valence-proto" = rec {
        crateName = "valence-proto";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/timewave-computer/valence-domain-clients";
          rev = "d26460ceb0f95599300b1521131ef4b078638310";
          sha256 = "1jldrmj7nl0dqxcg0yhzrcgvk2ggj7f0q5nws0pf61cvyqpbj4pz";
        };
        libName = "valence_proto";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.13.5";
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.13.5";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.13.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tonic";
            packageId = "tonic 0.12.3";
            usesDefaultFeatures = false;
            features = [ "transport" "codegen" "tls-webpki-roots" ];
          }
        ];
        buildDependencies = [
          {
            name = "tonic-build";
            packageId = "tonic-build";
            usesDefaultFeatures = false;
            features = [ "prost" "transport" ];
          }
        ];

      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0r9srp55v7g27s5bg7a2m095fzckrcdca5maih6dy9bay6fflwxs";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "vergen" = rec {
        crateName = "vergen";
        version = "8.3.2";
        edition = "2021";
        sha256 = "0ri5n4k1g4z6gnllkjx9zny3vaa2bjma84zlrjh6w9k7b7mdk419";
        authors = [
          "Jason Ozias <jason.g.ozias@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
            optional = true;
          }
          {
            name = "git2";
            packageId = "git2";
            rename = "git2-rs";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "formatting" "local-offset" "parsing" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "build" = [ "time" ];
          "cargo" = [ "cargo_metadata" "regex" ];
          "cargo_metadata" = [ "dep:cargo_metadata" ];
          "cfg-if" = [ "dep:cfg-if" ];
          "git" = [ "cfg-if" ];
          "git2" = [ "time" "git2-rs" ];
          "git2-rs" = [ "dep:git2-rs" ];
          "gitcl" = [ "time" ];
          "gitoxide" = [ "time" "gix" ];
          "gix" = [ "dep:gix" ];
          "regex" = [ "dep:regex" ];
          "rustc" = [ "rustc_version" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "si" = [ "sysinfo" ];
          "sysinfo" = [ "dep:sysinfo" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "build" "cfg-if" "git" "git2" "git2-rs" "time" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "wait-timeout" = rec {
        crateName = "wait-timeout";
        version = "0.2.1";
        edition = "2015";
        crateBin = [];
        sha256 = "04azqv9mnfxgvnc8j2wp362xraybakh2dy1nj22gj51rdl93pb09";
        libName = "wait_timeout";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.14.2+wasi-0.2.4" = rec {
        crateName = "wasi";
        version = "0.14.2+wasi-0.2.4";
        edition = "2021";
        sha256 = "1cwcqjr3dgdq8j325awgk8a715h0hg0f7jqzsb077n4qm6jzk0wn";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen-rt";
            packageId = "wit-bindgen-rt";
            features = [ "bitflags" ];
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1x8ymcm6yi3i1rwj78myl1agqv2m86i648myy3lc97s9swlqkp0y";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "std" "msrv" ];
          "enable-interning" = [ "std" ];
          "msrv" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "msrv" "rustversion" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1ihbf1hq3y81c4md9lyh6lcwbx6a5j0fw4fygd423g62lm8hc2ig";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.50";
        edition = "2021";
        sha256 = "0q8ymi6i9r3vxly551dhxcyai7nc491mspj0j1wbafxwq074fpam";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" "web-sys/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.100";
        edition = "2021";
        sha256 = "01xls2dvzh38yj17jgrbiib1d3nyad7k2yw9s0mpklwys333zrkz";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1plm8dh20jg2id0320pbmrlsv6cazfv6b6907z19ys4z1jj7xs4a";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "visit" "visit-mut" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.100";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "0gffxvqgbh9r9xl36gprkfnh3w9gl8wgia6xrin7v11sjcxxf18s";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];

      };
      "wasm-streams" = rec {
        crateName = "wasm-streams";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0rddn007hp6k2cm91mm9y33n79b0jxv0c3znzszcvv67hn6ks18m";
        libName = "wasm_streams";type = [ "cdylib" "rlib" ];
        authors = [
          "Mattias Buelens <mattias@buelens.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" "sink" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "AbortSignal" "QueuingStrategy" "ReadableStream" "ReadableStreamType" "ReadableWritablePair" "ReadableStreamByobReader" "ReadableStreamReaderMode" "ReadableStreamReadResult" "ReadableStreamByobRequest" "ReadableStreamDefaultReader" "ReadableByteStreamController" "ReadableStreamGetReaderOptions" "ReadableStreamDefaultController" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" ];
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "console" "AbortSignal" "ErrorEvent" "PromiseRejectionEvent" "Response" "ReadableStream" "Window" ];
          }
        ];

      };
      "wasmtimer" = rec {
        crateName = "wasmtimer";
        version = "0.4.1";
        edition = "2021";
        sha256 = "08qvmjgjcq53k746i251nyyfzw2qb3ya27w4acwyp7avlm4ssj00";type = [ "cdylib" "rlib" ];
        authors = [
          "WhizSid <whizsid@aol.com>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "default" = [ "tokio" "tokio-util" ];
          "futures" = [ "dep:futures" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "serde" = [ "serde_crate" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "slab" = [ "dep:slab" ];
          "tokio" = [ "futures" "parking_lot" "pin-utils" ];
          "tokio-test-util" = [ "tokio" ];
          "tokio-util" = [ "slab" "tokio" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "parking_lot" "pin-utils" "slab" "tokio" "tokio-util" ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "1lnmc1ffbq34qw91nndklqqm75rasaffj2g4f8h1yvqqz4pdvdik";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyFrameRequestEvent" = [ "Event" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MathMlElement" = [ "Element" "EventTarget" "Node" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcRtpScriptTransformer" = [ "EventTarget" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcTransformEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "SFrameTransform" = [ "EventTarget" ];
          "SFrameTransformErrorEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "BinaryType" "Blob" "BlobPropertyBag" "CanvasRenderingContext2d" "CloseEvent" "Crypto" "Document" "DomException" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "File" "FormData" "Headers" "HtmlCanvasElement" "HtmlElement" "MessageEvent" "Node" "QueuingStrategy" "ReadableByteStreamController" "ReadableStream" "ReadableStreamByobReader" "ReadableStreamByobRequest" "ReadableStreamDefaultController" "ReadableStreamDefaultReader" "ReadableStreamGetReaderOptions" "ReadableStreamReadResult" "ReadableStreamReaderMode" "ReadableStreamType" "ReadableWritablePair" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WebSocket" "Window" "Worker" "WorkerGlobalScope" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" "console" "default" "std" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "webpki-roots 0.25.4" = rec {
        crateName = "webpki-roots";
        version = "0.25.4";
        edition = "2018";
        sha256 = "1qgqa615gc1cgklls4bkjp9jv9pvv3jnl82lc6wd7dkximywa82z";
        libName = "webpki_roots";

      };
      "webpki-roots 0.26.11" = rec {
        crateName = "webpki-roots";
        version = "0.26.11";
        edition = "2021";
        sha256 = "1agpayg5zzf7m1a01q30jahlgmn5nwggbabdhq0in008pf5c66sj";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.0";
            rename = "parent";
          }
        ];

      };
      "webpki-roots 1.0.0" = rec {
        crateName = "webpki-roots";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1nyg365shpxkbazrsvh9c4cv7ar16xnfq62w48xdmwn43j6p6lr8";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "which" = rec {
        crateName = "which";
        version = "4.4.2";
        edition = "2021";
        sha256 = "1ixzmx3svsv5hbdvd8vdhd3qwvf6ns8jdpif1wmwsy10k90j9fl7";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "home";
            packageId = "home";
            target = { target, features }: ((target."windows" or false) || (target."unix" or false) || ("redox" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.44";
            usesDefaultFeatures = false;
            features = [ "fs" "std" ];
          }
        ];
        features = {
          "regex" = [ "dep:regex" ];
        };
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0zg04qvpk2xysbbwhdgyilgn4p9igvyj9fhzl7pckam1khvz6z6x";
        features = {
          "debugger_visualizer" = [ "alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "cfg" "consoleapi" "errhandlingapi" "evntrace" "fileapi" "handleapi" "in6addr" "inaddr" "knownfolders" "minwinbase" "ntsecapi" "objbase" "processenv" "processthreadsapi" "shlobj" "std" "winbase" "wincon" "windef" "winerror" "winioctl" "wtypesbase" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows" = rec {
        crateName = "windows";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1gnh210qjlprpd1szaq04rjm1zqgdm9j7l9absg0kawi2rwm72p4";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" "windows-core/implement" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_System" "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_NetworkManagement_NetManagement" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_Kernel" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-core 0.52.0" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.61.2" = rec {
        crateName = "windows-core";
        version = "0.61.2";
        edition = "2021";
        sha256 = "1qsa3iw14wk4ngfl7ipcvdf9xyq456ms7cx2i9iwf406p7fx7zf0";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "windows-result/std" "windows-strings/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.60.0";
        edition = "2021";
        sha256 = "0dm88k3hlaax85xkls4gf597ar4z8m5vzjjagzk910ph7b8xszx4";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.59.1";
        edition = "2021";
        sha256 = "1a4zr8740gyzzhq02xgl6vx8l669jwfby57xgf0zmkcdkyv134mx";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-link" = rec {
        crateName = "windows-link";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0f2cq7imbrppsmmnz8899hfhg07cp5gq6rh0bjhb1qb6nwshk13n";
        libName = "windows_link";
        authors = [
          "Microsoft"
        ];

      };
      "windows-registry" = rec {
        crateName = "windows-registry";
        version = "0.5.2";
        edition = "2021";
        sha256 = "0848hyj0irwljppy5j9lkphrx9m8isx8m6xr1cja20ykpn9v1fmk";
        libName = "windows_registry";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "windows-result/std" "windows-strings/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-result" = rec {
        crateName = "windows-result";
        version = "0.3.4";
        edition = "2021";
        sha256 = "1il60l6idrc6hqsij0cal0mgva6n3w6gq4ziban8wv6c6b9jpx2n";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0mrv3plibkla4v5kaakc2rfksdd0b14plcmidhbkcfqc78zwkrjn";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Globalization" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Registry" "Win32_System_Time" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Shell" "default" ];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.53.0" = rec {
        crateName = "windows-targets";
        version = "0.53.0";
        edition = "2021";
        sha256 = "12yakpjizhfpppz1i3zgcwxlbar8axrp9j87fmywpydarvlcgr5i";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.53.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.53.0";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.53.0";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.53.0" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0r77pbpbcf8bq4yfwpz2hpq3vns8m0yacpvs2i5cn6fx1pwxbf46";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.53.0" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0v766yqw51pzxxwp203yqy39ijgjamp54hhdbsyqq6x1c8gilrf7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.53.0" = rec {
        crateName = "windows_i686_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1hvjc8nv95sx5vdd79fivn8bpm7i517dqyf4yvsqgwrmkmjngp61";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.52.6" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.53.0" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "04df1in2k91qyf1wzizvh560bvyzq20yf68k8xa66vdzxnywrrlw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.53.0" = rec {
        crateName = "windows_i686_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0pcvb25fkvqnp91z25qr5x61wyya12lx8p7nsa137cbb82ayw7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.53.0" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1flh84xkssn1n6m1riddipydcksp2pdl45vdf70jygx3ksnbam9f";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.53.0" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0mvc8119xpbi3q2m6mrjcdzl6afx4wffacp13v76g4jrs1fh6vha";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.53.0" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "11h4i28hq0zlnjcaqi2xdxr7ibnpa8djfggch9rki1zzb8qi8517";
        authors = [
          "Microsoft"
        ];

      };
      "winnow 0.5.40" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winnow 0.7.10" = rec {
        crateName = "winnow";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1v69byry8fyarzl83wij6f1h3zxnw69assp9kdfb10cdfk42hsf0";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.50.0";
        edition = "2018";
        sha256 = "1cddmp929k882mdh6i9f2as848f13qqna6czwsqzkh1pqnr5fkjj";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            features = [ "Win32_Foundation" "Win32_System_Time" "Win32_System_Registry" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "serde" = [ "dep:serde" ];
          "serialization-serde" = [ "transactions" "serde" ];
        };
      };
      "wit-bindgen-rt" = rec {
        crateName = "wit-bindgen-rt";
        version = "0.39.0";
        edition = "2021";
        sha256 = "1hd65pa5hp0nl664m94bg554h4zlhrzmkjsf6lsgsb7yc4734hkg";
        libName = "wit_bindgen_rt";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            optional = true;
          }
        ];
        features = {
          "async" = [ "dep:futures" "dep:once_cell" ];
          "bitflags" = [ "dep:bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1fx29zncvbrqzgz7li88vzdm8zvgwgwy2r9bnjqxya09pfwi0bza";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = [ "dep:either" ];
        };
      };
      "ws_stream_wasm" = rec {
        crateName = "ws_stream_wasm";
        version = "0.7.4";
        edition = "2018";
        sha256 = "1x9p0zjmk89z0nnpc1qrzm7yfwaz8yj5fqmn4s3q3qvz47sgb6br";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = [ "map_pharos" ];
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pharos";
            packageId = "pharos";
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper 0.6.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "BinaryType" "Blob" "console" "MessageEvent" "WebSocket" "CloseEvent" "DomException" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version 0.4.1";
          }
        ];
        devDependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = [ "tokio_io" ];
          }
        ];
        features = {
          "tokio_io" = [ "async_io_stream/tokio_io" ];
        };
      };
      "wyz" = rec {
        crateName = "wyz";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1vdrfy7i2bznnzjdl9vvrzljvs4s3qm8bnlgqwln6a941gy61wq5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "tap";
            packageId = "tap";
          }
        ];
        features = {
          "default" = [ "std" ];
          "garbage" = [ "once_cell" "typemap" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
          "typemap" = [ "dep:typemap" ];
        };
      };
      "yansi" = rec {
        crateName = "yansi";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1v4qljgzh73knr7291cgwrf56zrvhmpn837n5n5pypzq1kciq109";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1k4mfr48vgi7wh066y11b7v1ilakghlnlhw9snzz8vi2p00vnhaz";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc" ];
          "default" = [ "alloc" "zerofrom" ];
          "derive" = [ "dep:yoke-derive" "zerofrom/derive" ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "zerofrom" ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dha5jrjz9jaq8kmxq1aag86b98zbnm9lyjrihy5sv716sbkrniq";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1jx07cd3b3456c9al9zjqqdzpf1abb0vf6z0fj8xnb93hfajsw51";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "simd" "zerocopy-derive" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1vsmpq0hp61xpqj9yk8b5jihkqkff05q1wv3l2568mhifl6y59i8";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.6";
        edition = "2021";
        sha256 = "19dyky67zkjichsb7ykhv0aqws3q0jfvzww76l66c19y6gh45k2h";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.6";
        edition = "2021";
        sha256 = "00l5niw7c1b0lf1vhvajpjmcnbdp2vn96jg4nmkhq2db0rp5s7np";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.2.2";
        edition = "2021";
        sha256 = "15gmka7vw5k0d24s0vxgymr2j6zn2iwl12wpmpnpjgsqg3abpw1n";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "zerovec?/databake" ];
          "litemap" = [ "dep:litemap" "alloc" ];
          "serde" = [ "dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde" ];
          "yoke" = [ "dep:yoke" ];
          "zerofrom" = [ "dep:zerofrom" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "yoke" "zerofrom" ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0a2457fmz39k9vrrj3rm82q5ykdhgxgbwfz2r6fa6nq11q4fn1aa";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:twox-hash" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "yoke" ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.11.1";
        edition = "2021";
        sha256 = "13zms8hj7vzpfswypwggyfr4ckmyc7v3di49pmj8r1qcz9z275jv";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "zip" = rec {
        crateName = "zip";
        version = "0.6.6";
        edition = "2021";
        sha256 = "0qcjbqfvbwxi5g9wbymf2r05cvziic2qqj4xy64q3hp48vi980vn";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "Marli Frost <marli@frost.red>"
          "Ryan Levick <ryan.levick@gmail.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bzip2";
            packageId = "bzip2";
            optional = true;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.1.5";
            optional = true;
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            target = { target, features }: ((("arm" == target."arch" or null) && ("32" == target."pointer_width" or null)) || ("mips" == target."arch" or null) || ("powerpc" == target."arch" or null));
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            optional = true;
            features = [ "reset" ];
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "zstd";
            packageId = "zstd";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" "macros" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "aes-crypto" = [ "aes" "constant_time_eq" "hmac" "pbkdf2" "sha1" ];
          "bzip2" = [ "dep:bzip2" ];
          "constant_time_eq" = [ "dep:constant_time_eq" ];
          "default" = [ "aes-crypto" "bzip2" "deflate" "time" "zstd" ];
          "deflate" = [ "flate2/rust_backend" ];
          "deflate-miniz" = [ "flate2/default" ];
          "deflate-zlib" = [ "flate2/zlib" ];
          "flate2" = [ "dep:flate2" ];
          "hmac" = [ "dep:hmac" ];
          "pbkdf2" = [ "dep:pbkdf2" ];
          "sha1" = [ "dep:sha1" ];
          "time" = [ "dep:time" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "aes" "aes-crypto" "bzip2" "constant_time_eq" "default" "deflate" "flate2" "hmac" "pbkdf2" "sha1" "time" "zstd" ];
      };
      "zkhash" = rec {
        crateName = "zkhash";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1ix1dlkyks7yyrqmgfzs9kmkywm256zlrp8w800jg4m63l4d2lj3";
        authors = [
          "Markus Schofnegger <mschofnegger@horizenlabs.io>"
          "Roman Walch <roman.walch@iaik.tugraz.at>"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec";
          }
          {
            name = "blake2";
            packageId = "blake2";
          }
          {
            name = "bls12_381";
            packageId = "bls12_381";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            rename = "group_ped";
            features = [ "wnaf-memuse" ];
          }
          {
            name = "group";
            packageId = "group 0.13.0";
          }
          {
            name = "halo2";
            packageId = "halo2";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "jubjub";
            packageId = "jubjub";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves 0.5.1";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "random";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
        ];
        features = {
          "asm" = [ "sha2/asm" "blake2/simd_asm" "ark-ff/asm" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "zstd" = rec {
        crateName = "zstd";
        version = "0.11.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1r7xlmgnifhxbfyid8vkcnd5ip16gx9hf89d1l0lzrpc4q1rdk10";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "default" "legacy" "zdict_builder" ];
      };
      "zstd-safe" = rec {
        crateName = "zstd-safe";
        version = "5.0.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1nzl4q3xl68pq58g9xlym299bvjdii8cl7ix595ym7jgw22maahx";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "legacy" "std" "zdict_builder" ];
      };
      "zstd-sys" = rec {
        crateName = "zstd-sys";
        version = "2.0.15+zstd.1.5.7";
        edition = "2018";
        links = "zstd";
        sha256 = "0dx2l7dyw1p7x7g3p1pfd25ip36hr22hvmgixm6cgl4pvlyii0gb";
        libName = "zstd_sys";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [ "legacy" "zdict_builder" "bindgen" ];
        };
        resolvedDefaultFeatures = [ "legacy" "std" "zdict_builder" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

