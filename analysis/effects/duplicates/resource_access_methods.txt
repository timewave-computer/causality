crates/causality-effects/src/resource/access.rs:    fn can_access_resources(&self, tracker: &ResourceAccessTracker) -> EffectResult<()> {
crates/causality-effects/src/resource/access.rs:    fn resources_to_access(&self) -> Vec<(ContentId, ResourceAccessType)> {
crates/causality-effects/src/resource/access.rs:    fn track_resource_accesses(&self, tracker: &ResourceAccessTracker) -> EffectResult<()> {
crates/causality-effects/src/resource/access.rs:    pub async fn request_access(
crates/causality-effects/src/resource/access.rs:    pub fn get_domain_accesses(&self, domain_id: &DomainId) -> Vec<ResourceAccess> {
crates/causality-effects/src/resource/access.rs:    pub fn get_effect_accesses(&self, effect_id: &EffectId) -> Vec<ResourceAccess> {
crates/causality-effects/src/resource/access.rs:    pub fn get_effects_using_resource(&self, resource_id: &ContentId) -> HashSet<EffectId> {
crates/causality-effects/src/resource/access.rs:    pub fn get_resource_accesses(&self, resource_id: &ContentId) -> Vec<ResourceAccess> {
crates/causality-effects/src/resource/access.rs:    pub fn get_resource_lock(&self, resource_id: &ContentId) -> Option<ResourceAccess> {
crates/causality-effects/src/resource/access.rs:    pub fn grant(&mut self) {
crates/causality-effects/src/resource/access.rs:    pub fn is_resource_in_use(&self, resource_id: &ContentId) -> bool {
crates/causality-effects/src/resource/access.rs:    pub fn is_resource_locked(&self, resource_id: &ContentId) -> bool {
crates/causality-effects/src/resource/access.rs:    pub fn new(
crates/causality-effects/src/resource/access.rs:    pub fn new() -> Self {
crates/causality-effects/src/resource/access.rs:    pub fn new() -> Self {
crates/causality-effects/src/resource/access.rs:    pub fn record_access(&self, access: ResourceAccess) -> Result<()> {
crates/causality-effects/src/resource/access.rs:    pub fn release_access(
crates/causality-effects/src/resource/access.rs:    pub fn release_lock(&self, resource_id: &ContentId, effect_id: &EffectId) -> Result<()> {
crates/causality-effects/src/resource/access.rs:    pub fn tracker(&self) -> Arc<ResourceAccessTracker> {
crates/causality-effects/src/resource/access.rs:    pub fn with_domain(
crates/causality-resource/src/access.rs:    fn default() -> Self {
crates/causality-resource/src/access.rs:    pub fn get_resource_accesses(&self, resource_id: &ContentId) -> Vec<ResourceAccess> {
crates/causality-resource/src/access.rs:    pub fn is_resource_locked(&self, resource_id: &ContentId) -> bool {
crates/causality-resource/src/access.rs:    pub fn is_resource_protected(&self, resource_id: &ContentId) -> bool {
crates/causality-resource/src/access.rs:    pub fn lock_resource(&self, resource_id: &ContentId, locker_id: &str) -> AccessResult<()> {
crates/causality-resource/src/access.rs:    pub fn new() -> Self {
crates/causality-resource/src/access.rs:    pub fn protect_resource(&self, resource_id: &ContentId) {
crates/causality-resource/src/access.rs:    pub fn record_access(&self, access: ResourceAccess) -> AccessResult<()> {
crates/causality-resource/src/access.rs:    pub fn release_lock(&self, resource_id: &ContentId, locker_id: &str) -> AccessResult<()> {
